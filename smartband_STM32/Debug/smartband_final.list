
smartband_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08008f88  08008f88  00018f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  080095f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
  8 .bss          000029d4  200001e0  200001e0  000201e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20002bb4  20002bb4  000201e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b2b6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003ae4  00000000  00000000  0003b4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000080f1  00000000  00000000  0003efaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  000470a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  00047c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007f54  00000000  00000000  00048a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000045f1  00000000  00000000  000509e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00054fd5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003170  00000000  00000000  00055054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f70 	.word	0x08008f70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008f70 	.word	0x08008f70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_InitTick+0x3c>)
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_InitTick+0x40>)
{
 8000f56:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	7818      	ldrb	r0, [r3, #0]
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f62:	6810      	ldr	r0, [r2, #0]
 8000f64:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f68:	f000 f884 	bl	8001074 <HAL_SYSTICK_Config>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	b958      	cbnz	r0, 8000f88 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	2d0f      	cmp	r5, #15
 8000f72:	d809      	bhi.n	8000f88 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	4602      	mov	r2, r0
 8000f76:	4629      	mov	r1, r5
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f838 	bl	8000ff0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_InitTick+0x44>)
 8000f82:	4620      	mov	r0, r4
 8000f84:	601d      	str	r5, [r3, #0]
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_Init>:
{
 8000f98:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x30>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fa2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000faa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fb2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f809 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff ffc8 	bl	8000f50 <HAL_InitTick>
  HAL_MspInit();
 8000fc0:	f004 f8c0 	bl	8005144 <HAL_MspInit>
}
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	bd08      	pop	{r3, pc}
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fd4:	041b      	lsls	r3, r3, #16
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	0200      	lsls	r0, r0, #8
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fe6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fe8:	60d3      	str	r3, [r2, #12]
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b530      	push	{r4, r5, lr}
 8000ff4:	68dc      	ldr	r4, [r3, #12]
 8000ff6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	2b04      	cmp	r3, #4
 8001002:	bf28      	it	cs
 8001004:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 0501 	mov.w	r5, #1
 800100c:	fa05 f303 	lsl.w	r3, r5, r3
 8001010:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001014:	bf8c      	ite	hi
 8001016:	3c03      	subhi	r4, #3
 8001018:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101a:	4019      	ands	r1, r3
 800101c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101e:	fa05 f404 	lsl.w	r4, r5, r4
 8001022:	3c01      	subs	r4, #1
 8001024:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001026:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	ea42 0201 	orr.w	r2, r2, r1
 800102c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	bfad      	iteet	ge
 8001032:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	f000 000f 	andlt.w	r0, r0, #15
 800103a:	4b06      	ldrlt	r3, [pc, #24]	; (8001054 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	bfb5      	itete	lt
 8001042:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800104c:	bd30      	pop	{r4, r5, pc}
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	e000ed14 	.word	0xe000ed14

08001058 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001058:	2800      	cmp	r0, #0
 800105a:	db08      	blt.n	800106e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105c:	0942      	lsrs	r2, r0, #5
 800105e:	2301      	movs	r3, #1
 8001060:	f000 001f 	and.w	r0, r0, #31
 8001064:	fa03 f000 	lsl.w	r0, r3, r0
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <HAL_NVIC_EnableIRQ+0x18>)
 800106a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100

08001074 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	3801      	subs	r0, #1
 8001076:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800107a:	d20a      	bcs.n	8001092 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001080:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	21f0      	movs	r1, #240	; 0xf0
 8001084:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d003      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
 80010ae:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80010b2:	2305      	movs	r3, #5
 80010b4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80010c0:	2000      	movs	r0, #0
}
 80010c2:	4770      	bx	lr

080010c4 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 80010c4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001284 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4a68      	ldr	r2, [pc, #416]	; (800127c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001288 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80010e2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80010e8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ec:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80010f0:	45b6      	cmp	lr, r6
 80010f2:	f040 80ae 	bne.w	8001252 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	684c      	ldr	r4, [r1, #4]
 80010f8:	f024 0710 	bic.w	r7, r4, #16
 80010fc:	2f02      	cmp	r7, #2
 80010fe:	d116      	bne.n	800112e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001100:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001104:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001108:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800110c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001110:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001114:	f04f 0c0f 	mov.w	ip, #15
 8001118:	fa0c fc0b 	lsl.w	ip, ip, fp
 800111c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001120:	690d      	ldr	r5, [r1, #16]
 8001122:	fa05 f50b 	lsl.w	r5, r5, fp
 8001126:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800112a:	f8ca 5020 	str.w	r5, [sl, #32]
 800112e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001132:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001134:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001138:	fa05 f50a 	lsl.w	r5, r5, sl
 800113c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001142:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001146:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001150:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001152:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001156:	d811      	bhi.n	800117c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001158:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	68cf      	ldr	r7, [r1, #12]
 8001160:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001164:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001168:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800116a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001170:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001174:	409f      	lsls	r7, r3
 8001176:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800117a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800117c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	688f      	ldr	r7, [r1, #8]
 8001182:	fa07 f70a 	lsl.w	r7, r7, sl
 8001186:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001188:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118a:	00e5      	lsls	r5, r4, #3
 800118c:	d561      	bpl.n	8001252 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	f04f 0b00 	mov.w	fp, #0
 8001192:	f8cd b00c 	str.w	fp, [sp, #12]
 8001196:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	4d39      	ldr	r5, [pc, #228]	; (8001280 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011a0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80011a4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011a8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80011ac:	9703      	str	r7, [sp, #12]
 80011ae:	9f03      	ldr	r7, [sp, #12]
 80011b0:	f023 0703 	bic.w	r7, r3, #3
 80011b4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011b8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80011c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011c8:	f04f 0e0f 	mov.w	lr, #15
 80011cc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d6:	d043      	beq.n	8001260 <HAL_GPIO_Init+0x194>
 80011d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011dc:	42a8      	cmp	r0, r5
 80011de:	d041      	beq.n	8001264 <HAL_GPIO_Init+0x198>
 80011e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011e4:	42a8      	cmp	r0, r5
 80011e6:	d03f      	beq.n	8001268 <HAL_GPIO_Init+0x19c>
 80011e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ec:	42a8      	cmp	r0, r5
 80011ee:	d03d      	beq.n	800126c <HAL_GPIO_Init+0x1a0>
 80011f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	d03b      	beq.n	8001270 <HAL_GPIO_Init+0x1a4>
 80011f8:	4548      	cmp	r0, r9
 80011fa:	d03b      	beq.n	8001274 <HAL_GPIO_Init+0x1a8>
 80011fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001200:	42a8      	cmp	r0, r5
 8001202:	d039      	beq.n	8001278 <HAL_GPIO_Init+0x1ac>
 8001204:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001208:	42a8      	cmp	r0, r5
 800120a:	bf14      	ite	ne
 800120c:	2508      	movne	r5, #8
 800120e:	2507      	moveq	r5, #7
 8001210:	fa05 f50c 	lsl.w	r5, r5, ip
 8001214:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800121a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800121c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001222:	bf0c      	ite	eq
 8001224:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001226:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001228:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800122a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001230:	bf0c      	ite	eq
 8001232:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001234:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001236:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001238:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800123a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800123e:	bf0c      	ite	eq
 8001240:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001242:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001244:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001246:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001248:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800124a:	bf54      	ite	pl
 800124c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800124e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001250:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	3301      	adds	r3, #1
 8001254:	2b10      	cmp	r3, #16
 8001256:	f47f af44 	bne.w	80010e2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800125a:	b005      	add	sp, #20
 800125c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001260:	465d      	mov	r5, fp
 8001262:	e7d5      	b.n	8001210 <HAL_GPIO_Init+0x144>
 8001264:	2501      	movs	r5, #1
 8001266:	e7d3      	b.n	8001210 <HAL_GPIO_Init+0x144>
 8001268:	2502      	movs	r5, #2
 800126a:	e7d1      	b.n	8001210 <HAL_GPIO_Init+0x144>
 800126c:	2503      	movs	r5, #3
 800126e:	e7cf      	b.n	8001210 <HAL_GPIO_Init+0x144>
 8001270:	2504      	movs	r5, #4
 8001272:	e7cd      	b.n	8001210 <HAL_GPIO_Init+0x144>
 8001274:	2505      	movs	r5, #5
 8001276:	e7cb      	b.n	8001210 <HAL_GPIO_Init+0x144>
 8001278:	2506      	movs	r5, #6
 800127a:	e7c9      	b.n	8001210 <HAL_GPIO_Init+0x144>
 800127c:	40013c00 	.word	0x40013c00
 8001280:	40020000 	.word	0x40020000
 8001284:	40023800 	.word	0x40023800
 8001288:	40021400 	.word	0x40021400

0800128c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800128c:	6903      	ldr	r3, [r0, #16]
 800128e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001290:	bf14      	ite	ne
 8001292:	2001      	movne	r0, #1
 8001294:	2000      	moveq	r0, #0
 8001296:	4770      	bx	lr

08001298 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	b10a      	cbz	r2, 800129e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129a:	6181      	str	r1, [r0, #24]
 800129c:	4770      	bx	lr
 800129e:	0409      	lsls	r1, r1, #16
 80012a0:	e7fb      	b.n	800129a <HAL_GPIO_WritePin+0x2>
	...

080012a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80012a8:	6959      	ldr	r1, [r3, #20]
 80012aa:	4201      	tst	r1, r0
 80012ac:	d002      	beq.n	80012b4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b0:	f003 fec6 	bl	8005040 <HAL_GPIO_EXTI_Callback>
 80012b4:	bd08      	pop	{r3, pc}
 80012b6:	bf00      	nop
 80012b8:	40013c00 	.word	0x40013c00

080012bc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012bc:	6801      	ldr	r1, [r0, #0]
 80012be:	694b      	ldr	r3, [r1, #20]
 80012c0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	d010      	beq.n	80012ec <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ca:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012ce:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80012d0:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80012d2:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80012d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012d8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012dc:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	4770      	bx	lr
  }
  return HAL_OK;
 80012ec:	4618      	mov	r0, r3
}
 80012ee:	4770      	bx	lr

080012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80012f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012f4:	4604      	mov	r4, r0
 80012f6:	4617      	mov	r7, r2
 80012f8:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012fa:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012fe:	b28e      	uxth	r6, r1
 8001300:	6825      	ldr	r5, [r4, #0]
 8001302:	f1b8 0f01 	cmp.w	r8, #1
 8001306:	bf0c      	ite	eq
 8001308:	696b      	ldreq	r3, [r5, #20]
 800130a:	69ab      	ldrne	r3, [r5, #24]
 800130c:	ea36 0303 	bics.w	r3, r6, r3
 8001310:	bf14      	ite	ne
 8001312:	2001      	movne	r0, #1
 8001314:	2000      	moveq	r0, #0
 8001316:	b908      	cbnz	r0, 800131c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800131c:	696b      	ldr	r3, [r5, #20]
 800131e:	055a      	lsls	r2, r3, #21
 8001320:	d516      	bpl.n	8001350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001328:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800132a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800132e:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001330:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001332:	2300      	movs	r3, #0
 8001334:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001336:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800133a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800133e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001340:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001344:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001346:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800134a:	2001      	movs	r0, #1
 800134c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001350:	1c7b      	adds	r3, r7, #1
 8001352:	d0d5      	beq.n	8001300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001354:	f004 fa10 	bl	8005778 <HAL_GetTick>
 8001358:	eba0 0009 	sub.w	r0, r0, r9
 800135c:	4287      	cmp	r7, r0
 800135e:	d301      	bcc.n	8001364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001360:	2f00      	cmp	r7, #0
 8001362:	d1cd      	bne.n	8001300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001364:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001366:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001368:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800136a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800136e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001372:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	e7e4      	b.n	8001344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

0800137a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800137a:	b570      	push	{r4, r5, r6, lr}
 800137c:	4604      	mov	r4, r0
 800137e:	460d      	mov	r5, r1
 8001380:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	075b      	lsls	r3, r3, #29
 8001388:	d501      	bpl.n	800138e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800138a:	2000      	movs	r0, #0
 800138c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff ff94 	bl	80012bc <I2C_IsAcknowledgeFailed>
 8001394:	b9a8      	cbnz	r0, 80013c2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001396:	1c6a      	adds	r2, r5, #1
 8001398:	d0f3      	beq.n	8001382 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800139a:	f004 f9ed 	bl	8005778 <HAL_GetTick>
 800139e:	1b80      	subs	r0, r0, r6
 80013a0:	4285      	cmp	r5, r0
 80013a2:	d301      	bcc.n	80013a8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80013a4:	2d00      	cmp	r5, #0
 80013a6:	d1ec      	bne.n	8001382 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013a8:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80013aa:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013ac:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013bc:	f042 0220 	orr.w	r2, r2, #32
 80013c0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80013c2:	2001      	movs	r0, #1
}
 80013c4:	bd70      	pop	{r4, r5, r6, pc}

080013c6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80013c6:	b570      	push	{r4, r5, r6, lr}
 80013c8:	4604      	mov	r4, r0
 80013ca:	460d      	mov	r5, r1
 80013cc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013ce:	6820      	ldr	r0, [r4, #0]
 80013d0:	6943      	ldr	r3, [r0, #20]
 80013d2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80013d6:	d001      	beq.n	80013dc <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80013d8:	2000      	movs	r0, #0
}
 80013da:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80013dc:	6942      	ldr	r2, [r0, #20]
 80013de:	06d2      	lsls	r2, r2, #27
 80013e0:	d50e      	bpl.n	8001400 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013e2:	f06f 0210 	mvn.w	r2, #16
 80013e6:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80013e8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013ea:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80013f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013f6:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80013fc:	2001      	movs	r0, #1
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001400:	f004 f9ba 	bl	8005778 <HAL_GetTick>
 8001404:	1b80      	subs	r0, r0, r6
 8001406:	42a8      	cmp	r0, r5
 8001408:	d801      	bhi.n	800140e <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d1df      	bne.n	80013ce <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800140e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001410:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001412:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001414:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001418:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800141c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800141e:	f042 0220 	orr.w	r2, r2, #32
 8001422:	e7e8      	b.n	80013f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001424 <I2C_WaitOnFlagUntilTimeout>:
{
 8001424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001428:	9e08      	ldr	r6, [sp, #32]
 800142a:	4604      	mov	r4, r0
 800142c:	4690      	mov	r8, r2
 800142e:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001430:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001434:	b28d      	uxth	r5, r1
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	f1b9 0f01 	cmp.w	r9, #1
 800143c:	bf0c      	ite	eq
 800143e:	695b      	ldreq	r3, [r3, #20]
 8001440:	699b      	ldrne	r3, [r3, #24]
 8001442:	ea35 0303 	bics.w	r3, r5, r3
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	4543      	cmp	r3, r8
 800144e:	d002      	beq.n	8001456 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001450:	2000      	movs	r0, #0
}
 8001452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001456:	1c7b      	adds	r3, r7, #1
 8001458:	d0ed      	beq.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800145a:	f004 f98d 	bl	8005778 <HAL_GetTick>
 800145e:	1b80      	subs	r0, r0, r6
 8001460:	4287      	cmp	r7, r0
 8001462:	d301      	bcc.n	8001468 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001464:	2f00      	cmp	r7, #0
 8001466:	d1e6      	bne.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001468:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800146a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800146c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800146e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001472:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001476:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001478:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800147c:	f042 0220 	orr.w	r2, r2, #32
 8001480:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001482:	2001      	movs	r0, #1
 8001484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001488 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	4604      	mov	r4, r0
 800148c:	460d      	mov	r5, r1
 800148e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	061b      	lsls	r3, r3, #24
 8001496:	d501      	bpl.n	800149c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
 800149a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ff0d 	bl	80012bc <I2C_IsAcknowledgeFailed>
 80014a2:	b9a8      	cbnz	r0, 80014d0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80014a4:	1c6a      	adds	r2, r5, #1
 80014a6:	d0f3      	beq.n	8001490 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a8:	f004 f966 	bl	8005778 <HAL_GetTick>
 80014ac:	1b80      	subs	r0, r0, r6
 80014ae:	4285      	cmp	r5, r0
 80014b0:	d301      	bcc.n	80014b6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80014b2:	2d00      	cmp	r5, #0
 80014b4:	d1ec      	bne.n	8001490 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014b6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80014b8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014ba:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ca:	f042 0220 	orr.w	r2, r2, #32
 80014ce:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
}
 80014d2:	bd70      	pop	{r4, r5, r6, pc}

080014d4 <I2C_RequestMemoryWrite>:
{
 80014d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80014d8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014da:	6802      	ldr	r2, [r0, #0]
{
 80014dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80014de:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e6:	6013      	str	r3, [r2, #0]
{
 80014e8:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014ea:	9600      	str	r6, [sp, #0]
 80014ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80014f4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014f6:	f7ff ff95 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 80014fa:	b118      	cbz	r0, 8001504 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80014fc:	2001      	movs	r0, #1
}
 80014fe:	b004      	add	sp, #16
 8001500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001504:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001508:	4918      	ldr	r1, [pc, #96]	; (800156c <I2C_RequestMemoryWrite+0x98>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800150a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800150e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001510:	4620      	mov	r0, r4
 8001512:	4633      	mov	r3, r6
 8001514:	f7ff feec 	bl	80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001518:	2800      	cmp	r0, #0
 800151a:	d1ef      	bne.n	80014fc <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	9003      	str	r0, [sp, #12]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	9203      	str	r2, [sp, #12]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001528:	4632      	mov	r2, r6
 800152a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800152c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff ffaa 	bl	8001488 <I2C_WaitOnTXEFlagUntilTimeout>
 8001534:	b140      	cbz	r0, 8001548 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001538:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153a:	bf01      	itttt	eq
 800153c:	6822      	ldreq	r2, [r4, #0]
 800153e:	6813      	ldreq	r3, [r2, #0]
 8001540:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001544:	6013      	streq	r3, [r2, #0]
 8001546:	e7d9      	b.n	80014fc <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001548:	f1b8 0f01 	cmp.w	r8, #1
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	d102      	bne.n	8001556 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001550:	b2ed      	uxtb	r5, r5
 8001552:	611d      	str	r5, [r3, #16]
 8001554:	e7d3      	b.n	80014fe <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001556:	0a2a      	lsrs	r2, r5, #8
 8001558:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800155a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800155c:	4632      	mov	r2, r6
 800155e:	4620      	mov	r0, r4
 8001560:	f7ff ff92 	bl	8001488 <I2C_WaitOnTXEFlagUntilTimeout>
 8001564:	2800      	cmp	r0, #0
 8001566:	d1e6      	bne.n	8001536 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	e7f1      	b.n	8001550 <I2C_RequestMemoryWrite+0x7c>
 800156c:	00010002 	.word	0x00010002

08001570 <I2C_RequestMemoryRead>:
{
 8001570:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001574:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001576:	6803      	ldr	r3, [r0, #0]
{
 8001578:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800157a:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001582:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800158a:	601a      	str	r2, [r3, #0]
{
 800158c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800158e:	9500      	str	r5, [sp, #0]
 8001590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001598:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800159a:	f7ff ff43 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 800159e:	b118      	cbz	r0, 80015a8 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
}
 80015a2:	b004      	add	sp, #16
 80015a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015a8:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015aa:	492b      	ldr	r1, [pc, #172]	; (8001658 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015ac:	b2ff      	uxtb	r7, r7
 80015ae:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80015b2:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015b4:	4620      	mov	r0, r4
 80015b6:	462b      	mov	r3, r5
 80015b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80015ba:	f7ff fe99 	bl	80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d1ee      	bne.n	80015a0 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	9003      	str	r0, [sp, #12]
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	9203      	str	r2, [sp, #12]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ce:	462a      	mov	r2, r5
 80015d0:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff ff57 	bl	8001488 <I2C_WaitOnTXEFlagUntilTimeout>
 80015da:	b140      	cbz	r0, 80015ee <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015de:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e0:	bf01      	itttt	eq
 80015e2:	6822      	ldreq	r2, [r4, #0]
 80015e4:	6813      	ldreq	r3, [r2, #0]
 80015e6:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80015ea:	6013      	streq	r3, [r2, #0]
 80015ec:	e7d8      	b.n	80015a0 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015ee:	f1b8 0f01 	cmp.w	r8, #1
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	d125      	bne.n	8001642 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015f6:	b2f6      	uxtb	r6, r6
 80015f8:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015fa:	462a      	mov	r2, r5
 80015fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff ff42 	bl	8001488 <I2C_WaitOnTXEFlagUntilTimeout>
 8001604:	4602      	mov	r2, r0
 8001606:	2800      	cmp	r0, #0
 8001608:	d1e8      	bne.n	80015dc <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800160a:	6821      	ldr	r1, [r4, #0]
 800160c:	680b      	ldr	r3, [r1, #0]
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001614:	4620      	mov	r0, r4
 8001616:	9500      	str	r5, [sp, #0]
 8001618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800161a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800161e:	f7ff ff01 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001622:	2800      	cmp	r0, #0
 8001624:	d1bc      	bne.n	80015a0 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001626:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800162a:	490b      	ldr	r1, [pc, #44]	; (8001658 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800162c:	f047 0701 	orr.w	r7, r7, #1
 8001630:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001632:	4620      	mov	r0, r4
 8001634:	462b      	mov	r3, r5
 8001636:	f7ff fe5b 	bl	80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 800163a:	3000      	adds	r0, #0
 800163c:	bf18      	it	ne
 800163e:	2001      	movne	r0, #1
 8001640:	e7af      	b.n	80015a2 <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001642:	0a32      	lsrs	r2, r6, #8
 8001644:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001648:	462a      	mov	r2, r5
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff ff1c 	bl	8001488 <I2C_WaitOnTXEFlagUntilTimeout>
 8001650:	2800      	cmp	r0, #0
 8001652:	d1c3      	bne.n	80015dc <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	e7ce      	b.n	80015f6 <I2C_RequestMemoryRead+0x86>
 8001658:	00010002 	.word	0x00010002

0800165c <HAL_I2C_Init>:
{
 800165c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800165e:	4604      	mov	r4, r0
 8001660:	b908      	cbnz	r0, 8001666 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001666:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800166a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800166e:	b91b      	cbnz	r3, 8001678 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001670:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001674:	f003 f82c 	bl	80046d0 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001678:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800167a:	2324      	movs	r3, #36	; 0x24
 800167c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	f023 0301 	bic.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001688:	f001 fc52 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800168c:	6865      	ldr	r5, [r4, #4]
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_I2C_Init+0x138>)
 8001690:	429d      	cmp	r5, r3
 8001692:	d84d      	bhi.n	8001730 <HAL_I2C_Init+0xd4>
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <HAL_I2C_Init+0x13c>)
 8001696:	4298      	cmp	r0, r3
 8001698:	d9e3      	bls.n	8001662 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800169a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800169c:	493f      	ldr	r1, [pc, #252]	; (800179c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800169e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80016a0:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a8:	430b      	orrs	r3, r1
 80016aa:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ac:	6a13      	ldr	r3, [r2, #32]
 80016ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016b2:	3101      	adds	r1, #1
 80016b4:	4319      	orrs	r1, r3
 80016b6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016b8:	69d1      	ldr	r1, [r2, #28]
 80016ba:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_I2C_Init+0x138>)
 80016bc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80016c0:	429d      	cmp	r5, r3
 80016c2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80016c6:	f100 30ff 	add.w	r0, r0, #4294967295
 80016ca:	d848      	bhi.n	800175e <HAL_I2C_Init+0x102>
 80016cc:	006d      	lsls	r5, r5, #1
 80016ce:	fbb0 f0f5 	udiv	r0, r0, r5
 80016d2:	3001      	adds	r0, #1
 80016d4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80016d8:	2b04      	cmp	r3, #4
 80016da:	bf38      	it	cc
 80016dc:	2304      	movcc	r3, #4
 80016de:	430b      	orrs	r3, r1
 80016e0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016e2:	6811      	ldr	r1, [r2, #0]
 80016e4:	6a20      	ldr	r0, [r4, #32]
 80016e6:	69e3      	ldr	r3, [r4, #28]
 80016e8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80016ec:	4303      	orrs	r3, r0
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f2:	6891      	ldr	r1, [r2, #8]
 80016f4:	68e0      	ldr	r0, [r4, #12]
 80016f6:	6923      	ldr	r3, [r4, #16]
 80016f8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80016fc:	4303      	orrs	r3, r0
 80016fe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001702:	430b      	orrs	r3, r1
 8001704:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001706:	68d1      	ldr	r1, [r2, #12]
 8001708:	69a0      	ldr	r0, [r4, #24]
 800170a:	6963      	ldr	r3, [r4, #20]
 800170c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001710:	4303      	orrs	r3, r0
 8001712:	430b      	orrs	r3, r1
 8001714:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001716:	6813      	ldr	r3, [r2, #0]
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001720:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001722:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001724:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001728:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800172a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800172e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_I2C_Init+0x144>)
 8001732:	4298      	cmp	r0, r3
 8001734:	d995      	bls.n	8001662 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001736:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001738:	4e18      	ldr	r6, [pc, #96]	; (800179c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800173a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800173c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001744:	4333      	orrs	r3, r6
 8001746:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001748:	6a13      	ldr	r3, [r2, #32]
 800174a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800174e:	4371      	muls	r1, r6
 8001750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001754:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001758:	fbb1 f1f6 	udiv	r1, r1, r6
 800175c:	e7a9      	b.n	80016b2 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800175e:	68a3      	ldr	r3, [r4, #8]
 8001760:	b953      	cbnz	r3, 8001778 <HAL_I2C_Init+0x11c>
 8001762:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001766:	fbb0 f0f3 	udiv	r0, r0, r3
 800176a:	1c43      	adds	r3, r0, #1
 800176c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001770:	b16b      	cbz	r3, 800178e <HAL_I2C_Init+0x132>
 8001772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001776:	e7b2      	b.n	80016de <HAL_I2C_Init+0x82>
 8001778:	2319      	movs	r3, #25
 800177a:	436b      	muls	r3, r5
 800177c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001780:	1c43      	adds	r3, r0, #1
 8001782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001786:	b113      	cbz	r3, 800178e <HAL_I2C_Init+0x132>
 8001788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800178c:	e7a7      	b.n	80016de <HAL_I2C_Init+0x82>
 800178e:	2301      	movs	r3, #1
 8001790:	e7a5      	b.n	80016de <HAL_I2C_Init+0x82>
 8001792:	bf00      	nop
 8001794:	000186a0 	.word	0x000186a0
 8001798:	001e847f 	.word	0x001e847f
 800179c:	000f4240 	.word	0x000f4240
 80017a0:	003d08ff 	.word	0x003d08ff

080017a4 <HAL_I2C_Master_Transmit>:
{
 80017a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80017a8:	4604      	mov	r4, r0
 80017aa:	461f      	mov	r7, r3
 80017ac:	460d      	mov	r5, r1
 80017ae:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f003 ffe2 	bl	8005778 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80017b8:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80017ba:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017bc:	d004      	beq.n	80017c8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80017be:	2502      	movs	r5, #2
}
 80017c0:	4628      	mov	r0, r5
 80017c2:	b004      	add	sp, #16
 80017c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c8:	9000      	str	r0, [sp, #0]
 80017ca:	2319      	movs	r3, #25
 80017cc:	2201      	movs	r2, #1
 80017ce:	4958      	ldr	r1, [pc, #352]	; (8001930 <HAL_I2C_Master_Transmit+0x18c>)
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7ff fe27 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d1f1      	bne.n	80017be <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80017da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d0ed      	beq.n	80017be <HAL_I2C_Master_Transmit+0x1a>
 80017e2:	2301      	movs	r3, #1
 80017e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80017ee:	bf5e      	ittt	pl
 80017f0:	681a      	ldrpl	r2, [r3, #0]
 80017f2:	f042 0201 	orrpl.w	r2, r2, #1
 80017f6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fe:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001800:	2221      	movs	r2, #33	; 0x21
 8001802:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001806:	2210      	movs	r2, #16
 8001808:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800180c:	2200      	movs	r2, #0
 800180e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001810:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001812:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001814:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_I2C_Master_Transmit+0x190>)
 8001818:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800181a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 800181c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001820:	2a08      	cmp	r2, #8
 8001822:	d004      	beq.n	800182e <HAL_I2C_Master_Transmit+0x8a>
 8001824:	2a01      	cmp	r2, #1
 8001826:	d002      	beq.n	800182e <HAL_I2C_Master_Transmit+0x8a>
 8001828:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800182c:	d104      	bne.n	8001838 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e002      	b.n	800183e <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001838:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800183a:	2a12      	cmp	r2, #18
 800183c:	d0f7      	beq.n	800182e <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800183e:	9600      	str	r6, [sp, #0]
 8001840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001842:	2200      	movs	r2, #0
 8001844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff fdeb 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 800184e:	b108      	cbz	r0, 8001854 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001850:	2501      	movs	r5, #1
 8001852:	e7b5      	b.n	80017c0 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001854:	6923      	ldr	r3, [r4, #16]
 8001856:	6822      	ldr	r2, [r4, #0]
 8001858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800185c:	d113      	bne.n	8001886 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800185e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001862:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001864:	4633      	mov	r3, r6
 8001866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001868:	4933      	ldr	r1, [pc, #204]	; (8001938 <HAL_I2C_Master_Transmit+0x194>)
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff fd40 	bl	80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001870:	4605      	mov	r5, r0
 8001872:	2800      	cmp	r0, #0
 8001874:	d1ec      	bne.n	8001850 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	9003      	str	r0, [sp, #12]
 800187a:	695a      	ldr	r2, [r3, #20]
 800187c:	9203      	str	r2, [sp, #12]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	9303      	str	r3, [sp, #12]
 8001882:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001884:	e044      	b.n	8001910 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001886:	11eb      	asrs	r3, r5, #7
 8001888:	f003 0306 	and.w	r3, r3, #6
 800188c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001890:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001892:	492a      	ldr	r1, [pc, #168]	; (800193c <HAL_I2C_Master_Transmit+0x198>)
 8001894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001896:	4633      	mov	r3, r6
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff fd29 	bl	80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800189e:	2800      	cmp	r0, #0
 80018a0:	d1d6      	bne.n	8001850 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	b2ed      	uxtb	r5, r5
 80018a6:	611d      	str	r5, [r3, #16]
 80018a8:	e7dc      	b.n	8001864 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018aa:	4632      	mov	r2, r6
 80018ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fdea 	bl	8001488 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b4:	b140      	cbz	r0, 80018c8 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018b8:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ba:	bf01      	itttt	eq
 80018bc:	6822      	ldreq	r2, [r4, #0]
 80018be:	6813      	ldreq	r3, [r2, #0]
 80018c0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80018c4:	6013      	streq	r3, [r2, #0]
 80018c6:	e7c3      	b.n	8001850 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80018d2:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80018d4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80018d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80018d8:	3a01      	subs	r2, #1
 80018da:	b292      	uxth	r2, r2
 80018dc:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80018de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018e0:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80018e2:	1e51      	subs	r1, r2, #1
 80018e4:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018e6:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80018e8:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ea:	d50a      	bpl.n	8001902 <HAL_I2C_Master_Transmit+0x15e>
 80018ec:	b149      	cbz	r1, 8001902 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ee:	7859      	ldrb	r1, [r3, #1]
 80018f0:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80018f2:	3302      	adds	r3, #2
 80018f4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80018f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80018fc:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80018fe:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001900:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001902:	4632      	mov	r2, r6
 8001904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff fd37 	bl	800137a <I2C_WaitOnBTFFlagUntilTimeout>
 800190c:	2800      	cmp	r0, #0
 800190e:	d1d2      	bne.n	80018b6 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001910:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1c9      	bne.n	80018aa <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001916:	6821      	ldr	r1, [r4, #0]
 8001918:	680a      	ldr	r2, [r1, #0]
 800191a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001920:	2220      	movs	r2, #32
 8001922:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001926:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800192e:	e747      	b.n	80017c0 <HAL_I2C_Master_Transmit+0x1c>
 8001930:	00100002 	.word	0x00100002
 8001934:	ffff0000 	.word	0xffff0000
 8001938:	00010002 	.word	0x00010002
 800193c:	00010008 	.word	0x00010008

08001940 <HAL_I2C_Master_Receive>:
{
 8001940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001944:	4604      	mov	r4, r0
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	4698      	mov	r8, r3
 800194a:	460f      	mov	r7, r1
 800194c:	4691      	mov	r9, r2
 800194e:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001950:	f003 ff12 	bl	8005778 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001954:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001958:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800195a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800195c:	d004      	beq.n	8001968 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800195e:	2702      	movs	r7, #2
}
 8001960:	4638      	mov	r0, r7
 8001962:	b009      	add	sp, #36	; 0x24
 8001964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001968:	9000      	str	r0, [sp, #0]
 800196a:	2319      	movs	r3, #25
 800196c:	2201      	movs	r2, #1
 800196e:	49a6      	ldr	r1, [pc, #664]	; (8001c08 <HAL_I2C_Master_Receive+0x2c8>)
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff fd57 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001976:	2800      	cmp	r0, #0
 8001978:	d1f1      	bne.n	800195e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800197a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800197e:	2b01      	cmp	r3, #1
 8001980:	d0ed      	beq.n	800195e <HAL_I2C_Master_Receive+0x1e>
 8001982:	2301      	movs	r3, #1
 8001984:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800198e:	bf5e      	ittt	pl
 8001990:	681a      	ldrpl	r2, [r3, #0]
 8001992:	f042 0201 	orrpl.w	r2, r2, #1
 8001996:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019a0:	2222      	movs	r2, #34	; 0x22
 80019a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019a6:	2210      	movs	r2, #16
 80019a8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019ac:	2200      	movs	r2, #0
 80019ae:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80019b0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019b6:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019b8:	4a94      	ldr	r2, [pc, #592]	; (8001c0c <HAL_I2C_Master_Receive+0x2cc>)
 80019ba:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019be:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 80019c0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019c8:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ca:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019cc:	d004      	beq.n	80019d8 <HAL_I2C_Master_Receive+0x98>
 80019ce:	2a01      	cmp	r2, #1
 80019d0:	d002      	beq.n	80019d8 <HAL_I2C_Master_Receive+0x98>
 80019d2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80019d6:	d104      	bne.n	80019e2 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e002      	b.n	80019e8 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80019e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019e4:	2a11      	cmp	r2, #17
 80019e6:	d0f7      	beq.n	80019d8 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019e8:	9500      	str	r5, [sp, #0]
 80019ea:	4633      	mov	r3, r6
 80019ec:	2200      	movs	r2, #0
 80019ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff fd16 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 80019f8:	b108      	cbz	r0, 80019fe <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 80019fa:	2701      	movs	r7, #1
 80019fc:	e7b0      	b.n	8001960 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019fe:	6923      	ldr	r3, [r4, #16]
 8001a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	d140      	bne.n	8001a8a <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a08:	f047 0701 	orr.w	r7, r7, #1
 8001a0c:	b2ff      	uxtb	r7, r7
 8001a0e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a10:	462b      	mov	r3, r5
 8001a12:	4632      	mov	r2, r6
 8001a14:	497e      	ldr	r1, [pc, #504]	; (8001c10 <HAL_I2C_Master_Receive+0x2d0>)
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7ff fc6a 	bl	80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a1c:	4607      	mov	r7, r0
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	d1eb      	bne.n	80019fa <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8001a22:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_I2C_Master_Receive+0x1b2>
    else if (hi2c->XferSize == 1U)
 8001a2a:	2a01      	cmp	r2, #1
 8001a2c:	d174      	bne.n	8001b18 <HAL_I2C_Master_Receive+0x1d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a34:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	9704      	str	r7, [sp, #16]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	9204      	str	r2, [sp, #16]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	9204      	str	r2, [sp, #16]
 8001a40:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a48:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8001c18 <HAL_I2C_Master_Receive+0x2d8>
    while (hi2c->XferSize > 0U)
 8001a4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d058      	beq.n	8001b06 <HAL_I2C_Master_Receive+0x1c6>
      if (hi2c->XferSize <= 3U)
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	f200 80ba 	bhi.w	8001bce <HAL_I2C_Master_Receive+0x28e>
        if (hi2c->XferSize == 1U)
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d177      	bne.n	8001b4e <HAL_I2C_Master_Receive+0x20e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a5e:	462a      	mov	r2, r5
 8001a60:	4631      	mov	r1, r6
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff fcaf 	bl	80013c6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d1c6      	bne.n	80019fa <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a6c:	6822      	ldr	r2, [r4, #0]
 8001a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a70:	6912      	ldr	r2, [r2, #16]
 8001a72:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a76:	3301      	adds	r3, #1
 8001a78:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001a88:	e7e1      	b.n	8001a4e <HAL_I2C_Master_Receive+0x10e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a8a:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8001a8e:	f008 0806 	and.w	r8, r8, #6
 8001a92:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001a96:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a98:	495e      	ldr	r1, [pc, #376]	; (8001c14 <HAL_I2C_Master_Receive+0x2d4>)
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	4632      	mov	r2, r6
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fc26 	bl	80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d1a8      	bne.n	80019fa <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aa8:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001aaa:	4959      	ldr	r1, [pc, #356]	; (8001c10 <HAL_I2C_Master_Receive+0x2d0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aac:	b2ff      	uxtb	r7, r7
 8001aae:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ab0:	4632      	mov	r2, r6
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff fc1b 	bl	80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aba:	4602      	mov	r2, r0
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d19c      	bne.n	80019fa <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	9007      	str	r0, [sp, #28]
 8001ac4:	6959      	ldr	r1, [r3, #20]
 8001ac6:	9107      	str	r1, [sp, #28]
 8001ac8:	6999      	ldr	r1, [r3, #24]
 8001aca:	9107      	str	r1, [sp, #28]
 8001acc:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001ad4:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	9500      	str	r5, [sp, #0]
 8001ada:	4633      	mov	r3, r6
 8001adc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ae0:	f7ff fca0 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d188      	bne.n	80019fa <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001aee:	6113      	str	r3, [r2, #16]
 8001af0:	e78e      	b.n	8001a10 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af2:	9703      	str	r7, [sp, #12]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	9203      	str	r2, [sp, #12]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	9203      	str	r2, [sp, #12]
 8001afc:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b04:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b06:	2320      	movs	r3, #32
 8001b08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001b12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001b16:	e723      	b.n	8001960 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8001b18:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001b1c:	d10d      	bne.n	8001b3a <HAL_I2C_Master_Receive+0x1fa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b2a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2c:	9705      	str	r7, [sp, #20]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	9205      	str	r2, [sp, #20]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	9305      	str	r3, [sp, #20]
 8001b36:	9b05      	ldr	r3, [sp, #20]
 8001b38:	e787      	b.n	8001a4a <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b3e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b40:	9706      	str	r7, [sp, #24]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	9206      	str	r2, [sp, #24]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	9306      	str	r3, [sp, #24]
 8001b4a:	9b06      	ldr	r3, [sp, #24]
 8001b4c:	e77d      	b.n	8001a4a <HAL_I2C_Master_Receive+0x10a>
        else if (hi2c->XferSize == 2U)
 8001b4e:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b50:	9500      	str	r5, [sp, #0]
 8001b52:	4633      	mov	r3, r6
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4641      	mov	r1, r8
 8001b5a:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001b5c:	d11a      	bne.n	8001b94 <HAL_I2C_Master_Receive+0x254>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5e:	f7ff fc61 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	f47f af49 	bne.w	80019fa <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b70:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001b78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b7a:	1c53      	adds	r3, r2, #1
 8001b7c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001b7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b80:	3b01      	subs	r3, #1
 8001b82:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	7053      	strb	r3, [r2, #1]
 8001b92:	e76f      	b.n	8001a74 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b94:	f7ff fc46 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	f47f af2d 	bne.w	80019fa <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	6819      	ldr	r1, [r3, #0]
 8001ba4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001ba8:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001baa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb2:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001bb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001bbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc6:	4641      	mov	r1, r8
 8001bc8:	4633      	mov	r3, r6
 8001bca:	4620      	mov	r0, r4
 8001bcc:	e7c7      	b.n	8001b5e <HAL_I2C_Master_Receive+0x21e>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bce:	462a      	mov	r2, r5
 8001bd0:	4631      	mov	r1, r6
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff fbf7 	bl	80013c6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	f47f af0e 	bne.w	80019fa <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bde:	6822      	ldr	r2, [r4, #0]
 8001be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001be2:	6912      	ldr	r2, [r2, #16]
 8001be4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001be6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001be8:	1c53      	adds	r3, r2, #1
 8001bea:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001bec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001bf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	6959      	ldr	r1, [r3, #20]
 8001bfe:	0749      	lsls	r1, r1, #29
 8001c00:	f57f af25 	bpl.w	8001a4e <HAL_I2C_Master_Receive+0x10e>
 8001c04:	e7c3      	b.n	8001b8e <HAL_I2C_Master_Receive+0x24e>
 8001c06:	bf00      	nop
 8001c08:	00100002 	.word	0x00100002
 8001c0c:	ffff0000 	.word	0xffff0000
 8001c10:	00010002 	.word	0x00010002
 8001c14:	00010008 	.word	0x00010008
 8001c18:	00010004 	.word	0x00010004

08001c1c <HAL_I2C_Mem_Write>:
{
 8001c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001c20:	4604      	mov	r4, r0
 8001c22:	4699      	mov	r9, r3
 8001c24:	460f      	mov	r7, r1
 8001c26:	4690      	mov	r8, r2
 8001c28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001c2a:	f003 fda5 	bl	8005778 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001c32:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001c34:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c36:	d003      	beq.n	8001c40 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001c38:	2002      	movs	r0, #2
}
 8001c3a:	b003      	add	sp, #12
 8001c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c40:	9000      	str	r0, [sp, #0]
 8001c42:	2319      	movs	r3, #25
 8001c44:	2201      	movs	r2, #1
 8001c46:	493b      	ldr	r1, [pc, #236]	; (8001d34 <HAL_I2C_Mem_Write+0x118>)
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff fbeb 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d1f2      	bne.n	8001c38 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001c52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d0ee      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x1c>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c66:	bf5e      	ittt	pl
 8001c68:	681a      	ldrpl	r2, [r3, #0]
 8001c6a:	f042 0201 	orrpl.w	r2, r2, #1
 8001c6e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c76:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c78:	2321      	movs	r3, #33	; 0x21
 8001c7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c8a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c8c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001c90:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c94:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_I2C_Mem_Write+0x11c>)
 8001c98:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c9a:	9501      	str	r5, [sp, #4]
 8001c9c:	9600      	str	r6, [sp, #0]
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	4639      	mov	r1, r7
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7ff fc15 	bl	80014d4 <I2C_RequestMemoryWrite>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d02a      	beq.n	8001d04 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8001cae:	2001      	movs	r0, #1
 8001cb0:	e7c3      	b.n	8001c3a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb2:	f7ff fbe9 	bl	8001488 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb6:	b140      	cbz	r0, 8001cca <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cba:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbc:	bf01      	itttt	eq
 8001cbe:	6822      	ldreq	r2, [r4, #0]
 8001cc0:	6813      	ldreq	r3, [r2, #0]
 8001cc2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	streq	r3, [r2, #0]
 8001cc8:	e7f1      	b.n	8001cae <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ccc:	6827      	ldr	r7, [r4, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001cd4:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001cd6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001cd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001cda:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ce2:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001ce4:	1e48      	subs	r0, r1, #1
 8001ce6:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ce8:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001cea:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cec:	d50a      	bpl.n	8001d04 <HAL_I2C_Mem_Write+0xe8>
 8001cee:	b148      	cbz	r0, 8001d04 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf0:	785a      	ldrb	r2, [r3, #1]
 8001cf2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001cf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cfa:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001cfc:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001cfe:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001d00:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d02:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d06:	462a      	mov	r2, r5
 8001d08:	4631      	mov	r1, r6
 8001d0a:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1d0      	bne.n	8001cb2 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d10:	f7ff fb33 	bl	800137a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d1cf      	bne.n	8001cb8 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d18:	6822      	ldr	r2, [r4, #0]
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d20:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d22:	2320      	movs	r3, #32
 8001d24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001d28:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d30:	e783      	b.n	8001c3a <HAL_I2C_Mem_Write+0x1e>
 8001d32:	bf00      	nop
 8001d34:	00100002 	.word	0x00100002
 8001d38:	ffff0000 	.word	0xffff0000

08001d3c <HAL_I2C_Mem_Read>:
{
 8001d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d40:	4604      	mov	r4, r0
 8001d42:	b087      	sub	sp, #28
 8001d44:	4699      	mov	r9, r3
 8001d46:	460d      	mov	r5, r1
 8001d48:	4690      	mov	r8, r2
 8001d4a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f003 fd14 	bl	8005778 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d50:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d54:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001d56:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d58:	d004      	beq.n	8001d64 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001d5a:	2502      	movs	r5, #2
}
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	b007      	add	sp, #28
 8001d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d64:	9000      	str	r0, [sp, #0]
 8001d66:	2319      	movs	r3, #25
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4977      	ldr	r1, [pc, #476]	; (8001f48 <HAL_I2C_Mem_Read+0x20c>)
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff fb59 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d1f1      	bne.n	8001d5a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001d76:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d0ed      	beq.n	8001d5a <HAL_I2C_Mem_Read+0x1e>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d8a:	bf5e      	ittt	pl
 8001d8c:	681a      	ldrpl	r2, [r3, #0]
 8001d8e:	f042 0201 	orrpl.w	r2, r2, #1
 8001d92:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d9c:	2322      	movs	r3, #34	; 0x22
 8001d9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001da2:	2340      	movs	r3, #64	; 0x40
 8001da4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001dae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001db4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001db8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dba:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <HAL_I2C_Mem_Read+0x210>)
 8001dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	9601      	str	r6, [sp, #4]
 8001dc2:	9700      	str	r7, [sp, #0]
 8001dc4:	464b      	mov	r3, r9
 8001dc6:	4642      	mov	r2, r8
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff fbd1 	bl	8001570 <I2C_RequestMemoryRead>
 8001dce:	4605      	mov	r5, r0
 8001dd0:	b108      	cbz	r0, 8001dd6 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8001dd2:	2501      	movs	r5, #1
 8001dd4:	e7c2      	b.n	8001d5c <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8001dd6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	b992      	cbnz	r2, 8001e02 <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ddc:	9002      	str	r0, [sp, #8]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	9202      	str	r2, [sp, #8]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	9202      	str	r2, [sp, #8]
 8001de6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	2320      	movs	r3, #32
 8001df2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001dfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001e00:	e7ac      	b.n	8001d5c <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8001e02:	2a01      	cmp	r2, #1
 8001e04:	d12c      	bne.n	8001e60 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0e:	9003      	str	r0, [sp, #12]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	9203      	str	r2, [sp, #12]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	9203      	str	r2, [sp, #12]
 8001e18:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e20:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e22:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001f50 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 8001e26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0e1      	beq.n	8001df0 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d86e      	bhi.n	8001f0e <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d12d      	bne.n	8001e90 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e34:	4632      	mov	r2, r6
 8001e36:	4639      	mov	r1, r7
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f7ff fac4 	bl	80013c6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d1c7      	bne.n	8001dd2 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e46:	6912      	ldr	r2, [r2, #16]
 8001e48:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001e50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001e56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001e5e:	e7e2      	b.n	8001e26 <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 8001e60:	2a02      	cmp	r2, #2
 8001e62:	d10e      	bne.n	8001e82 <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e72:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e74:	9004      	str	r0, [sp, #16]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	9204      	str	r2, [sp, #16]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	9304      	str	r3, [sp, #16]
 8001e7e:	9b04      	ldr	r3, [sp, #16]
 8001e80:	e7cf      	b.n	8001e22 <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e82:	9005      	str	r0, [sp, #20]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	9205      	str	r2, [sp, #20]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	9305      	str	r3, [sp, #20]
 8001e8c:	9b05      	ldr	r3, [sp, #20]
 8001e8e:	e7c8      	b.n	8001e22 <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 8001e90:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e92:	9600      	str	r6, [sp, #0]
 8001e94:	463b      	mov	r3, r7
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4641      	mov	r1, r8
 8001e9c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001e9e:	d119      	bne.n	8001ed4 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ea0:	f7ff fac0 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d194      	bne.n	8001dd2 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001eb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001eba:	1c53      	adds	r3, r2, #1
 8001ebc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ebe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ec4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ecc:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	7053      	strb	r3, [r2, #1]
 8001ed2:	e7ba      	b.n	8001e4a <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ed4:	f7ff faa6 	bl	8001424 <I2C_WaitOnFlagUntilTimeout>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	2800      	cmp	r0, #0
 8001edc:	f47f af79 	bne.w	8001dd2 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001ee8:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ef2:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ef8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001efe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f06:	4641      	mov	r1, r8
 8001f08:	463b      	mov	r3, r7
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	e7c8      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0e:	4632      	mov	r2, r6
 8001f10:	4639      	mov	r1, r7
 8001f12:	4620      	mov	r0, r4
 8001f14:	f7ff fa57 	bl	80013c6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	f47f af5a 	bne.w	8001dd2 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f22:	6912      	ldr	r2, [r2, #16]
 8001f24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f28:	1c53      	adds	r3, r2, #1
 8001f2a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001f2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001f32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	6959      	ldr	r1, [r3, #20]
 8001f3e:	0749      	lsls	r1, r1, #29
 8001f40:	f57f af71 	bpl.w	8001e26 <HAL_I2C_Mem_Read+0xea>
 8001f44:	e7c3      	b.n	8001ece <HAL_I2C_Mem_Read+0x192>
 8001f46:	bf00      	nop
 8001f48:	00100002 	.word	0x00100002
 8001f4c:	ffff0000 	.word	0xffff0000
 8001f50:	00010004 	.word	0x00010004

08001f54 <HAL_I2C_MasterTxCpltCallback>:
 8001f54:	4770      	bx	lr

08001f56 <HAL_I2C_MasterRxCpltCallback>:
 8001f56:	4770      	bx	lr

08001f58 <HAL_I2C_SlaveTxCpltCallback>:
 8001f58:	4770      	bx	lr

08001f5a <HAL_I2C_SlaveRxCpltCallback>:
 8001f5a:	4770      	bx	lr

08001f5c <HAL_I2C_AddrCallback>:
{
 8001f5c:	4770      	bx	lr

08001f5e <HAL_I2C_ListenCpltCallback>:
 8001f5e:	4770      	bx	lr

08001f60 <HAL_I2C_MemTxCpltCallback>:
 8001f60:	4770      	bx	lr

08001f62 <HAL_I2C_MemRxCpltCallback>:
 8001f62:	4770      	bx	lr

08001f64 <HAL_I2C_ErrorCallback>:
 8001f64:	4770      	bx	lr

08001f66 <HAL_I2C_AbortCpltCallback>:
{
 8001f66:	4770      	bx	lr

08001f68 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001f68:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6a:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f6c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 8001f70:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f72:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001f74:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001f76:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001f78:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001f7e:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001f80:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f82:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001f84:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8001f86:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001f88:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001f8a:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001f8e:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001f90:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001f92:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001f96:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f98:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001f9a:	d108      	bne.n	8001fae <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001fa2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001fa6:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001fa8:	f7ff ffdd 	bl	8001f66 <HAL_I2C_AbortCpltCallback>
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001fae:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8001fb2:	2928      	cmp	r1, #40	; 0x28
 8001fb4:	d10d      	bne.n	8001fd2 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8001fb6:	6814      	ldr	r4, [r2, #0]
 8001fb8:	f044 0401 	orr.w	r4, r4, #1
 8001fbc:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fbe:	6814      	ldr	r4, [r2, #0]
 8001fc0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001fc4:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001fc8:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8001fcc:	f7ff ffca 	bl	8001f64 <HAL_I2C_ErrorCallback>
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001fdc:	e7f6      	b.n	8001fcc <I2C_DMAAbort+0x64>
	...

08001fe0 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fe0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001fe4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001fe8:	2b10      	cmp	r3, #16
{
 8001fea:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fec:	b2d2      	uxtb	r2, r2
{
 8001fee:	4604      	mov	r4, r0
 8001ff0:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001ff2:	d105      	bne.n	8002000 <I2C_ITError+0x20>
 8001ff4:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ff6:	bf02      	ittt	eq
 8001ff8:	6819      	ldreq	r1, [r3, #0]
 8001ffa:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 8001ffe:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002000:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002004:	2928      	cmp	r1, #40	; 0x28
 8002006:	d13a      	bne.n	800207e <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002008:	2200      	movs	r2, #0
 800200a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800200c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002016:	d059      	beq.n	80020cc <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002018:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800201a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800201c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002020:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002022:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002026:	2b01      	cmp	r3, #1
 8002028:	4b3c      	ldr	r3, [pc, #240]	; (800211c <I2C_ITError+0x13c>)
 800202a:	d035      	beq.n	8002098 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800202c:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800202e:	f7ff f837 	bl	80010a0 <HAL_DMA_Abort_IT>
 8002032:	b150      	cbz	r0, 800204a <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8002034:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002036:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002040:	2320      	movs	r3, #32
 8002042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002046:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002048:	4798      	blx	r3
  CurrentState = hi2c->State;
 800204a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800204e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002050:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8002052:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002054:	d512      	bpl.n	800207c <I2C_ITError+0x9c>
 8002056:	2b28      	cmp	r3, #40	; 0x28
 8002058:	d110      	bne.n	800207c <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	6853      	ldr	r3, [r2, #4]
 800205e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002062:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002064:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <I2C_ITError+0x140>)
 8002066:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8002068:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800206a:	2300      	movs	r3, #0
 800206c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800206e:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002070:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002074:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002078:	f7ff ff71 	bl	8001f5e <HAL_I2C_ListenCpltCallback>
 800207c:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	0509      	lsls	r1, r1, #20
 8002082:	d404      	bmi.n	800208e <I2C_ITError+0xae>
 8002084:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8002086:	bf1c      	itt	ne
 8002088:	2220      	movne	r2, #32
 800208a:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800208e:	2200      	movs	r2, #0
 8002090:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002096:	e7bb      	b.n	8002010 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002098:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800209a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800209c:	f7ff f800 	bl	80010a0 <HAL_DMA_Abort_IT>
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d0d2      	beq.n	800204a <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	0652      	lsls	r2, r2, #25
 80020aa:	d505      	bpl.n	80020b8 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80020b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020b4:	3301      	adds	r3, #1
 80020b6:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80020b8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80020bc:	6813      	ldr	r3, [r2, #0]
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	2320      	movs	r3, #32
 80020c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80020ca:	e7bc      	b.n	8002046 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020cc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80020d0:	2960      	cmp	r1, #96	; 0x60
 80020d2:	d115      	bne.n	8002100 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	2120      	movs	r1, #32
 80020d6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020da:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	0650      	lsls	r0, r2, #25
 80020e0:	d505      	bpl.n	80020ee <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80020e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020ea:	3301      	adds	r3, #1
 80020ec:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff ff34 	bl	8001f66 <HAL_I2C_AbortCpltCallback>
 80020fe:	e7a4      	b.n	800204a <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	0651      	lsls	r1, r2, #25
 8002104:	d505      	bpl.n	8002112 <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002106:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800210c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800210e:	3301      	adds	r3, #1
 8002110:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002112:	4620      	mov	r0, r4
 8002114:	f7ff ff26 	bl	8001f64 <HAL_I2C_ErrorCallback>
 8002118:	e797      	b.n	800204a <I2C_ITError+0x6a>
 800211a:	bf00      	nop
 800211c:	08001f69 	.word	0x08001f69
 8002120:	ffff0000 	.word	0xffff0000

08002124 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002124:	6803      	ldr	r3, [r0, #0]
{
 8002126:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002128:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800212a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800212c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8002130:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002132:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002134:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002138:	2910      	cmp	r1, #16
{
 800213a:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800213c:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800213e:	d002      	beq.n	8002146 <HAL_I2C_EV_IRQHandler+0x22>
 8002140:	2940      	cmp	r1, #64	; 0x40
 8002142:	f040 82b6 	bne.w	80026b2 <HAL_I2C_EV_IRQHandler+0x58e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002146:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002148:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800214a:	f011 0f01 	tst.w	r1, #1
 800214e:	d107      	bne.n	8002160 <HAL_I2C_EV_IRQHandler+0x3c>
 8002150:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8002154:	d002      	beq.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
 8002156:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 800215a:	d152      	bne.n	8002202 <HAL_I2C_EV_IRQHandler+0xde>
}
 800215c:	b00d      	add	sp, #52	; 0x34
 800215e:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002160:	0595      	lsls	r5, r2, #22
 8002162:	d54e      	bpl.n	8002202 <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002164:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002166:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 800216a:	d10c      	bne.n	8002186 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800216c:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800216e:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002170:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002174:	2a40      	cmp	r2, #64	; 0x40
 8002176:	d111      	bne.n	800219c <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8002178:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800217a:	b952      	cbnz	r2, 8002192 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800217c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800217e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	e7ea      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002186:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002188:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 800218c:	d1f0      	bne.n	8002170 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800218e:	2208      	movs	r2, #8
 8002190:	e7ed      	b.n	800216e <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002192:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	e7f2      	b.n	8002182 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800219c:	6922      	ldr	r2, [r4, #16]
 800219e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80021a2:	d11b      	bne.n	80021dc <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021a4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80021a8:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021ac:	d112      	bne.n	80021d4 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021b2:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80021b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80021b6:	b912      	cbnz	r2, 80021be <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80021b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80021ba:	2900      	cmp	r1, #0
 80021bc:	d0ce      	beq.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80021be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021c0:	b91a      	cbnz	r2, 80021ca <HAL_I2C_EV_IRQHandler+0xa6>
 80021c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80021c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d0c8      	beq.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	e7c3      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	e7ea      	b.n	80021b2 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 80021dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80021de:	b932      	cbnz	r2, 80021ee <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80021e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80021e2:	11d2      	asrs	r2, r2, #7
 80021e4:	f002 0206 	and.w	r2, r2, #6
 80021e8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80021ec:	e7c9      	b.n	8002182 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 80021ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80021f0:	2a01      	cmp	r2, #1
 80021f2:	d1b3      	bne.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80021f6:	11d2      	asrs	r2, r2, #7
 80021f8:	f002 0206 	and.w	r2, r2, #6
 80021fc:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8002200:	e7bf      	b.n	8002182 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002202:	070d      	lsls	r5, r1, #28
 8002204:	d503      	bpl.n	800220e <HAL_I2C_EV_IRQHandler+0xea>
 8002206:	0595      	lsls	r5, r2, #22
 8002208:	d501      	bpl.n	800220e <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800220a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800220c:	e7e4      	b.n	80021d8 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800220e:	078d      	lsls	r5, r1, #30
 8002210:	f140 80e1 	bpl.w	80023d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002214:	0595      	lsls	r5, r2, #22
 8002216:	f140 80de 	bpl.w	80023d6 <HAL_I2C_EV_IRQHandler+0x2b2>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800221a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800221e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002220:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002222:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8002226:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002228:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800222a:	f040 80cc 	bne.w	80023c6 <HAL_I2C_EV_IRQHandler+0x2a2>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800222e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002230:	b940      	cbnz	r0, 8002244 <HAL_I2C_EV_IRQHandler+0x120>
 8002232:	2940      	cmp	r1, #64	; 0x40
 8002234:	d106      	bne.n	8002244 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	9001      	str	r0, [sp, #4]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	9201      	str	r2, [sp, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	9b01      	ldr	r3, [sp, #4]
 8002242:	e78b      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002244:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002246:	b981      	cbnz	r1, 800226a <HAL_I2C_EV_IRQHandler+0x146>
 8002248:	6920      	ldr	r0, [r4, #16]
 800224a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800224e:	d10c      	bne.n	800226a <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002250:	9102      	str	r1, [sp, #8]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	9202      	str	r2, [sp, #8]
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	9202      	str	r2, [sp, #8]
 800225a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002262:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8002264:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002266:	3301      	adds	r3, #1
 8002268:	e028      	b.n	80022bc <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 800226a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800226c:	b289      	uxth	r1, r1
 800226e:	b951      	cbnz	r1, 8002286 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002270:	9103      	str	r1, [sp, #12]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	9203      	str	r2, [sp, #12]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	9203      	str	r2, [sp, #12]
 800227a:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e019      	b.n	80022ba <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8002286:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002288:	b289      	uxth	r1, r1
 800228a:	2901      	cmp	r1, #1
 800228c:	d14a      	bne.n	8002324 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800228e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002292:	d11c      	bne.n	80022ce <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229a:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80022a2:	d00d      	beq.n	80022c0 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ac:	2200      	movs	r2, #0
 80022ae:	9204      	str	r2, [sp, #16]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	9204      	str	r2, [sp, #16]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	9304      	str	r3, [sp, #16]
 80022b8:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	6523      	str	r3, [r4, #80]	; 0x50
 80022be:	e74d      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c0:	9205      	str	r2, [sp, #20]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	9205      	str	r2, [sp, #20]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	9205      	str	r2, [sp, #20]
 80022ca:	9a05      	ldr	r2, [sp, #20]
 80022cc:	e7d6      	b.n	800227c <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80022ce:	2a08      	cmp	r2, #8
 80022d0:	d01c      	beq.n	800230c <HAL_I2C_EV_IRQHandler+0x1e8>
 80022d2:	2a20      	cmp	r2, #32
 80022d4:	d01a      	beq.n	800230c <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80022d6:	2d12      	cmp	r5, #18
 80022d8:	d10d      	bne.n	80022f6 <HAL_I2C_EV_IRQHandler+0x1d2>
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d116      	bne.n	800230c <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e4:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2200      	movs	r2, #0
 80022e8:	9206      	str	r2, [sp, #24]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	9206      	str	r2, [sp, #24]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	9306      	str	r3, [sp, #24]
 80022f2:	9b06      	ldr	r3, [sp, #24]
 80022f4:	e7e1      	b.n	80022ba <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022f6:	2a10      	cmp	r2, #16
 80022f8:	d8f1      	bhi.n	80022de <HAL_I2C_EV_IRQHandler+0x1ba>
 80022fa:	498e      	ldr	r1, [pc, #568]	; (8002534 <HAL_I2C_EV_IRQHandler+0x410>)
 80022fc:	fa21 f202 	lsr.w	r2, r1, r2
 8002300:	07d0      	lsls	r0, r2, #31
 8002302:	d5ec      	bpl.n	80022de <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800230a:	e7eb      	b.n	80022e4 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002314:	2200      	movs	r2, #0
 8002316:	9207      	str	r2, [sp, #28]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	9207      	str	r2, [sp, #28]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	9207      	str	r2, [sp, #28]
 8002320:	9a07      	ldr	r2, [sp, #28]
 8002322:	e7ab      	b.n	800227c <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8002324:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002326:	b289      	uxth	r1, r1
 8002328:	2902      	cmp	r1, #2
 800232a:	d12c      	bne.n	8002386 <HAL_I2C_EV_IRQHandler+0x262>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800232c:	2a10      	cmp	r2, #16
 800232e:	d803      	bhi.n	8002338 <HAL_I2C_EV_IRQHandler+0x214>
 8002330:	4980      	ldr	r1, [pc, #512]	; (8002534 <HAL_I2C_EV_IRQHandler+0x410>)
 8002332:	40d1      	lsrs	r1, r2
 8002334:	07c9      	lsls	r1, r1, #31
 8002336:	d422      	bmi.n	800237e <HAL_I2C_EV_IRQHandler+0x25a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800233e:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002346:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	050d      	lsls	r5, r1, #20
 800234c:	d50f      	bpl.n	800236e <HAL_I2C_EV_IRQHandler+0x24a>
 800234e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002352:	d008      	beq.n	8002366 <HAL_I2C_EV_IRQHandler+0x242>
 8002354:	1e51      	subs	r1, r2, #1
 8002356:	291f      	cmp	r1, #31
 8002358:	bf9d      	ittte	ls
 800235a:	4a77      	ldrls	r2, [pc, #476]	; (8002538 <HAL_I2C_EV_IRQHandler+0x414>)
 800235c:	40ca      	lsrls	r2, r1
 800235e:	43d2      	mvnls	r2, r2
 8002360:	2201      	movhi	r2, #1
 8002362:	07d0      	lsls	r0, r2, #31
 8002364:	d403      	bmi.n	800236e <HAL_I2C_EV_IRQHandler+0x24a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800236c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236e:	2200      	movs	r2, #0
 8002370:	9208      	str	r2, [sp, #32]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	9208      	str	r2, [sp, #32]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	9308      	str	r3, [sp, #32]
 800237a:	9b08      	ldr	r3, [sp, #32]
 800237c:	e79d      	b.n	80022ba <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002384:	e7df      	b.n	8002346 <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800238c:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	0509      	lsls	r1, r1, #20
 8002392:	d510      	bpl.n	80023b6 <HAL_I2C_EV_IRQHandler+0x292>
 8002394:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002398:	d009      	beq.n	80023ae <HAL_I2C_EV_IRQHandler+0x28a>
 800239a:	3a01      	subs	r2, #1
 800239c:	2a1f      	cmp	r2, #31
 800239e:	bf9d      	ittte	ls
 80023a0:	4965      	ldrls	r1, [pc, #404]	; (8002538 <HAL_I2C_EV_IRQHandler+0x414>)
 80023a2:	fa21 f202 	lsrls.w	r2, r1, r2
 80023a6:	43d2      	mvnls	r2, r2
 80023a8:	2201      	movhi	r2, #1
 80023aa:	07d2      	lsls	r2, r2, #31
 80023ac:	d403      	bmi.n	80023b6 <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023b4:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2200      	movs	r2, #0
 80023b8:	9209      	str	r2, [sp, #36]	; 0x24
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	9209      	str	r2, [sp, #36]	; 0x24
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	9309      	str	r3, [sp, #36]	; 0x24
 80023c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023c4:	e779      	b.n	80022ba <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2200      	movs	r2, #0
 80023c8:	920a      	str	r2, [sp, #40]	; 0x28
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	920a      	str	r2, [sp, #40]	; 0x28
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	930a      	str	r3, [sp, #40]	; 0x28
 80023d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023d4:	e6c2      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023d6:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023da:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023dc:	f000 80ae 	beq.w	800253c <HAL_I2C_EV_IRQHandler+0x418>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023e0:	0505      	lsls	r5, r0, #20
 80023e2:	f53f aebb 	bmi.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80023ea:	f001 0104 	and.w	r1, r1, #4
 80023ee:	d069      	beq.n	80024c4 <HAL_I2C_EV_IRQHandler+0x3a0>
 80023f0:	0550      	lsls	r0, r2, #21
 80023f2:	d567      	bpl.n	80024c4 <HAL_I2C_EV_IRQHandler+0x3a0>
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d165      	bne.n	80024c4 <HAL_I2C_EV_IRQHandler+0x3a0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023f8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023fc:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023fe:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002402:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002404:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002406:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002408:	b9c5      	cbnz	r5, 800243c <HAL_I2C_EV_IRQHandler+0x318>
 800240a:	2a21      	cmp	r2, #33	; 0x21
 800240c:	d118      	bne.n	8002440 <HAL_I2C_EV_IRQHandler+0x31c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800240e:	2808      	cmp	r0, #8
 8002410:	d078      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x3e0>
 8002412:	2820      	cmp	r0, #32
 8002414:	d076      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x3e0>
 8002416:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800241a:	d073      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x3e0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002422:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002424:	2311      	movs	r3, #17
 8002426:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002428:	2300      	movs	r3, #0
 800242a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800242e:	2320      	movs	r3, #32
 8002430:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff fd8d 	bl	8001f54 <HAL_I2C_MasterTxCpltCallback>
 800243a:	e68f      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800243c:	2a21      	cmp	r2, #33	; 0x21
 800243e:	d005      	beq.n	800244c <HAL_I2C_EV_IRQHandler+0x328>
 8002440:	2940      	cmp	r1, #64	; 0x40
 8002442:	f47f ae8b 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002446:	2a22      	cmp	r2, #34	; 0x22
 8002448:	f47f ae88 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 800244c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800244e:	b292      	uxth	r2, r2
 8002450:	b91a      	cbnz	r2, 800245a <HAL_I2C_EV_IRQHandler+0x336>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002458:	e6ba      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800245a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800245e:	2a40      	cmp	r2, #64	; 0x40
 8002460:	d126      	bne.n	80024b0 <HAL_I2C_EV_IRQHandler+0x38c>
        if (hi2c->EventCount == 0U)
 8002462:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002464:	b962      	cbnz	r2, 8002480 <HAL_I2C_EV_IRQHandler+0x35c>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002466:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002468:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800246a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800246c:	d104      	bne.n	8002478 <HAL_I2C_EV_IRQHandler+0x354>
 800246e:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002470:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002472:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002474:	3302      	adds	r3, #2
 8002476:	e721      	b.n	80022bc <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002478:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	e6f1      	b.n	8002264 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8002480:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002482:	2a01      	cmp	r2, #1
 8002484:	d102      	bne.n	800248c <HAL_I2C_EV_IRQHandler+0x368>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002486:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	e7f7      	b.n	800247c <HAL_I2C_EV_IRQHandler+0x358>
        else if (hi2c->EventCount == 2U)
 800248c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800248e:	2a02      	cmp	r2, #2
 8002490:	f47f ae64 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002494:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002498:	2a22      	cmp	r2, #34	; 0x22
 800249a:	d104      	bne.n	80024a6 <HAL_I2C_EV_IRQHandler+0x382>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e65a      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024a6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80024aa:	2a21      	cmp	r2, #33	; 0x21
 80024ac:	f47f ae56 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024b2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80024b6:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80024b8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80024ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29b      	uxth	r3, r3
 80024c0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80024c2:	e64b      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024c4:	2900      	cmp	r1, #0
 80024c6:	f43f ae49 	beq.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
 80024ca:	0592      	lsls	r2, r2, #22
 80024cc:	f57f ae46 	bpl.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024d2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80024d6:	2a21      	cmp	r2, #33	; 0x21
 80024d8:	f47f ae40 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80024dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024de:	b292      	uxth	r2, r2
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d1e5      	bne.n	80024b0 <HAL_I2C_EV_IRQHandler+0x38c>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024e4:	2908      	cmp	r1, #8
 80024e6:	d00d      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x3e0>
 80024e8:	2920      	cmp	r1, #32
 80024ea:	d00b      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x3e0>
 80024ec:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80024f0:	d008      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x3e0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80024f8:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024fa:	2311      	movs	r3, #17
 80024fc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002502:	e794      	b.n	800242e <HAL_I2C_EV_IRQHandler+0x30a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800250a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002514:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002516:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002518:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800251a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800251e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002522:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002526:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002528:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800252a:	d184      	bne.n	8002436 <HAL_I2C_EV_IRQHandler+0x312>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800252c:	f7ff fd18 	bl	8001f60 <HAL_I2C_MemTxCpltCallback>
 8002530:	e614      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
 8002532:	bf00      	nop
 8002534:	00010014 	.word	0x00010014
 8002538:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800253c:	0505      	lsls	r5, r0, #20
 800253e:	f53f ae0d 	bmi.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002542:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002546:	f001 0104 	and.w	r1, r1, #4
 800254a:	d048      	beq.n	80025de <HAL_I2C_EV_IRQHandler+0x4ba>
 800254c:	0550      	lsls	r0, r2, #21
 800254e:	d546      	bpl.n	80025de <HAL_I2C_EV_IRQHandler+0x4ba>
 8002550:	2900      	cmp	r1, #0
 8002552:	d144      	bne.n	80025de <HAL_I2C_EV_IRQHandler+0x4ba>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002554:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002558:	2a22      	cmp	r2, #34	; 0x22
 800255a:	f47f adff 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 800255e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002560:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002562:	2a03      	cmp	r2, #3
 8002564:	d914      	bls.n	8002590 <HAL_I2C_EV_IRQHandler+0x46c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800256c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800256e:	3301      	adds	r3, #1
 8002570:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002572:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002574:	3b01      	subs	r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800257a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b03      	cmp	r3, #3
 8002580:	f47f adec 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002584:	6822      	ldr	r2, [r4, #0]
 8002586:	6853      	ldr	r3, [r2, #4]
 8002588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800258c:	6053      	str	r3, [r2, #4]
 800258e:	e5e5      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002590:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002592:	2802      	cmp	r0, #2
 8002594:	f43f ade2 	beq.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
 8002598:	2a01      	cmp	r2, #1
 800259a:	f63f addf 	bhi.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ac:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80025b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025b6:	3301      	adds	r3, #1
 80025b8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29b      	uxth	r3, r3
 80025c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	2320      	movs	r3, #32
 80025c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025c8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025cc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d168      	bne.n	80026a6 <HAL_I2C_EV_IRQHandler+0x582>
        hi2c->PreviousState = I2C_STATE_NONE;
 80025d4:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7ff fcc3 	bl	8001f62 <HAL_I2C_MemRxCpltCallback>
 80025dc:	e5be      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025de:	2900      	cmp	r1, #0
 80025e0:	f43f adbc 	beq.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
 80025e4:	0592      	lsls	r2, r2, #22
 80025e6:	f57f adb9 	bpl.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80025ec:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80025ee:	b289      	uxth	r1, r1
 80025f0:	2904      	cmp	r1, #4
 80025f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025f4:	d109      	bne.n	800260a <HAL_I2C_EV_IRQHandler+0x4e6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002604:	3301      	adds	r3, #1
 8002606:	6263      	str	r3, [r4, #36]	; 0x24
 8002608:	e757      	b.n	80024ba <HAL_I2C_EV_IRQHandler+0x396>
  else if (hi2c->XferCount == 3U)
 800260a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800260c:	b280      	uxth	r0, r0
 800260e:	2803      	cmp	r0, #3
 8002610:	d10c      	bne.n	800262c <HAL_I2C_EV_IRQHandler+0x508>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002612:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002614:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002616:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800261a:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800261c:	d0ef      	beq.n	80025fe <HAL_I2C_EV_IRQHandler+0x4da>
 800261e:	2a02      	cmp	r2, #2
 8002620:	d0ed      	beq.n	80025fe <HAL_I2C_EV_IRQHandler+0x4da>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e7e8      	b.n	80025fe <HAL_I2C_EV_IRQHandler+0x4da>
  else if (hi2c->XferCount == 2U)
 800262c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800262e:	b280      	uxth	r0, r0
 8002630:	2802      	cmp	r0, #2
 8002632:	d1e4      	bne.n	80025fe <HAL_I2C_EV_IRQHandler+0x4da>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002634:	2a01      	cmp	r2, #1
 8002636:	d001      	beq.n	800263c <HAL_I2C_EV_IRQHandler+0x518>
 8002638:	2a10      	cmp	r2, #16
 800263a:	d128      	bne.n	800268e <HAL_I2C_EV_IRQHandler+0x56a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002642:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002648:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800264a:	1c53      	adds	r3, r2, #1
 800264c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800264e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002650:	3b01      	subs	r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800265c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800265e:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8002660:	3301      	adds	r3, #1
 8002662:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002664:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002666:	3b01      	subs	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800266c:	6853      	ldr	r3, [r2, #4]
 800266e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002672:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002674:	2320      	movs	r3, #32
 8002676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800267a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002688:	d10d      	bne.n	80026a6 <HAL_I2C_EV_IRQHandler+0x582>
      hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	6323      	str	r3, [r4, #48]	; 0x30
 800268c:	e7a3      	b.n	80025d6 <HAL_I2C_EV_IRQHandler+0x4b2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800268e:	2a04      	cmp	r2, #4
 8002690:	d001      	beq.n	8002696 <HAL_I2C_EV_IRQHandler+0x572>
 8002692:	2a02      	cmp	r2, #2
 8002694:	d103      	bne.n	800269e <HAL_I2C_EV_IRQHandler+0x57a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800269c:	e7d1      	b.n	8002642 <HAL_I2C_EV_IRQHandler+0x51e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a4:	e7cd      	b.n	8002642 <HAL_I2C_EV_IRQHandler+0x51e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026a6:	2312      	movs	r3, #18
 80026a8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026aa:	4620      	mov	r0, r4
 80026ac:	f7ff fc53 	bl	8001f56 <HAL_I2C_MasterRxCpltCallback>
 80026b0:	e554      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026b4:	b321      	cbz	r1, 8002700 <HAL_I2C_EV_IRQHandler+0x5dc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026b6:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80026b8:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ba:	f011 0f02 	tst.w	r1, #2
 80026be:	d029      	beq.n	8002714 <HAL_I2C_EV_IRQHandler+0x5f0>
 80026c0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80026c4:	d026      	beq.n	8002714 <HAL_I2C_EV_IRQHandler+0x5f0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80026c8:	b102      	cbz	r2, 80026cc <HAL_I2C_EV_IRQHandler+0x5a8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026ca:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026cc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80026d0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80026d4:	2a28      	cmp	r2, #40	; 0x28
 80026d6:	d116      	bne.n	8002706 <HAL_I2C_EV_IRQHandler+0x5e2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026de:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80026e0:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80026e4:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80026e6:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80026ea:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80026ee:	bf54      	ite	pl
 80026f0:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80026f2:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80026f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff fc2f 	bl	8001f5c <HAL_I2C_AddrCallback>
 80026fe:	e52d      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002700:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002702:	6959      	ldr	r1, [r3, #20]
 8002704:	e7d9      	b.n	80026ba <HAL_I2C_EV_IRQHandler+0x596>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002706:	f06f 0202 	mvn.w	r2, #2
 800270a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800270c:	2300      	movs	r3, #0
 800270e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002712:	e523      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002714:	06cd      	lsls	r5, r1, #27
 8002716:	f140 80af 	bpl.w	8002878 <HAL_I2C_EV_IRQHandler+0x754>
 800271a:	0595      	lsls	r5, r2, #22
 800271c:	f140 80ac 	bpl.w	8002878 <HAL_I2C_EV_IRQHandler+0x754>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002720:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800272a:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800272c:	2200      	movs	r2, #0
 800272e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	920b      	str	r2, [sp, #44]	; 0x2c
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002744:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800274a:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800274c:	d520      	bpl.n	8002790 <HAL_I2C_EV_IRQHandler+0x66c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800274e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002752:	2a22      	cmp	r2, #34	; 0x22
 8002754:	d148      	bne.n	80027e8 <HAL_I2C_EV_IRQHandler+0x6c4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002756:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002758:	6802      	ldr	r2, [r0, #0]
 800275a:	6852      	ldr	r2, [r2, #4]
 800275c:	b292      	uxth	r2, r2
 800275e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002760:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002762:	b292      	uxth	r2, r2
 8002764:	b11a      	cbz	r2, 800276e <HAL_I2C_EV_IRQHandler+0x64a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002766:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002768:	f042 0204 	orr.w	r2, r2, #4
 800276c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002774:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002776:	f7fe fca5 	bl	80010c4 <HAL_DMA_GetState>
 800277a:	2801      	cmp	r0, #1
 800277c:	d008      	beq.n	8002790 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800277e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002780:	4b78      	ldr	r3, [pc, #480]	; (8002964 <HAL_I2C_EV_IRQHandler+0x840>)
 8002782:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002784:	f7fe fc8c 	bl	80010a0 <HAL_DMA_Abort_IT>
 8002788:	b110      	cbz	r0, 8002790 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800278a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800278c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800278e:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002790:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	b313      	cbz	r3, 80027dc <HAL_I2C_EV_IRQHandler+0x6b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	0752      	lsls	r2, r2, #29
 800279c:	d509      	bpl.n	80027b2 <HAL_I2C_EV_IRQHandler+0x68e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80027a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027a6:	3301      	adds	r3, #1
 80027a8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	0650      	lsls	r0, r2, #25
 80027b8:	d509      	bpl.n	80027ce <HAL_I2C_EV_IRQHandler+0x6aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80027c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027c2:	3301      	adds	r3, #1
 80027c4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80027ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	b11b      	cbz	r3, 80027dc <HAL_I2C_EV_IRQHandler+0x6b8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027de:	b303      	cbz	r3, 8002822 <HAL_I2C_EV_IRQHandler+0x6fe>
    I2C_ITError(hi2c);
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff fbfd 	bl	8001fe0 <I2C_ITError>
 80027e6:	e4b9      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80027e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80027ea:	6802      	ldr	r2, [r0, #0]
 80027ec:	6852      	ldr	r2, [r2, #4]
 80027ee:	b292      	uxth	r2, r2
 80027f0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80027f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027f4:	b292      	uxth	r2, r2
 80027f6:	b11a      	cbz	r2, 8002800 <HAL_I2C_EV_IRQHandler+0x6dc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027fa:	f042 0204 	orr.w	r2, r2, #4
 80027fe:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002806:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002808:	f7fe fc5c 	bl	80010c4 <HAL_DMA_GetState>
 800280c:	2801      	cmp	r0, #1
 800280e:	d0bf      	beq.n	8002790 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002810:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002812:	4b54      	ldr	r3, [pc, #336]	; (8002964 <HAL_I2C_EV_IRQHandler+0x840>)
 8002814:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002816:	f7fe fc43 	bl	80010a0 <HAL_DMA_Abort_IT>
 800281a:	2800      	cmp	r0, #0
 800281c:	d0b8      	beq.n	8002790 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800281e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002820:	e7b4      	b.n	800278c <HAL_I2C_EV_IRQHandler+0x668>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002822:	2d2a      	cmp	r5, #42	; 0x2a
 8002824:	d106      	bne.n	8002834 <HAL_I2C_EV_IRQHandler+0x710>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002828:	2328      	movs	r3, #40	; 0x28
 800282a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff fb93 	bl	8001f5a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002834:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002838:	2b28      	cmp	r3, #40	; 0x28
 800283a:	d10c      	bne.n	8002856 <HAL_I2C_EV_IRQHandler+0x732>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283c:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <HAL_I2C_EV_IRQHandler+0x844>)
 800283e:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002840:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002842:	2300      	movs	r3, #0
 8002844:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8002846:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002848:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800284c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002850:	f7ff fb85 	bl	8001f5e <HAL_I2C_ListenCpltCallback>
 8002854:	e482      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002856:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002858:	2b22      	cmp	r3, #34	; 0x22
 800285a:	d002      	beq.n	8002862 <HAL_I2C_EV_IRQHandler+0x73e>
 800285c:	2d22      	cmp	r5, #34	; 0x22
 800285e:	f47f ac7d 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002862:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002864:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002866:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002868:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fb72 	bl	8001f5a <HAL_I2C_SlaveRxCpltCallback>
 8002876:	e471      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002878:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 800287c:	2821      	cmp	r0, #33	; 0x21
 800287e:	f001 0504 	and.w	r5, r1, #4
 8002882:	d135      	bne.n	80028f0 <HAL_I2C_EV_IRQHandler+0x7cc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002884:	0609      	lsls	r1, r1, #24
 8002886:	d527      	bpl.n	80028d8 <HAL_I2C_EV_IRQHandler+0x7b4>
 8002888:	0551      	lsls	r1, r2, #21
 800288a:	d525      	bpl.n	80028d8 <HAL_I2C_EV_IRQHandler+0x7b4>
 800288c:	bb25      	cbnz	r5, 80028d8 <HAL_I2C_EV_IRQHandler+0x7b4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800288e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002892:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002894:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002896:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002898:	2a00      	cmp	r2, #0
 800289a:	f43f ac5f 	beq.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80028a4:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80028a6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80028a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028aa:	3a01      	subs	r2, #1
 80028ac:	b292      	uxth	r2, r2
 80028ae:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028b2:	b292      	uxth	r2, r2
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	f47f ac51 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
 80028ba:	2929      	cmp	r1, #41	; 0x29
 80028bc:	f47f ac4e 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c6:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028c8:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028ca:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fb41 	bl	8001f58 <HAL_I2C_SlaveTxCpltCallback>
 80028d6:	e441      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028d8:	2d00      	cmp	r5, #0
 80028da:	f43f ac3f 	beq.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
 80028de:	0595      	lsls	r5, r2, #22
 80028e0:	f57f ac3c 	bpl.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80028e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028e6:	b292      	uxth	r2, r2
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	f47f ade1 	bne.w	80024b0 <HAL_I2C_EV_IRQHandler+0x38c>
 80028ee:	e435      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028f0:	0648      	lsls	r0, r1, #25
 80028f2:	d527      	bpl.n	8002944 <HAL_I2C_EV_IRQHandler+0x820>
 80028f4:	0551      	lsls	r1, r2, #21
 80028f6:	d525      	bpl.n	8002944 <HAL_I2C_EV_IRQHandler+0x820>
 80028f8:	bb25      	cbnz	r5, 8002944 <HAL_I2C_EV_IRQHandler+0x820>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028fa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80028fe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002900:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002902:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8002904:	2900      	cmp	r1, #0
 8002906:	f43f ac29 	beq.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002912:	3301      	adds	r3, #1
 8002914:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002916:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002918:	3b01      	subs	r3, #1
 800291a:	b29b      	uxth	r3, r3
 800291c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800291e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	f47f ac1a 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
 8002928:	2a2a      	cmp	r2, #42	; 0x2a
 800292a:	f47f ac17 	bne.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	6853      	ldr	r3, [r2, #4]
 8002932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002936:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002938:	2322      	movs	r3, #34	; 0x22
 800293a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800293c:	2328      	movs	r3, #40	; 0x28
 800293e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002942:	e795      	b.n	8002870 <HAL_I2C_EV_IRQHandler+0x74c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002944:	2d00      	cmp	r5, #0
 8002946:	f43f ac09 	beq.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
 800294a:	0592      	lsls	r2, r2, #22
 800294c:	f57f ac06 	bpl.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002950:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002952:	b292      	uxth	r2, r2
 8002954:	2a00      	cmp	r2, #0
 8002956:	f43f ac01 	beq.w	800215c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	7013      	strb	r3, [r2, #0]
 8002960:	e64f      	b.n	8002602 <HAL_I2C_EV_IRQHandler+0x4de>
 8002962:	bf00      	nop
 8002964:	08001f69 	.word	0x08001f69
 8002968:	ffff0000 	.word	0xffff0000

0800296c <HAL_I2C_ER_IRQHandler>:
{
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800296e:	6803      	ldr	r3, [r0, #0]
 8002970:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002972:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002974:	f417 7580 	ands.w	r5, r7, #256	; 0x100
{
 8002978:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800297a:	d006      	beq.n	800298a <HAL_I2C_ER_IRQHandler+0x1e>
 800297c:	f416 7580 	ands.w	r5, r6, #256	; 0x100
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002980:	bf1e      	ittt	ne
 8002982:	f46f 7280 	mvnne.w	r2, #256	; 0x100
 8002986:	615a      	strne	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8002988:	2501      	movne	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800298a:	05b9      	lsls	r1, r7, #22
 800298c:	d506      	bpl.n	800299c <HAL_I2C_ER_IRQHandler+0x30>
 800298e:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002990:	bf42      	ittt	mi
 8002992:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8002996:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800299a:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800299c:	0578      	lsls	r0, r7, #21
 800299e:	d537      	bpl.n	8002a10 <HAL_I2C_ER_IRQHandler+0xa4>
 80029a0:	05f1      	lsls	r1, r6, #23
 80029a2:	d535      	bpl.n	8002a10 <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 80029a4:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 80029a8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 80029aa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 80029ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80029b0:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 80029b4:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 80029b6:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80029b8:	d15a      	bne.n	8002a70 <HAL_I2C_ER_IRQHandler+0x104>
 80029ba:	2900      	cmp	r1, #0
 80029bc:	d158      	bne.n	8002a70 <HAL_I2C_ER_IRQHandler+0x104>
 80029be:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80029c2:	2921      	cmp	r1, #33	; 0x21
 80029c4:	d003      	beq.n	80029ce <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80029c6:	2a28      	cmp	r2, #40	; 0x28
 80029c8:	d152      	bne.n	8002a70 <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80029ca:	2821      	cmp	r0, #33	; 0x21
 80029cc:	d150      	bne.n	8002a70 <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ce:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80029d4:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029d6:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80029d8:	d001      	beq.n	80029de <HAL_I2C_ER_IRQHandler+0x72>
 80029da:	2920      	cmp	r1, #32
 80029dc:	d12a      	bne.n	8002a34 <HAL_I2C_ER_IRQHandler+0xc8>
 80029de:	2a28      	cmp	r2, #40	; 0x28
 80029e0:	d128      	bne.n	8002a34 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e2:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <HAL_I2C_ER_IRQHandler+0x128>)
 80029e4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ec:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f2:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fa:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029fc:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80029fe:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a00:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a02:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a04:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a0c:	f7ff faa7 	bl	8001f5e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a10:	053a      	lsls	r2, r7, #20
 8002a12:	d53c      	bpl.n	8002a8e <HAL_I2C_ER_IRQHandler+0x122>
 8002a14:	05f3      	lsls	r3, r6, #23
 8002a16:	d53a      	bpl.n	8002a8e <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002a1e:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a22:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8002a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a26:	431d      	orrs	r5, r3
 8002a28:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8002a2a:	4620      	mov	r0, r4
}
 8002a2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002a30:	f7ff bad6 	b.w	8001fe0 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a34:	2a21      	cmp	r2, #33	; 0x21
 8002a36:	d117      	bne.n	8002a68 <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a38:	4916      	ldr	r1, [pc, #88]	; (8002a94 <HAL_I2C_ER_IRQHandler+0x128>)
 8002a3a:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a3c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a44:	2200      	movs	r2, #0
 8002a46:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a50:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a56:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5e:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff fa79 	bl	8001f58 <HAL_I2C_SlaveTxCpltCallback>
 8002a66:	e7d3      	b.n	8002a10 <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a6c:	615a      	str	r2, [r3, #20]
 8002a6e:	e7cf      	b.n	8002a10 <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a74:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002a76:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002a7a:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	bf04      	itt	eq
 8002a7e:	681a      	ldreq	r2, [r3, #0]
 8002a80:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 8002a84:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	bf08      	it	eq
 8002a8a:	601a      	streq	r2, [r3, #0]
 8002a8c:	e7c0      	b.n	8002a10 <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 8002a8e:	2d00      	cmp	r5, #0
 8002a90:	d1c8      	bne.n	8002a24 <HAL_I2C_ER_IRQHandler+0xb8>
 8002a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a94:	ffff0000 	.word	0xffff0000

08002a98 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8002a98:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	b918      	cbnz	r0, 8002aac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002aa6:	b002      	add	sp, #8
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aac:	6803      	ldr	r3, [r0, #0]
 8002aae:	07dd      	lsls	r5, r3, #31
 8002ab0:	d410      	bmi.n	8002ad4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	0798      	lsls	r0, r3, #30
 8002ab6:	d458      	bmi.n	8002b6a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	071a      	lsls	r2, r3, #28
 8002abc:	f100 809a 	bmi.w	8002bf4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	075b      	lsls	r3, r3, #29
 8002ac4:	f100 80b8 	bmi.w	8002c38 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	69a2      	ldr	r2, [r4, #24]
 8002aca:	2a00      	cmp	r2, #0
 8002acc:	f040 8119 	bne.w	8002d02 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	e7e8      	b.n	8002aa6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad4:	4ba6      	ldr	r3, [pc, #664]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	f002 020c 	and.w	r2, r2, #12
 8002adc:	2a04      	cmp	r2, #4
 8002ade:	d007      	beq.n	8002af0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae6:	2a08      	cmp	r2, #8
 8002ae8:	d10a      	bne.n	8002b00 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0259      	lsls	r1, r3, #9
 8002aee:	d507      	bpl.n	8002b00 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	4b9f      	ldr	r3, [pc, #636]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	039a      	lsls	r2, r3, #14
 8002af6:	d5dc      	bpl.n	8002ab2 <HAL_RCC_OscConfig+0x16>
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1d9      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x16>
 8002afe:	e7d1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b00:	6863      	ldr	r3, [r4, #4]
 8002b02:	4d9b      	ldr	r5, [pc, #620]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d111      	bne.n	8002b2e <HAL_RCC_OscConfig+0x92>
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b12:	f002 fe31 	bl	8005778 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4d96      	ldr	r5, [pc, #600]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002b18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	682b      	ldr	r3, [r5, #0]
 8002b1c:	039b      	lsls	r3, r3, #14
 8002b1e:	d4c8      	bmi.n	8002ab2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f002 fe2a 	bl	8005778 <HAL_GetTick>
 8002b24:	1b80      	subs	r0, r0, r6
 8002b26:	2864      	cmp	r0, #100	; 0x64
 8002b28:	d9f7      	bls.n	8002b1a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002b2a:	2003      	movs	r0, #3
 8002b2c:	e7bb      	b.n	8002aa6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b32:	d104      	bne.n	8002b3e <HAL_RCC_OscConfig+0xa2>
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	e7e5      	b.n	8002b0a <HAL_RCC_OscConfig+0x6e>
 8002b3e:	682a      	ldr	r2, [r5, #0]
 8002b40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b44:	602a      	str	r2, [r5, #0]
 8002b46:	682a      	ldr	r2, [r5, #0]
 8002b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b4c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1df      	bne.n	8002b12 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002b52:	f002 fe11 	bl	8005778 <HAL_GetTick>
 8002b56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b58:	682b      	ldr	r3, [r5, #0]
 8002b5a:	039f      	lsls	r7, r3, #14
 8002b5c:	d5a9      	bpl.n	8002ab2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5e:	f002 fe0b 	bl	8005778 <HAL_GetTick>
 8002b62:	1b80      	subs	r0, r0, r6
 8002b64:	2864      	cmp	r0, #100	; 0x64
 8002b66:	d9f7      	bls.n	8002b58 <HAL_RCC_OscConfig+0xbc>
 8002b68:	e7df      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6a:	4b81      	ldr	r3, [pc, #516]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	f012 0f0c 	tst.w	r2, #12
 8002b72:	d007      	beq.n	8002b84 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	2a08      	cmp	r2, #8
 8002b7c:	d111      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	025e      	lsls	r6, r3, #9
 8002b82:	d40e      	bmi.n	8002ba2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b84:	4b7a      	ldr	r3, [pc, #488]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	0795      	lsls	r5, r2, #30
 8002b8a:	d502      	bpl.n	8002b92 <HAL_RCC_OscConfig+0xf6>
 8002b8c:	68e2      	ldr	r2, [r4, #12]
 8002b8e:	2a01      	cmp	r2, #1
 8002b90:	d188      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6921      	ldr	r1, [r4, #16]
 8002b96:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002b9a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002b9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba0:	e78a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba2:	68e2      	ldr	r2, [r4, #12]
 8002ba4:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_OscConfig+0x2d8>)
 8002ba6:	b1b2      	cbz	r2, 8002bd6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bac:	f002 fde4 	bl	8005778 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	4d6f      	ldr	r5, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002bb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	0798      	lsls	r0, r3, #30
 8002bb8:	d507      	bpl.n	8002bca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	6922      	ldr	r2, [r4, #16]
 8002bbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	e776      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bca:	f002 fdd5 	bl	8005778 <HAL_GetTick>
 8002bce:	1b80      	subs	r0, r0, r6
 8002bd0:	2802      	cmp	r0, #2
 8002bd2:	d9ef      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x118>
 8002bd4:	e7a9      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bd8:	f002 fdce 	bl	8005778 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bdc:	4d64      	ldr	r5, [pc, #400]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002bde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	0799      	lsls	r1, r3, #30
 8002be4:	f57f af68 	bpl.w	8002ab8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f002 fdc6 	bl	8005778 <HAL_GetTick>
 8002bec:	1b80      	subs	r0, r0, r6
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d9f6      	bls.n	8002be0 <HAL_RCC_OscConfig+0x144>
 8002bf2:	e79a      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf4:	6962      	ldr	r2, [r4, #20]
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_RCC_OscConfig+0x2dc>)
 8002bf8:	b17a      	cbz	r2, 8002c1a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002bfe:	f002 fdbb 	bl	8005778 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4d5b      	ldr	r5, [pc, #364]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002c04:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c08:	079f      	lsls	r7, r3, #30
 8002c0a:	f53f af59 	bmi.w	8002ac0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0e:	f002 fdb3 	bl	8005778 <HAL_GetTick>
 8002c12:	1b80      	subs	r0, r0, r6
 8002c14:	2802      	cmp	r0, #2
 8002c16:	d9f6      	bls.n	8002c06 <HAL_RCC_OscConfig+0x16a>
 8002c18:	e787      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002c1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c1c:	f002 fdac 	bl	8005778 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4d53      	ldr	r5, [pc, #332]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002c22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c26:	0798      	lsls	r0, r3, #30
 8002c28:	f57f af4a 	bpl.w	8002ac0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f002 fda4 	bl	8005778 <HAL_GetTick>
 8002c30:	1b80      	subs	r0, r0, r6
 8002c32:	2802      	cmp	r0, #2
 8002c34:	d9f6      	bls.n	8002c24 <HAL_RCC_OscConfig+0x188>
 8002c36:	e778      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c38:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002c40:	d128      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	9201      	str	r2, [sp, #4]
 8002c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c56:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4d48      	ldr	r5, [pc, #288]	; (8002d7c <HAL_RCC_OscConfig+0x2e0>)
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	05d9      	lsls	r1, r3, #23
 8002c5e:	d51b      	bpl.n	8002c98 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	68a3      	ldr	r3, [r4, #8]
 8002c62:	4d43      	ldr	r5, [pc, #268]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d127      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x21c>
 8002c68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002c70:	f002 fd82 	bl	8005778 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	4d3e      	ldr	r5, [pc, #248]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002c76:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c7e:	079b      	lsls	r3, r3, #30
 8002c80:	d539      	bpl.n	8002cf6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002c82:	2e00      	cmp	r6, #0
 8002c84:	f43f af20 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4a39      	ldr	r2, [pc, #228]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002c8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	e719      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002c94:	2600      	movs	r6, #0
 8002c96:	e7df      	b.n	8002c58 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ca0:	f002 fd6a 	bl	8005778 <HAL_GetTick>
 8002ca4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	682b      	ldr	r3, [r5, #0]
 8002ca8:	05da      	lsls	r2, r3, #23
 8002caa:	d4d9      	bmi.n	8002c60 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f002 fd64 	bl	8005778 <HAL_GetTick>
 8002cb0:	1bc0      	subs	r0, r0, r7
 8002cb2:	2802      	cmp	r0, #2
 8002cb4:	d9f7      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x20a>
 8002cb6:	e738      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d104      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x22a>
 8002cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	672b      	str	r3, [r5, #112]	; 0x70
 8002cc4:	e7d0      	b.n	8002c68 <HAL_RCC_OscConfig+0x1cc>
 8002cc6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	672a      	str	r2, [r5, #112]	; 0x70
 8002cce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cd0:	f022 0204 	bic.w	r2, r2, #4
 8002cd4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ca      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002cda:	f002 fd4d 	bl	8005778 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ce2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ce6:	0798      	lsls	r0, r3, #30
 8002ce8:	d5cb      	bpl.n	8002c82 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f002 fd45 	bl	8005778 <HAL_GetTick>
 8002cee:	1bc0      	subs	r0, r0, r7
 8002cf0:	4540      	cmp	r0, r8
 8002cf2:	d9f7      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x248>
 8002cf4:	e719      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f002 fd3f 	bl	8005778 <HAL_GetTick>
 8002cfa:	1bc0      	subs	r0, r0, r7
 8002cfc:	4540      	cmp	r0, r8
 8002cfe:	d9bd      	bls.n	8002c7c <HAL_RCC_OscConfig+0x1e0>
 8002d00:	e713      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d02:	4d1b      	ldr	r5, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
 8002d04:	68ab      	ldr	r3, [r5, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	f43f aeca 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x8>
 8002d10:	4e1b      	ldr	r6, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x2e4>)
 8002d12:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d14:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002d16:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	d134      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002d1a:	f002 fd2d 	bl	8005778 <HAL_GetTick>
 8002d1e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	0199      	lsls	r1, r3, #6
 8002d24:	d41e      	bmi.n	8002d64 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d26:	6a22      	ldr	r2, [r4, #32]
 8002d28:	69e3      	ldr	r3, [r4, #28]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d2e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4c0d      	ldr	r4, [pc, #52]	; (8002d70 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3c:	0852      	lsrs	r2, r2, #1
 8002d3e:	3a01      	subs	r2, #1
 8002d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d44:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d46:	2301      	movs	r3, #1
 8002d48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d4a:	f002 fd15 	bl	8005778 <HAL_GetTick>
 8002d4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	019a      	lsls	r2, r3, #6
 8002d54:	f53f aebc 	bmi.w	8002ad0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d58:	f002 fd0e 	bl	8005778 <HAL_GetTick>
 8002d5c:	1b40      	subs	r0, r0, r5
 8002d5e:	2802      	cmp	r0, #2
 8002d60:	d9f6      	bls.n	8002d50 <HAL_RCC_OscConfig+0x2b4>
 8002d62:	e6e2      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f002 fd08 	bl	8005778 <HAL_GetTick>
 8002d68:	1bc0      	subs	r0, r0, r7
 8002d6a:	2802      	cmp	r0, #2
 8002d6c:	d9d8      	bls.n	8002d20 <HAL_RCC_OscConfig+0x284>
 8002d6e:	e6dc      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	42470000 	.word	0x42470000
 8002d78:	42470e80 	.word	0x42470e80
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002d84:	f002 fcf8 	bl	8005778 <HAL_GetTick>
 8002d88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	682b      	ldr	r3, [r5, #0]
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	f57f ae9f 	bpl.w	8002ad0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f002 fcf1 	bl	8005778 <HAL_GetTick>
 8002d96:	1b00      	subs	r0, r0, r4
 8002d98:	2802      	cmp	r0, #2
 8002d9a:	d9f6      	bls.n	8002d8a <HAL_RCC_OscConfig+0x2ee>
 8002d9c:	e6c5      	b.n	8002b2a <HAL_RCC_OscConfig+0x8e>
 8002d9e:	bf00      	nop

08002da0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da0:	4913      	ldr	r1, [pc, #76]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002da2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da4:	688b      	ldr	r3, [r1, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x16>
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db2:	4810      	ldr	r0, [pc, #64]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002db4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002db6:	4810      	ldr	r0, [pc, #64]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x58>)
 8002db8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	bf14      	ite	ne
 8002dc6:	480c      	ldrne	r0, [pc, #48]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc8:	480a      	ldreq	r0, [pc, #40]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002dce:	bf18      	it	ne
 8002dd0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	fba1 0100 	umull	r0, r1, r1, r0
 8002dda:	f7fd ff31 	bl	8000c40 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x50>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002dea:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dee:	bd08      	pop	{r3, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	00f42400 	.word	0x00f42400
 8002df8:	017d7840 	.word	0x017d7840

08002dfc <HAL_RCC_ClockConfig>:
{
 8002dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002e02:	4604      	mov	r4, r0
 8002e04:	b910      	cbnz	r0, 8002e0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
 8002e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCC_ClockConfig+0x124>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f002 020f 	and.w	r2, r2, #15
 8002e14:	428a      	cmp	r2, r1
 8002e16:	d328      	bcc.n	8002e6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	6821      	ldr	r1, [r4, #0]
 8002e1a:	078f      	lsls	r7, r1, #30
 8002e1c:	d42d      	bmi.n	8002e7a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1e:	07c8      	lsls	r0, r1, #31
 8002e20:	d440      	bmi.n	8002ea4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_ClockConfig+0x124>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f002 020f 	and.w	r2, r2, #15
 8002e2a:	4295      	cmp	r5, r2
 8002e2c:	d366      	bcc.n	8002efc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2e:	6822      	ldr	r2, [r4, #0]
 8002e30:	0751      	lsls	r1, r2, #29
 8002e32:	d46c      	bmi.n	8002f0e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	0713      	lsls	r3, r2, #28
 8002e36:	d507      	bpl.n	8002e48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e38:	4a3a      	ldr	r2, [pc, #232]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002e3a:	6921      	ldr	r1, [r4, #16]
 8002e3c:	6893      	ldr	r3, [r2, #8]
 8002e3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e48:	f7ff ffaa 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002e4e:	4a36      	ldr	r2, [pc, #216]	; (8002f28 <HAL_RCC_ClockConfig+0x12c>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	40d8      	lsrs	r0, r3
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_RCC_ClockConfig+0x130>)
 8002e5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fe f876 	bl	8000f50 <HAL_InitTick>
  return HAL_OK;
 8002e64:	2000      	movs	r0, #0
 8002e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	b2ca      	uxtb	r2, r1
 8002e6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	4299      	cmp	r1, r3
 8002e76:	d1c6      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xa>
 8002e78:	e7ce      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1c>
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e80:	bf1e      	ittt	ne
 8002e82:	689a      	ldrne	r2, [r3, #8]
 8002e84:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002e88:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e8c:	bf42      	ittt	mi
 8002e8e:	689a      	ldrmi	r2, [r3, #8]
 8002e90:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002e94:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68a0      	ldr	r0, [r4, #8]
 8002e9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e9e:	4302      	orrs	r2, r0
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	e7bc      	b.n	8002e1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea4:	6862      	ldr	r2, [r4, #4]
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002ea8:	2a01      	cmp	r2, #1
 8002eaa:	d11d      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	d0a8      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb4:	4e1b      	ldr	r6, [pc, #108]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002eb6:	68b3      	ldr	r3, [r6, #8]
 8002eb8:	f023 0303 	bic.w	r3, r3, #3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ec0:	f002 fc5a 	bl	8005778 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002ec8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	68b3      	ldr	r3, [r6, #8]
 8002ecc:	6862      	ldr	r2, [r4, #4]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ed6:	d0a4      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f002 fc4e 	bl	8005778 <HAL_GetTick>
 8002edc:	1bc0      	subs	r0, r0, r7
 8002ede:	4540      	cmp	r0, r8
 8002ee0:	d9f3      	bls.n	8002eca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002ee2:	2003      	movs	r0, #3
}
 8002ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee8:	1e91      	subs	r1, r2, #2
 8002eea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	d802      	bhi.n	8002ef6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ef4:	e7dd      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	f013 0f02 	tst.w	r3, #2
 8002efa:	e7da      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efc:	b2ea      	uxtb	r2, r5
 8002efe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	429d      	cmp	r5, r3
 8002f08:	f47f af7d 	bne.w	8002e06 <HAL_RCC_ClockConfig+0xa>
 8002f0c:	e78f      	b.n	8002e2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0e:	4905      	ldr	r1, [pc, #20]	; (8002f24 <HAL_RCC_ClockConfig+0x128>)
 8002f10:	68e0      	ldr	r0, [r4, #12]
 8002f12:	688b      	ldr	r3, [r1, #8]
 8002f14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002f18:	4303      	orrs	r3, r0
 8002f1a:	608b      	str	r3, [r1, #8]
 8002f1c:	e78a      	b.n	8002e34 <HAL_RCC_ClockConfig+0x38>
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	0800929f 	.word	0x0800929f
 8002f2c:	20000008 	.word	0x20000008

08002f30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f3e:	6810      	ldr	r0, [r2, #0]
}
 8002f40:	40d8      	lsrs	r0, r3
 8002f42:	4770      	bx	lr
 8002f44:	40023800 	.word	0x40023800
 8002f48:	080092af 	.word	0x080092af
 8002f4c:	20000008 	.word	0x20000008

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	4a03      	ldr	r2, [pc, #12]	; (8002f6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002f5e:	6810      	ldr	r0, [r2, #0]
}
 8002f60:	40d8      	lsrs	r0, r3
 8002f62:	4770      	bx	lr
 8002f64:	40023800 	.word	0x40023800
 8002f68:	080092af 	.word	0x080092af
 8002f6c:	20000008 	.word	0x20000008

08002f70 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f70:	6803      	ldr	r3, [r0, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f78:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f82:	2320      	movs	r3, #32
 8002f84:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002f88:	4770      	bx	lr
	...

08002f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f90:	6806      	ldr	r6, [r0, #0]
 8002f92:	68c2      	ldr	r2, [r0, #12]
 8002f94:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f96:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	6133      	str	r3, [r6, #16]
{
 8002fa0:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa2:	6883      	ldr	r3, [r0, #8]
 8002fa4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002fa6:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa8:	4303      	orrs	r3, r0
 8002faa:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002fac:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fb0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002fb2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fb6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fbc:	6973      	ldr	r3, [r6, #20]
 8002fbe:	69a2      	ldr	r2, [r4, #24]
 8002fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc4:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fca:	6173      	str	r3, [r6, #20]
 8002fcc:	4b7a      	ldr	r3, [pc, #488]	; (80031b8 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fce:	d17c      	bne.n	80030ca <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fd0:	429e      	cmp	r6, r3
 8002fd2:	d003      	beq.n	8002fdc <UART_SetConfig+0x50>
 8002fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fd8:	429e      	cmp	r6, r3
 8002fda:	d144      	bne.n	8003066 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002fdc:	f7ff ffb8 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8002fe0:	2519      	movs	r5, #25
 8002fe2:	fb05 f300 	mul.w	r3, r5, r0
 8002fe6:	6860      	ldr	r0, [r4, #4]
 8002fe8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002fec:	0040      	lsls	r0, r0, #1
 8002fee:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ff2:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ff6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ffa:	f7ff ffa9 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8002ffe:	6863      	ldr	r3, [r4, #4]
 8003000:	4368      	muls	r0, r5
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fbb0 f7f3 	udiv	r7, r0, r3
 8003008:	f7ff ffa2 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 800300c:	6863      	ldr	r3, [r4, #4]
 800300e:	4368      	muls	r0, r5
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	fbb3 f3f9 	udiv	r3, r3, r9
 800301a:	fb09 7313 	mls	r3, r9, r3, r7
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	3332      	adds	r3, #50	; 0x32
 8003022:	fbb3 f3f9 	udiv	r3, r3, r9
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800302c:	f7ff ff90 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8003030:	6862      	ldr	r2, [r4, #4]
 8003032:	4368      	muls	r0, r5
 8003034:	0052      	lsls	r2, r2, #1
 8003036:	fbb0 faf2 	udiv	sl, r0, r2
 800303a:	f7ff ff89 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800303e:	6863      	ldr	r3, [r4, #4]
 8003040:	4368      	muls	r0, r5
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fbb0 f3f3 	udiv	r3, r0, r3
 8003048:	fbb3 f3f9 	udiv	r3, r3, r9
 800304c:	fb09 a313 	mls	r3, r9, r3, sl
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	3332      	adds	r3, #50	; 0x32
 8003054:	fbb3 f3f9 	udiv	r3, r3, r9
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800305e:	443b      	add	r3, r7
 8003060:	60b3      	str	r3, [r6, #8]
 8003062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003066:	f7ff ff63 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 800306a:	2519      	movs	r5, #25
 800306c:	fb05 f300 	mul.w	r3, r5, r0
 8003070:	6860      	ldr	r0, [r4, #4]
 8003072:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003076:	0040      	lsls	r0, r0, #1
 8003078:	fbb3 f3f0 	udiv	r3, r3, r0
 800307c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003080:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003084:	f7ff ff54 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	4368      	muls	r0, r5
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fbb0 f7f3 	udiv	r7, r0, r3
 8003092:	f7ff ff4d 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8003096:	6863      	ldr	r3, [r4, #4]
 8003098:	4368      	muls	r0, r5
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80030a4:	fb09 7313 	mls	r3, r9, r3, r7
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	3332      	adds	r3, #50	; 0x32
 80030ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80030b6:	f7ff ff3b 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 80030ba:	6862      	ldr	r2, [r4, #4]
 80030bc:	4368      	muls	r0, r5
 80030be:	0052      	lsls	r2, r2, #1
 80030c0:	fbb0 faf2 	udiv	sl, r0, r2
 80030c4:	f7ff ff34 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 80030c8:	e7b9      	b.n	800303e <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ca:	429e      	cmp	r6, r3
 80030cc:	d002      	beq.n	80030d4 <UART_SetConfig+0x148>
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <UART_SetConfig+0x230>)
 80030d0:	429e      	cmp	r6, r3
 80030d2:	d140      	bne.n	8003156 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80030d4:	f7ff ff3c 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 80030d8:	6867      	ldr	r7, [r4, #4]
 80030da:	2519      	movs	r5, #25
 80030dc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80030e0:	fb05 f300 	mul.w	r3, r5, r0
 80030e4:	00bf      	lsls	r7, r7, #2
 80030e6:	fbb3 f3f7 	udiv	r3, r3, r7
 80030ea:	fbb3 f3f9 	udiv	r3, r3, r9
 80030ee:	011f      	lsls	r7, r3, #4
 80030f0:	f7ff ff2e 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 80030f4:	6863      	ldr	r3, [r4, #4]
 80030f6:	4368      	muls	r0, r5
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	fbb0 f8f3 	udiv	r8, r0, r3
 80030fe:	f7ff ff27 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8003102:	6863      	ldr	r3, [r4, #4]
 8003104:	4368      	muls	r0, r5
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fbb0 f3f3 	udiv	r3, r0, r3
 800310c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003110:	fb09 8313 	mls	r3, r9, r3, r8
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	3332      	adds	r3, #50	; 0x32
 8003118:	fbb3 f3f9 	udiv	r3, r3, r9
 800311c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003120:	f7ff ff16 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8003124:	6862      	ldr	r2, [r4, #4]
 8003126:	4368      	muls	r0, r5
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	fbb0 faf2 	udiv	sl, r0, r2
 800312e:	f7ff ff0f 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003132:	6863      	ldr	r3, [r4, #4]
 8003134:	4368      	muls	r0, r5
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fbb0 f3f3 	udiv	r3, r0, r3
 800313c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003140:	fb09 a313 	mls	r3, r9, r3, sl
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	3332      	adds	r3, #50	; 0x32
 8003148:	fbb3 f3f9 	udiv	r3, r3, r9
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	ea43 0308 	orr.w	r3, r3, r8
 8003154:	e783      	b.n	800305e <UART_SetConfig+0xd2>
 8003156:	f7ff feeb 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 800315a:	6867      	ldr	r7, [r4, #4]
 800315c:	2519      	movs	r5, #25
 800315e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003162:	fb05 f300 	mul.w	r3, r5, r0
 8003166:	00bf      	lsls	r7, r7, #2
 8003168:	fbb3 f3f7 	udiv	r3, r3, r7
 800316c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003170:	011f      	lsls	r7, r3, #4
 8003172:	f7ff fedd 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8003176:	6863      	ldr	r3, [r4, #4]
 8003178:	4368      	muls	r0, r5
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fbb0 f8f3 	udiv	r8, r0, r3
 8003180:	f7ff fed6 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8003184:	6863      	ldr	r3, [r4, #4]
 8003186:	4368      	muls	r0, r5
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	fbb0 f3f3 	udiv	r3, r0, r3
 800318e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003192:	fb09 8313 	mls	r3, r9, r3, r8
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	3332      	adds	r3, #50	; 0x32
 800319a:	fbb3 f3f9 	udiv	r3, r3, r9
 800319e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80031a2:	f7ff fec5 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 80031a6:	6862      	ldr	r2, [r4, #4]
 80031a8:	4368      	muls	r0, r5
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	fbb0 faf2 	udiv	sl, r0, r2
 80031b0:	f7ff febe 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 80031b4:	e7bd      	b.n	8003132 <UART_SetConfig+0x1a6>
 80031b6:	bf00      	nop
 80031b8:	40011000 	.word	0x40011000
 80031bc:	40011400 	.word	0x40011400

080031c0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	4604      	mov	r4, r0
 80031c4:	460e      	mov	r6, r1
 80031c6:	4617      	mov	r7, r2
 80031c8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ca:	6821      	ldr	r1, [r4, #0]
 80031cc:	680b      	ldr	r3, [r1, #0]
 80031ce:	ea36 0303 	bics.w	r3, r6, r3
 80031d2:	d101      	bne.n	80031d8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80031d4:	2000      	movs	r0, #0
}
 80031d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	1c6b      	adds	r3, r5, #1
 80031da:	d0f7      	beq.n	80031cc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031dc:	b995      	cbnz	r5, 8003204 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80031f0:	2320      	movs	r3, #32
 80031f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80031f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80031fa:	2300      	movs	r3, #0
 80031fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003200:	2003      	movs	r0, #3
 8003202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003204:	f002 fab8 	bl	8005778 <HAL_GetTick>
 8003208:	1bc0      	subs	r0, r0, r7
 800320a:	4285      	cmp	r5, r0
 800320c:	d2dd      	bcs.n	80031ca <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800320e:	e7e6      	b.n	80031de <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003210 <HAL_UART_Init>:
{
 8003210:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003212:	4604      	mov	r4, r0
 8003214:	b340      	cbz	r0, 8003268 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003216:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800321a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800321e:	b91b      	cbnz	r3, 8003228 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003220:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003224:	f002 fbb2 	bl	800598c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003228:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800322a:	2324      	movs	r3, #36	; 0x24
 800322c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003230:	68d3      	ldr	r3, [r2, #12]
 8003232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003236:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff fea7 	bl	8002f8c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003246:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800324e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003256:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003258:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800325a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800325e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003262:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003266:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003268:	2001      	movs	r0, #1
}
 800326a:	bd10      	pop	{r4, pc}

0800326c <HAL_UART_Transmit>:
{
 800326c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003270:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003272:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003276:	2b20      	cmp	r3, #32
{
 8003278:	4604      	mov	r4, r0
 800327a:	460d      	mov	r5, r1
 800327c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800327e:	d14f      	bne.n	8003320 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8003280:	2900      	cmp	r1, #0
 8003282:	d04a      	beq.n	800331a <HAL_UART_Transmit+0xae>
 8003284:	2a00      	cmp	r2, #0
 8003286:	d048      	beq.n	800331a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8003288:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800328c:	2b01      	cmp	r3, #1
 800328e:	d047      	beq.n	8003320 <HAL_UART_Transmit+0xb4>
 8003290:	2301      	movs	r3, #1
 8003292:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003296:	2300      	movs	r3, #0
 8003298:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800329a:	2321      	movs	r3, #33	; 0x21
 800329c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80032a0:	f002 fa6a 	bl	8005778 <HAL_GetTick>
    huart->TxXferSize = Size;
 80032a4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80032a8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80032aa:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b96b      	cbnz	r3, 80032d0 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b4:	463b      	mov	r3, r7
 80032b6:	4632      	mov	r2, r6
 80032b8:	2140      	movs	r1, #64	; 0x40
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7ff ff80 	bl	80031c0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80032c0:	b9b0      	cbnz	r0, 80032f0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80032c2:	2320      	movs	r3, #32
 80032c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80032c8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80032cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80032d0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032d8:	68a3      	ldr	r3, [r4, #8]
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032de:	4632      	mov	r2, r6
 80032e0:	463b      	mov	r3, r7
 80032e2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80032e6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032e8:	d10e      	bne.n	8003308 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ea:	f7ff ff69 	bl	80031c0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80032ee:	b110      	cbz	r0, 80032f6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80032f0:	2003      	movs	r0, #3
 80032f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032f6:	882b      	ldrh	r3, [r5, #0]
 80032f8:	6822      	ldr	r2, [r4, #0]
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003300:	6923      	ldr	r3, [r4, #16]
 8003302:	b943      	cbnz	r3, 8003316 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8003304:	3502      	adds	r5, #2
 8003306:	e7d2      	b.n	80032ae <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003308:	f7ff ff5a 	bl	80031c0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800330c:	2800      	cmp	r0, #0
 800330e:	d1ef      	bne.n	80032f0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	782a      	ldrb	r2, [r5, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	3501      	adds	r5, #1
 8003318:	e7c9      	b.n	80032ae <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800331a:	2001      	movs	r0, #1
 800331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003320:	2002      	movs	r0, #2
}
 8003322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003326 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003326:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800332a:	2b20      	cmp	r3, #32
 800332c:	d120      	bne.n	8003370 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800332e:	b1e9      	cbz	r1, 800336c <HAL_UART_Receive_IT+0x46>
 8003330:	b1e2      	cbz	r2, 800336c <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8003332:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003336:	2b01      	cmp	r3, #1
 8003338:	d01a      	beq.n	8003370 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800333a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800333c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003340:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003344:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003348:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800334a:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800334c:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800334e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003352:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003356:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003358:	6951      	ldr	r1, [r2, #20]
 800335a:	f041 0101 	orr.w	r1, r1, #1
 800335e:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003360:	68d1      	ldr	r1, [r2, #12]
 8003362:	f041 0120 	orr.w	r1, r1, #32
 8003366:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8003368:	4618      	mov	r0, r3
 800336a:	4770      	bx	lr
      return HAL_ERROR;
 800336c:	2001      	movs	r0, #1
 800336e:	4770      	bx	lr
    return HAL_BUSY;
 8003370:	2002      	movs	r0, #2
}
 8003372:	4770      	bx	lr

08003374 <HAL_UART_TxCpltCallback>:
 8003374:	4770      	bx	lr

08003376 <HAL_UART_RxCpltCallback>:
 8003376:	4770      	bx	lr

08003378 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003378:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800337c:	2b22      	cmp	r3, #34	; 0x22
{
 800337e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003380:	d136      	bne.n	80033f0 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003382:	6883      	ldr	r3, [r0, #8]
 8003384:	6901      	ldr	r1, [r0, #16]
 8003386:	6802      	ldr	r2, [r0, #0]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800338e:	d123      	bne.n	80033d8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003390:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003392:	b9e9      	cbnz	r1, 80033d0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003398:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800339c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800339e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80033a0:	3c01      	subs	r4, #1
 80033a2:	b2a4      	uxth	r4, r4
 80033a4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80033a6:	b98c      	cbnz	r4, 80033cc <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033a8:	6803      	ldr	r3, [r0, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	f022 0220 	bic.w	r2, r2, #32
 80033b0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80033c2:	2320      	movs	r3, #32
 80033c4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80033c8:	f7ff ffd5 	bl	8003376 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80033cc:	2000      	movs	r0, #0
}
 80033ce:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f823 2b01 	strh.w	r2, [r3], #1
 80033d6:	e7e1      	b.n	800339c <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033d8:	b921      	cbnz	r1, 80033e4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033da:	1c59      	adds	r1, r3, #1
 80033dc:	6852      	ldr	r2, [r2, #4]
 80033de:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e7dc      	b.n	800339e <UART_Receive_IT+0x26>
 80033e4:	6852      	ldr	r2, [r2, #4]
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	6281      	str	r1, [r0, #40]	; 0x28
 80033ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033ee:	e7f7      	b.n	80033e0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80033f0:	2002      	movs	r0, #2
 80033f2:	bd10      	pop	{r4, pc}

080033f4 <HAL_UART_ErrorCallback>:
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033f8:	6803      	ldr	r3, [r0, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033fc:	68d9      	ldr	r1, [r3, #12]
{
 80033fe:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003400:	0716      	lsls	r6, r2, #28
{
 8003402:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003404:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003406:	d107      	bne.n	8003418 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003408:	0696      	lsls	r6, r2, #26
 800340a:	d55a      	bpl.n	80034c2 <HAL_UART_IRQHandler+0xca>
 800340c:	068d      	lsls	r5, r1, #26
 800340e:	d558      	bpl.n	80034c2 <HAL_UART_IRQHandler+0xca>
}
 8003410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003414:	f7ff bfb0 	b.w	8003378 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003418:	f015 0501 	ands.w	r5, r5, #1
 800341c:	d102      	bne.n	8003424 <HAL_UART_IRQHandler+0x2c>
 800341e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003422:	d04e      	beq.n	80034c2 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003424:	07d3      	lsls	r3, r2, #31
 8003426:	d505      	bpl.n	8003434 <HAL_UART_IRQHandler+0x3c>
 8003428:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800342a:	bf42      	ittt	mi
 800342c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800342e:	f043 0301 	orrmi.w	r3, r3, #1
 8003432:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003434:	0750      	lsls	r0, r2, #29
 8003436:	d504      	bpl.n	8003442 <HAL_UART_IRQHandler+0x4a>
 8003438:	b11d      	cbz	r5, 8003442 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800343a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003442:	0793      	lsls	r3, r2, #30
 8003444:	d504      	bpl.n	8003450 <HAL_UART_IRQHandler+0x58>
 8003446:	b11d      	cbz	r5, 8003450 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003450:	0716      	lsls	r6, r2, #28
 8003452:	d504      	bpl.n	800345e <HAL_UART_IRQHandler+0x66>
 8003454:	b11d      	cbz	r5, 800345e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003456:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003458:	f043 0308 	orr.w	r3, r3, #8
 800345c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d066      	beq.n	8003532 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003464:	0695      	lsls	r5, r2, #26
 8003466:	d504      	bpl.n	8003472 <HAL_UART_IRQHandler+0x7a>
 8003468:	0688      	lsls	r0, r1, #26
 800346a:	d502      	bpl.n	8003472 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff ff83 	bl	8003378 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003476:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003478:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800347a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800347c:	d402      	bmi.n	8003484 <HAL_UART_IRQHandler+0x8c>
 800347e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003482:	d01a      	beq.n	80034ba <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003484:	f7ff fd74 	bl	8002f70 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	0652      	lsls	r2, r2, #25
 800348e:	d510      	bpl.n	80034b2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003490:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003492:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003498:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800349a:	b150      	cbz	r0, 80034b2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_UART_IRQHandler+0x13c>)
 800349e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034a0:	f7fd fdfe 	bl	80010a0 <HAL_DMA_Abort_IT>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d044      	beq.n	8003532 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80034aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80034b0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff ff9e 	bl	80033f4 <HAL_UART_ErrorCallback>
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80034ba:	f7ff ff9b 	bl	80033f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	63e5      	str	r5, [r4, #60]	; 0x3c
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034c2:	0616      	lsls	r6, r2, #24
 80034c4:	d527      	bpl.n	8003516 <HAL_UART_IRQHandler+0x11e>
 80034c6:	060d      	lsls	r5, r1, #24
 80034c8:	d525      	bpl.n	8003516 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034ca:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80034ce:	2a21      	cmp	r2, #33	; 0x21
 80034d0:	d12f      	bne.n	8003532 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034d2:	68a2      	ldr	r2, [r4, #8]
 80034d4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80034d8:	6a22      	ldr	r2, [r4, #32]
 80034da:	d117      	bne.n	800350c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034dc:	8811      	ldrh	r1, [r2, #0]
 80034de:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80034e2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034e4:	6921      	ldr	r1, [r4, #16]
 80034e6:	b979      	cbnz	r1, 8003508 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80034e8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80034ea:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80034ec:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80034ee:	3a01      	subs	r2, #1
 80034f0:	b292      	uxth	r2, r2
 80034f2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80034f4:	b9ea      	cbnz	r2, 8003532 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8003508:	3201      	adds	r2, #1
 800350a:	e7ee      	b.n	80034ea <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800350c:	1c51      	adds	r1, r2, #1
 800350e:	6221      	str	r1, [r4, #32]
 8003510:	7812      	ldrb	r2, [r2, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	e7ea      	b.n	80034ec <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003516:	0650      	lsls	r0, r2, #25
 8003518:	d50b      	bpl.n	8003532 <HAL_UART_IRQHandler+0x13a>
 800351a:	064a      	lsls	r2, r1, #25
 800351c:	d509      	bpl.n	8003532 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003524:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003526:	2320      	movs	r3, #32
 8003528:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800352c:	4620      	mov	r0, r4
 800352e:	f7ff ff21 	bl	8003374 <HAL_UART_TxCpltCallback>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	08003539 	.word	0x08003539

08003538 <UART_DMAAbortOnError>:
{
 8003538:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800353a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800353c:	2300      	movs	r3, #0
 800353e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003540:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003542:	f7ff ff57 	bl	80033f4 <HAL_UART_ErrorCallback>
 8003546:	bd08      	pop	{r3, pc}

08003548 <Max30102_WriteReg>:
}MAX30102_STATE;

MAX30102_STATE StateMachine;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 8003548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800354a:	aa06      	add	r2, sp, #24
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 800354c:	2301      	movs	r3, #1
{
 800354e:	f802 1d01 	strb.w	r1, [r2, #-1]!
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8003552:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003556:	4602      	mov	r2, r0
 8003558:	4805      	ldr	r0, [pc, #20]	; (8003570 <Max30102_WriteReg+0x28>)
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	21ae      	movs	r1, #174	; 0xae
 800355e:	6800      	ldr	r0, [r0, #0]
 8003560:	f7fe fb5c 	bl	8001c1c <HAL_I2C_Mem_Write>
		return MAX30102_OK;
	return MAX30102_ERROR;
}
 8003564:	fab0 f080 	clz	r0, r0
 8003568:	0940      	lsrs	r0, r0, #5
 800356a:	b007      	add	sp, #28
 800356c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003570:	20000df8 	.word	0x20000df8

08003574 <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 8003574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8003576:	2301      	movs	r3, #1
 8003578:	e88d 000a 	stmia.w	sp, {r1, r3}
 800357c:	4602      	mov	r2, r0
 800357e:	4806      	ldr	r0, [pc, #24]	; (8003598 <Max30102_ReadReg+0x24>)
 8003580:	9302      	str	r3, [sp, #8]
 8003582:	21ae      	movs	r1, #174	; 0xae
 8003584:	6800      	ldr	r0, [r0, #0]
 8003586:	f7fe fbd9 	bl	8001d3c <HAL_I2C_Mem_Read>
		return MAX30102_OK;
	return MAX30102_ERROR;
}
 800358a:	fab0 f080 	clz	r0, r0
 800358e:	0940      	lsrs	r0, r0, #5
 8003590:	b005      	add	sp, #20
 8003592:	f85d fb04 	ldr.w	pc, [sp], #4
 8003596:	bf00      	nop
 8003598:	20000df8 	.word	0x20000df8

0800359c <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 800359c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800359e:	460e      	mov	r6, r1
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 80035a0:	f10d 0107 	add.w	r1, sp, #7
{
 80035a4:	4605      	mov	r5, r0
 80035a6:	4614      	mov	r4, r2
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 80035a8:	f7ff ffe4 	bl	8003574 <Max30102_ReadReg>
 80035ac:	2801      	cmp	r0, #1
 80035ae:	d113      	bne.n	80035d8 <Max30102_WriteRegisterBit+0x3c>
		return MAX30102_ERROR;
	tmp &= ~(1<<Bit);
 80035b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80035b4:	40b0      	lsls	r0, r6
	tmp |= (Value&0x01)<<Bit;
 80035b6:	f004 0401 	and.w	r4, r4, #1
	tmp &= ~(1<<Bit);
 80035ba:	ea21 0100 	bic.w	r1, r1, r0
	tmp |= (Value&0x01)<<Bit;
 80035be:	40b4      	lsls	r4, r6
 80035c0:	4321      	orrs	r1, r4
 80035c2:	b2c9      	uxtb	r1, r1
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 80035c4:	4628      	mov	r0, r5
	tmp |= (Value&0x01)<<Bit;
 80035c6:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 80035ca:	f7ff ffbd 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
 80035ce:	1e43      	subs	r3, r0, #1
 80035d0:	4258      	negs	r0, r3
 80035d2:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 80035d4:	b002      	add	sp, #8
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
		return MAX30102_ERROR;
 80035d8:	2000      	movs	r0, #0
 80035da:	e7fb      	b.n	80035d4 <Max30102_WriteRegisterBit+0x38>

080035dc <Max30102_ReadFifo>:

MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	b087      	sub	sp, #28
	uint32_t un_temp;
	*pun_red_led=0;
 80035e0:	2600      	movs	r6, #0
	*pun_ir_led=0;
	uint8_t ach_i2c_data[6];

	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 80035e2:	2306      	movs	r3, #6
	*pun_red_led=0;
 80035e4:	6006      	str	r6, [r0, #0]
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 80035e6:	2701      	movs	r7, #1
	*pun_ir_led=0;
 80035e8:	600e      	str	r6, [r1, #0]
{
 80035ea:	4605      	mov	r5, r0
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	481d      	ldr	r0, [pc, #116]	; (8003664 <Max30102_ReadFifo+0x88>)
 80035f0:	9702      	str	r7, [sp, #8]
 80035f2:	ab04      	add	r3, sp, #16
 80035f4:	9300      	str	r3, [sp, #0]
{
 80035f6:	460c      	mov	r4, r1
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 80035f8:	463b      	mov	r3, r7
 80035fa:	2207      	movs	r2, #7
 80035fc:	21ae      	movs	r1, #174	; 0xae
 80035fe:	6800      	ldr	r0, [r0, #0]
 8003600:	f7fe fb9c 	bl	8001d3c <HAL_I2C_Mem_Read>
 8003604:	bb60      	cbnz	r0, 8003660 <Max30102_ReadFifo+0x84>
	{
		return MAX30102_ERROR;
	}
	un_temp=(unsigned char) ach_i2c_data[0];
	un_temp<<=16;
	*pun_red_led+=un_temp;
 8003606:	682b      	ldr	r3, [r5, #0]
	un_temp=(unsigned char) ach_i2c_data[0];
 8003608:	f89d 2010 	ldrb.w	r2, [sp, #16]
	*pun_red_led+=un_temp;
 800360c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8003610:	602b      	str	r3, [r5, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
	un_temp<<=8;
	*pun_red_led+=un_temp;
 8003612:	682b      	ldr	r3, [r5, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
 8003614:	f89d 2011 	ldrb.w	r2, [sp, #17]
	*pun_red_led+=un_temp;
 8003618:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800361c:	602b      	str	r3, [r5, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
	*pun_red_led+=un_temp;
 800361e:	682a      	ldr	r2, [r5, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
 8003620:	f89d 3012 	ldrb.w	r3, [sp, #18]
	*pun_red_led+=un_temp;
 8003624:	4413      	add	r3, r2
 8003626:	602b      	str	r3, [r5, #0]

	un_temp=(unsigned char) ach_i2c_data[3];
	un_temp<<=16;
	*pun_ir_led+=un_temp;
 8003628:	6823      	ldr	r3, [r4, #0]
	un_temp=(unsigned char) ach_i2c_data[3];
 800362a:	f89d 2013 	ldrb.w	r2, [sp, #19]
	*pun_ir_led+=un_temp;
 800362e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8003632:	6023      	str	r3, [r4, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
	un_temp<<=8;
	*pun_ir_led+=un_temp;
 8003634:	6823      	ldr	r3, [r4, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
 8003636:	f89d 2014 	ldrb.w	r2, [sp, #20]
	*pun_ir_led+=un_temp;
 800363a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800363e:	6023      	str	r3, [r4, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
	*pun_ir_led+=un_temp;
 8003640:	6822      	ldr	r2, [r4, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
 8003642:	f89d 3015 	ldrb.w	r3, [sp, #21]
	*pun_ir_led+=un_temp;
 8003646:	4413      	add	r3, r2
 8003648:	6023      	str	r3, [r4, #0]
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 800364a:	682b      	ldr	r3, [r5, #0]
 800364c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003650:	602b      	str	r3, [r5, #0]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003658:	6023      	str	r3, [r4, #0]

	return MAX30102_OK;
 800365a:	4638      	mov	r0, r7
}
 800365c:	b007      	add	sp, #28
 800365e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return MAX30102_ERROR;
 8003660:	4630      	mov	r0, r6
 8003662:	e7fb      	b.n	800365c <Max30102_ReadFifo+0x80>
 8003664:	20000df8 	.word	0x20000df8

08003668 <Max30102_SetIntAlmostFullEnabled>:
//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 8003668:	4602      	mov	r2, r0
 800366a:	2107      	movs	r1, #7
 800366c:	2002      	movs	r0, #2
 800366e:	f7ff bf95 	b.w	800359c <Max30102_WriteRegisterBit>

08003672 <Max30102_SetIntFifoDataReadyEnabled>:
}

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 8003672:	4602      	mov	r2, r0
 8003674:	2106      	movs	r1, #6
 8003676:	2002      	movs	r0, #2
 8003678:	f7ff bf90 	b.w	800359c <Max30102_WriteRegisterBit>

0800367c <Max30102_ReadInterruptStatus>:

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_2, INT_DIE_TEMP_RDY_BIT, Enable);
}
#endif
MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status)
{
 800367c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t tmp;
	*Status = 0;
 800367e:	2400      	movs	r4, #0
{
 8003680:	4605      	mov	r5, r0
	*Status = 0;
 8003682:	7004      	strb	r4, [r0, #0]

	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &tmp))
 8003684:	f10d 0107 	add.w	r1, sp, #7
 8003688:	4620      	mov	r0, r4
 800368a:	f7ff ff73 	bl	8003574 <Max30102_ReadReg>
 800368e:	2801      	cmp	r0, #1
		return MAX30102_ERROR;
	*Status |= tmp & 0xE1; // 3 highest bits
 8003690:	bf01      	itttt	eq
 8003692:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
 8003696:	782a      	ldrbeq	r2, [r5, #0]
 8003698:	f023 031e 	biceq.w	r3, r3, #30
 800369c:	4313      	orreq	r3, r2
		return MAX30102_ERROR;
 800369e:	bf14      	ite	ne
 80036a0:	4620      	movne	r0, r4
	*Status |= tmp & 0xE1; // 3 highest bits
 80036a2:	702b      	strbeq	r3, [r5, #0]
	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_2, &tmp))
		return MAX30102_ERROR;
	*Status |= tmp & 0x02;
#endif
	return MAX30102_OK;
}
 80036a4:	b003      	add	sp, #12
 80036a6:	bd30      	pop	{r4, r5, pc}

080036a8 <Max30102_InterruptCallback>:

void Max30102_InterruptCallback(void)
{
 80036a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t Status;
	while(MAX30102_OK != Max30102_ReadInterruptStatus(&Status));
 80036aa:	f10d 0007 	add.w	r0, sp, #7
 80036ae:	f7ff ffe5 	bl	800367c <Max30102_ReadInterruptStatus>
 80036b2:	2801      	cmp	r0, #1
 80036b4:	d1f9      	bne.n	80036aa <Max30102_InterruptCallback+0x2>

	// Almost Full FIFO Interrupt handle
	if(Status & (1<<INT_A_FULL_BIT))
 80036b6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db05      	blt.n	80036ca <Max30102_InterruptCallback+0x22>
			CollectedSamples++;
		}
	}

	// New FIFO Data Ready Interrupt handle
	if(Status & (1<<INT_PPG_RDY_BIT))
 80036be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036c2:	065b      	lsls	r3, r3, #25
 80036c4:	d436      	bmi.n	8003734 <Max30102_InterruptCallback+0x8c>
	if(Status & (1<<INT_DIE_TEMP_RDY_BIT))
	{

	}
#endif
}
 80036c6:	b003      	add	sp, #12
 80036c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 80036ca:	4d32      	ldr	r5, [pc, #200]	; (8003794 <Max30102_InterruptCallback+0xec>)
 80036cc:	4e32      	ldr	r6, [pc, #200]	; (8003798 <Max30102_InterruptCallback+0xf0>)
 80036ce:	2411      	movs	r4, #17
 80036d0:	462f      	mov	r7, r5
 80036d2:	6828      	ldr	r0, [r5, #0]
 80036d4:	4b31      	ldr	r3, [pc, #196]	; (800379c <Max30102_InterruptCallback+0xf4>)
 80036d6:	6829      	ldr	r1, [r5, #0]
 80036d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80036dc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80036e0:	f7ff ff7c 	bl	80035dc <Max30102_ReadFifo>
 80036e4:	2801      	cmp	r0, #1
 80036e6:	d1f4      	bne.n	80036d2 <Max30102_InterruptCallback+0x2a>
			if(IsFingerOnScreen)
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <Max30102_InterruptCallback+0xf8>)
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	b1d2      	cbz	r2, 8003724 <Max30102_InterruptCallback+0x7c>
				if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 80036ee:	682a      	ldr	r2, [r5, #0]
 80036f0:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
 80036f4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80036f8:	4291      	cmp	r1, r2
 80036fa:	d801      	bhi.n	8003700 <Max30102_InterruptCallback+0x58>
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003706:	3301      	adds	r3, #1
 8003708:	fbb3 f2f1 	udiv	r2, r3, r1
 800370c:	fb01 3312 	mls	r3, r1, r2, r3
			CollectedSamples++;
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <Max30102_InterruptCallback+0xfc>)
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8003712:	603b      	str	r3, [r7, #0]
			CollectedSamples++;
 8003714:	6813      	ldr	r3, [r2, #0]
 8003716:	3c01      	subs	r4, #1
 8003718:	3301      	adds	r3, #1
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 800371a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			CollectedSamples++;
 800371e:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8003720:	d1d7      	bne.n	80036d2 <Max30102_InterruptCallback+0x2a>
 8003722:	e7cc      	b.n	80036be <Max30102_InterruptCallback+0x16>
				if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8003724:	682a      	ldr	r2, [r5, #0]
 8003726:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800372a:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 800372e:	bf88      	it	hi
 8003730:	7018      	strbhi	r0, [r3, #0]
 8003732:	e7e5      	b.n	8003700 <Max30102_InterruptCallback+0x58>
		while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8003734:	4c17      	ldr	r4, [pc, #92]	; (8003794 <Max30102_InterruptCallback+0xec>)
 8003736:	4d18      	ldr	r5, [pc, #96]	; (8003798 <Max30102_InterruptCallback+0xf0>)
 8003738:	4626      	mov	r6, r4
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <Max30102_InterruptCallback+0xf4>)
 800373e:	6821      	ldr	r1, [r4, #0]
 8003740:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003744:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8003748:	f7ff ff48 	bl	80035dc <Max30102_ReadFifo>
 800374c:	2801      	cmp	r0, #1
 800374e:	d1f4      	bne.n	800373a <Max30102_InterruptCallback+0x92>
		if(IsFingerOnScreen)
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <Max30102_InterruptCallback+0xf8>)
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	b1b2      	cbz	r2, 8003784 <Max30102_InterruptCallback+0xdc>
			if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 800375c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003760:	4291      	cmp	r1, r2
 8003762:	d801      	bhi.n	8003768 <Max30102_InterruptCallback+0xc0>
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8003768:	6833      	ldr	r3, [r6, #0]
 800376a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800376e:	3301      	adds	r3, #1
 8003770:	fbb3 f2f1 	udiv	r2, r3, r1
 8003774:	fb01 3312 	mls	r3, r1, r2, r3
		CollectedSamples++;
 8003778:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <Max30102_InterruptCallback+0xfc>)
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 800377a:	6033      	str	r3, [r6, #0]
		CollectedSamples++;
 800377c:	6813      	ldr	r3, [r2, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	6013      	str	r3, [r2, #0]
}
 8003782:	e7a0      	b.n	80036c6 <Max30102_InterruptCallback+0x1e>
			if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800378a:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 800378e:	bf88      	it	hi
 8003790:	7018      	strbhi	r0, [r3, #0]
 8003792:	e7e9      	b.n	8003768 <Max30102_InterruptCallback+0xc0>
 8003794:	20000e00 	.word	0x20000e00
 8003798:	20000e08 	.word	0x20000e08
 800379c:	200012c0 	.word	0x200012c0
 80037a0:	20000dfd 	.word	0x20000dfd
 80037a4:	20000df4 	.word	0x20000df4

080037a8 <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 80037a8:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR,(Address & 0x1F)))  //FIFO_WR_PTR[4:0]
 80037aa:	f000 011f 	and.w	r1, r0, #31
 80037ae:	2004      	movs	r0, #4
 80037b0:	f7ff feca 	bl	8003548 <Max30102_WriteReg>
			return MAX30102_ERROR;
	return MAX30102_OK;
}
 80037b4:	1e43      	subs	r3, r0, #1
 80037b6:	4258      	negs	r0, r3
 80037b8:	4158      	adcs	r0, r3
 80037ba:	bd08      	pop	{r3, pc}

080037bc <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 80037bc:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER,(Address & 0x1F)))  //OVF_COUNTER[4:0]
 80037be:	f000 011f 	and.w	r1, r0, #31
 80037c2:	2005      	movs	r0, #5
 80037c4:	f7ff fec0 	bl	8003548 <Max30102_WriteReg>
			return MAX30102_ERROR;
	return MAX30102_OK;
}
 80037c8:	1e43      	subs	r3, r0, #1
 80037ca:	4258      	negs	r0, r3
 80037cc:	4158      	adcs	r0, r3
 80037ce:	bd08      	pop	{r3, pc}

080037d0 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 80037d0:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR,(Address & 0x1F)))  //FIFO_RD_PTR[4:0]
 80037d2:	f000 011f 	and.w	r1, r0, #31
 80037d6:	2006      	movs	r0, #6
 80037d8:	f7ff feb6 	bl	8003548 <Max30102_WriteReg>
			return MAX30102_ERROR;
	return MAX30102_OK;
}
 80037dc:	1e43      	subs	r3, r0, #1
 80037de:	4258      	negs	r0, r3
 80037e0:	4158      	adcs	r0, r3
 80037e2:	bd08      	pop	{r3, pc}

080037e4 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 80037e4:	b513      	push	{r0, r1, r4, lr}
 80037e6:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 80037e8:	f10d 0107 	add.w	r1, sp, #7
 80037ec:	2008      	movs	r0, #8
 80037ee:	f7ff fec1 	bl	8003574 <Max30102_ReadReg>
 80037f2:	2801      	cmp	r0, #1
 80037f4:	d110      	bne.n	8003818 <Max30102_FifoSampleAveraging+0x34>
		return MAX30102_ERROR;
	tmp &= ~(0x07);
 80037f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80037fa:	f021 0107 	bic.w	r1, r1, #7
	tmp |= (Value&0x07)<<5;
 80037fe:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8003802:	b2c9      	uxtb	r1, r1
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8003804:	2008      	movs	r0, #8
	tmp |= (Value&0x07)<<5;
 8003806:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 800380a:	f7ff fe9d 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
 800380e:	1e43      	subs	r3, r0, #1
 8003810:	4258      	negs	r0, r3
 8003812:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8003814:	b002      	add	sp, #8
 8003816:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8003818:	2000      	movs	r0, #0
 800381a:	e7fb      	b.n	8003814 <Max30102_FifoSampleAveraging+0x30>

0800381c <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 800381c:	f000 0201 	and.w	r2, r0, #1
 8003820:	2104      	movs	r1, #4
 8003822:	2008      	movs	r0, #8
 8003824:	f7ff beba 	b.w	800359c <Max30102_WriteRegisterBit>

08003828 <Max30102_FifoAlmostFullValue>:
}

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 8003828:	b513      	push	{r0, r1, r4, lr}
 800382a:	4604      	mov	r4, r0
	if(Value < 17) Value = 17;
	if(Value > 32) Value = 32;
	Value = 32 - Value;
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 800382c:	f10d 0107 	add.w	r1, sp, #7
 8003830:	2008      	movs	r0, #8
 8003832:	f7ff fe9f 	bl	8003574 <Max30102_ReadReg>
 8003836:	2801      	cmp	r0, #1
 8003838:	d117      	bne.n	800386a <Max30102_FifoAlmostFullValue+0x42>
 800383a:	2c20      	cmp	r4, #32
 800383c:	bf28      	it	cs
 800383e:	2420      	movcs	r4, #32
 8003840:	2c11      	cmp	r4, #17
		return MAX30102_ERROR;
	tmp &= ~(0x0F);
 8003842:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003846:	bf38      	it	cc
 8003848:	2411      	movcc	r4, #17
 800384a:	f021 010f 	bic.w	r1, r1, #15
	Value = 32 - Value;
 800384e:	f1c4 0420 	rsb	r4, r4, #32
	tmp |= (Value & 0x0F);
 8003852:	4321      	orrs	r1, r4
 8003854:	b2c9      	uxtb	r1, r1
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8003856:	2008      	movs	r0, #8
	tmp |= (Value & 0x0F);
 8003858:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 800385c:	f7ff fe74 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
 8003860:	1e43      	subs	r3, r0, #1
 8003862:	4258      	negs	r0, r3
 8003864:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8003866:	b002      	add	sp, #8
 8003868:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 800386a:	2000      	movs	r0, #0
 800386c:	e7fb      	b.n	8003866 <Max30102_FifoAlmostFullValue+0x3e>

0800386e <Max30102_Reset>:
{
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT, (Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void)
{
 800386e:	b507      	push	{r0, r1, r2, lr}
	uint8_t tmp = 0xFF;
 8003870:	23ff      	movs	r3, #255	; 0xff
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 8003872:	2140      	movs	r1, #64	; 0x40
 8003874:	2009      	movs	r0, #9
	uint8_t tmp = 0xFF;
 8003876:	f88d 3007 	strb.w	r3, [sp, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 800387a:	f7ff fe65 	bl	8003548 <Max30102_WriteReg>
 800387e:	2801      	cmp	r0, #1
 8003880:	d003      	beq.n	800388a <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 8003882:	2000      	movs	r0, #0
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
    		return MAX30102_ERROR;
    } while(tmp & (1<<6));

    return MAX30102_OK;
}
 8003884:	b003      	add	sp, #12
 8003886:	f85d fb04 	ldr.w	pc, [sp], #4
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 800388a:	f10d 0107 	add.w	r1, sp, #7
 800388e:	2009      	movs	r0, #9
 8003890:	f7ff fe70 	bl	8003574 <Max30102_ReadReg>
 8003894:	2801      	cmp	r0, #1
 8003896:	d1f4      	bne.n	8003882 <Max30102_Reset+0x14>
    } while(tmp & (1<<6));
 8003898:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800389c:	065b      	lsls	r3, r3, #25
 800389e:	d4f4      	bmi.n	800388a <Max30102_Reset+0x1c>
 80038a0:	e7f0      	b.n	8003884 <Max30102_Reset+0x16>

080038a2 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 80038a2:	b513      	push	{r0, r1, r4, lr}
 80038a4:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 80038a6:	f10d 0107 	add.w	r1, sp, #7
 80038aa:	2009      	movs	r0, #9
 80038ac:	f7ff fe62 	bl	8003574 <Max30102_ReadReg>
 80038b0:	2801      	cmp	r0, #1
 80038b2:	d110      	bne.n	80038d6 <Max30102_SetMode+0x34>
		return MAX30102_ERROR;
	tmp &= ~(0x07);
 80038b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
	tmp |= (Mode & 0x07);
 80038b8:	f004 0407 	and.w	r4, r4, #7
	tmp &= ~(0x07);
 80038bc:	f021 0107 	bic.w	r1, r1, #7
	tmp |= (Mode & 0x07);
 80038c0:	4321      	orrs	r1, r4
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 80038c2:	2009      	movs	r0, #9
	tmp |= (Mode & 0x07);
 80038c4:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 80038c8:	f7ff fe3e 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
 80038cc:	1e43      	subs	r3, r0, #1
 80038ce:	4258      	negs	r0, r3
 80038d0:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 80038d2:	b002      	add	sp, #8
 80038d4:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 80038d6:	2000      	movs	r0, #0
 80038d8:	e7fb      	b.n	80038d2 <Max30102_SetMode+0x30>

080038da <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 80038da:	b513      	push	{r0, r1, r4, lr}
 80038dc:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80038de:	f10d 0107 	add.w	r1, sp, #7
 80038e2:	200a      	movs	r0, #10
 80038e4:	f7ff fe46 	bl	8003574 <Max30102_ReadReg>
 80038e8:	2801      	cmp	r0, #1
 80038ea:	d111      	bne.n	8003910 <Max30102_SpO2AdcRange+0x36>
		return MAX30102_ERROR;
	tmp &= ~(0x03);
 80038ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
	tmp |= ((Value & 0x03) << 5);
 80038f0:	0161      	lsls	r1, r4, #5
	tmp &= ~(0x03);
 80038f2:	f023 0303 	bic.w	r3, r3, #3
	tmp |= ((Value & 0x03) << 5);
 80038f6:	f001 0160 	and.w	r1, r1, #96	; 0x60
 80038fa:	4319      	orrs	r1, r3
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80038fc:	200a      	movs	r0, #10
	tmp |= ((Value & 0x03) << 5);
 80038fe:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8003902:	f7ff fe21 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
 8003906:	1e43      	subs	r3, r0, #1
 8003908:	4258      	negs	r0, r3
 800390a:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 800390c:	b002      	add	sp, #8
 800390e:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8003910:	2000      	movs	r0, #0
 8003912:	e7fb      	b.n	800390c <Max30102_SpO2AdcRange+0x32>

08003914 <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 8003914:	b513      	push	{r0, r1, r4, lr}
 8003916:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8003918:	f10d 0107 	add.w	r1, sp, #7
 800391c:	200a      	movs	r0, #10
 800391e:	f7ff fe29 	bl	8003574 <Max30102_ReadReg>
 8003922:	2801      	cmp	r0, #1
 8003924:	d111      	bne.n	800394a <Max30102_SpO2SampleRate+0x36>
		return MAX30102_ERROR;
	tmp &= ~(0x07);
 8003926:	f89d 3007 	ldrb.w	r3, [sp, #7]
	tmp |= ((Value & 0x07) << 2);
 800392a:	00a1      	lsls	r1, r4, #2
	tmp &= ~(0x07);
 800392c:	f023 0307 	bic.w	r3, r3, #7
	tmp |= ((Value & 0x07) << 2);
 8003930:	f001 011c 	and.w	r1, r1, #28
 8003934:	4319      	orrs	r1, r3
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8003936:	200a      	movs	r0, #10
	tmp |= ((Value & 0x07) << 2);
 8003938:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 800393c:	f7ff fe04 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
 8003940:	1e43      	subs	r3, r0, #1
 8003942:	4258      	negs	r0, r3
 8003944:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8003946:	b002      	add	sp, #8
 8003948:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 800394a:	2000      	movs	r0, #0
 800394c:	e7fb      	b.n	8003946 <Max30102_SpO2SampleRate+0x32>

0800394e <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 800394e:	b513      	push	{r0, r1, r4, lr}
 8003950:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8003952:	f10d 0107 	add.w	r1, sp, #7
 8003956:	200a      	movs	r0, #10
 8003958:	f7ff fe0c 	bl	8003574 <Max30102_ReadReg>
 800395c:	2801      	cmp	r0, #1
 800395e:	d110      	bne.n	8003982 <Max30102_SpO2LedPulseWidth+0x34>
		return MAX30102_ERROR;
	tmp &= ~(0x03);
 8003960:	f89d 1007 	ldrb.w	r1, [sp, #7]
	tmp |= (Value & 0x03);
 8003964:	f004 0403 	and.w	r4, r4, #3
	tmp &= ~(0x03);
 8003968:	f021 0103 	bic.w	r1, r1, #3
	tmp |= (Value & 0x03);
 800396c:	4321      	orrs	r1, r4
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 800396e:	200a      	movs	r0, #10
	tmp |= (Value & 0x03);
 8003970:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8003974:	f7ff fde8 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
 8003978:	1e43      	subs	r3, r0, #1
 800397a:	4258      	negs	r0, r3
 800397c:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 800397e:	b002      	add	sp, #8
 8003980:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8003982:	2000      	movs	r0, #0
 8003984:	e7fb      	b.n	800397e <Max30102_SpO2LedPulseWidth+0x30>

08003986 <Max30102_Led1PulseAmplitude>:
//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 8003986:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 8003988:	4601      	mov	r1, r0
 800398a:	200c      	movs	r0, #12
 800398c:	f7ff fddc 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
	return MAX30102_OK;
}
 8003990:	1e43      	subs	r3, r0, #1
 8003992:	4258      	negs	r0, r3
 8003994:	4158      	adcs	r0, r3
 8003996:	bd08      	pop	{r3, pc}

08003998 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 8003998:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 800399a:	4601      	mov	r1, r0
 800399c:	200d      	movs	r0, #13
 800399e:	f7ff fdd3 	bl	8003548 <Max30102_WriteReg>
		return MAX30102_ERROR;
	return MAX30102_OK;
}
 80039a2:	1e43      	subs	r3, r0, #1
 80039a4:	4258      	negs	r0, r3
 80039a6:	4158      	adcs	r0, r3
 80039a8:	bd08      	pop	{r3, pc}
	...

080039ac <Max30102_GetHeartRate>:
}

int32_t Max30102_GetHeartRate(void)
{
	return HeartRate;
}
 80039ac:	4b01      	ldr	r3, [pc, #4]	; (80039b4 <Max30102_GetHeartRate+0x8>)
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000e04 	.word	0x20000e04

080039b8 <Max30102_Task>:
{
	return Sp02Value;
}

void Max30102_Task(void)
{
 80039b8:	b530      	push	{r4, r5, lr}
	switch(StateMachine)
 80039ba:	4c2e      	ldr	r4, [pc, #184]	; (8003a74 <Max30102_Task+0xbc>)
 80039bc:	7823      	ldrb	r3, [r4, #0]
{
 80039be:	b085      	sub	sp, #20
	switch(StateMachine)
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d819      	bhi.n	80039f8 <Max30102_Task+0x40>
 80039c4:	e8df f003 	tbb	[pc, r3]
 80039c8:	4d2b1a02 	.word	0x4d2b1a02
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 80039cc:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <Max30102_Task+0xc0>)
 80039ce:	2300      	movs	r3, #0
 80039d0:	6013      	str	r3, [r2, #0]
			Sp02Value = 0;
 80039d2:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <Max30102_Task+0xc4>)
 80039d4:	6013      	str	r3, [r2, #0]
			if(IsFingerOnScreen)
 80039d6:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <Max30102_Task+0xc8>)
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	b16a      	cbz	r2, 80039f8 <Max30102_Task+0x40>
			{
				CollectedSamples = 0;
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <Max30102_Task+0xcc>)
 80039de:	6013      	str	r3, [r2, #0]
				BufferTail = BufferHead;
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <Max30102_Task+0xd0>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <Max30102_Task+0xd4>)
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 80039e6:	2024      	movs	r0, #36	; 0x24
				BufferTail = BufferHead;
 80039e8:	601a      	str	r2, [r3, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 80039ea:	f7ff ffcc 	bl	8003986 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 80039ee:	2024      	movs	r0, #36	; 0x24
 80039f0:	f7ff ffd2 	bl	8003998 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 80039f4:	2301      	movs	r3, #1
			if(IsFingerOnScreen)
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
				CollectedSamples = 0;
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 80039f6:	7023      	strb	r3, [r4, #0]
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
	}
}
 80039f8:	b005      	add	sp, #20
 80039fa:	bd30      	pop	{r4, r5, pc}
				if(IsFingerOnScreen)
 80039fc:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <Max30102_Task+0xc8>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b12b      	cbz	r3, 8003a0e <Max30102_Task+0x56>
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <Max30102_Task+0xcc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2bfa      	cmp	r3, #250	; 0xfa
 8003a08:	d9f6      	bls.n	80039f8 <Max30102_Task+0x40>
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e7f3      	b.n	80039f6 <Max30102_Task+0x3e>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f7ff ffb9 	bl	8003986 <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8003a14:	2001      	movs	r0, #1
 8003a16:	f7ff ffbf 	bl	8003998 <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e7eb      	b.n	80039f6 <Max30102_Task+0x3e>
			if(IsFingerOnScreen)
 8003a1e:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <Max30102_Task+0xc8>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f3      	beq.n	8003a0e <Max30102_Task+0x56>
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8003a26:	4d19      	ldr	r5, [pc, #100]	; (8003a8c <Max30102_Task+0xd4>)
 8003a28:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <Max30102_Task+0xd8>)
 8003a2a:	9203      	str	r2, [sp, #12]
 8003a2c:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <Max30102_Task+0xc0>)
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	9202      	str	r2, [sp, #8]
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <Max30102_Task+0xdc>)
 8003a34:	9201      	str	r2, [sp, #4]
 8003a36:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <Max30102_Task+0xc4>)
 8003a38:	9200      	str	r2, [sp, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	22fa      	movs	r2, #250	; 0xfa
 8003a3e:	4916      	ldr	r1, [pc, #88]	; (8003a98 <Max30102_Task+0xe0>)
 8003a40:	4816      	ldr	r0, [pc, #88]	; (8003a9c <Max30102_Task+0xe4>)
 8003a42:	f000 fb91 	bl	8004168 <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8003a46:	682b      	ldr	r3, [r5, #0]
 8003a48:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	fbb3 f2f1 	udiv	r2, r3, r1
 8003a52:	fb01 3312 	mls	r3, r1, r2, r3
 8003a56:	602b      	str	r3, [r5, #0]
				CollectedSamples = 0;
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <Max30102_Task+0xcc>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e7c9      	b.n	80039f6 <Max30102_Task+0x3e>
			if(IsFingerOnScreen)
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <Max30102_Task+0xc8>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0d1      	beq.n	8003a0e <Max30102_Task+0x56>
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <Max30102_Task+0xcc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b32      	cmp	r3, #50	; 0x32
 8003a70:	e7ca      	b.n	8003a08 <Max30102_Task+0x50>
 8003a72:	bf00      	nop
 8003a74:	20000dfc 	.word	0x20000dfc
 8003a78:	20000e04 	.word	0x20000e04
 8003a7c:	20001774 	.word	0x20001774
 8003a80:	20000dfd 	.word	0x20000dfd
 8003a84:	20000df4 	.word	0x20000df4
 8003a88:	20000e00 	.word	0x20000e00
 8003a8c:	200012bc 	.word	0x200012bc
 8003a90:	20001770 	.word	0x20001770
 8003a94:	200012b8 	.word	0x200012b8
 8003a98:	200012c0 	.word	0x200012c0
 8003a9c:	20000e08 	.word	0x20000e08

08003aa0 <Max30102_Init>:
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8003aa0:	4b3c      	ldr	r3, [pc, #240]	; (8003b94 <Max30102_Init+0xf4>)
{
 8003aa2:	b513      	push	{r0, r1, r4, lr}
	i2c_max30102 = i2c;
 8003aa4:	6018      	str	r0, [r3, #0]
	if(MAX30102_OK != Max30102_Reset()) {
 8003aa6:	f7ff fee2 	bl	800386e <Max30102_Reset>
 8003aaa:	2801      	cmp	r0, #1
 8003aac:	d005      	beq.n	8003aba <Max30102_Init+0x1a>
		printf("Max30102_Reset\n");
 8003aae:	483a      	ldr	r0, [pc, #232]	; (8003b98 <Max30102_Init+0xf8>)
		return MAX30102_ERROR;
	}
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy)){
		printf("Max30102_ReadReg\n");
 8003ab0:	f002 fdb8 	bl	8006624 <puts>
		return MAX30102_ERROR;
 8003ab4:	2000      	movs	r0, #0

//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
	return MAX30102_OK;
}
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd10      	pop	{r4, pc}
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy)){
 8003aba:	f10d 0107 	add.w	r1, sp, #7
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f7ff fd58 	bl	8003574 <Max30102_ReadReg>
 8003ac4:	2801      	cmp	r0, #1
 8003ac6:	d001      	beq.n	8003acc <Max30102_Init+0x2c>
		printf("Max30102_ReadReg\n");
 8003ac8:	4834      	ldr	r0, [pc, #208]	; (8003b9c <Max30102_Init+0xfc>)
 8003aca:	e7f1      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_FifoWritePointer(0x00)){
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7ff fe6b 	bl	80037a8 <Max30102_FifoWritePointer>
 8003ad2:	2801      	cmp	r0, #1
 8003ad4:	d001      	beq.n	8003ada <Max30102_Init+0x3a>
		printf("Max30102_FifoWritePointer\n");
 8003ad6:	4832      	ldr	r0, [pc, #200]	; (8003ba0 <Max30102_Init+0x100>)
 8003ad8:	e7ea      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00)){
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7ff fe6e 	bl	80037bc <Max30102_FifoOverflowCounter>
 8003ae0:	2801      	cmp	r0, #1
 8003ae2:	d001      	beq.n	8003ae8 <Max30102_Init+0x48>
		printf("Max30102_FifoOverflowCounter\n");
 8003ae4:	482f      	ldr	r0, [pc, #188]	; (8003ba4 <Max30102_Init+0x104>)
 8003ae6:	e7e3      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_FifoReadPointer(0x00)){
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7ff fe71 	bl	80037d0 <Max30102_FifoReadPointer>
 8003aee:	2801      	cmp	r0, #1
 8003af0:	d001      	beq.n	8003af6 <Max30102_Init+0x56>
		printf("Max30102_FifoReadPointer\n");
 8003af2:	482d      	ldr	r0, [pc, #180]	; (8003ba8 <Max30102_Init+0x108>)
 8003af4:	e7dc      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1)){
 8003af6:	2000      	movs	r0, #0
 8003af8:	f7ff fe74 	bl	80037e4 <Max30102_FifoSampleAveraging>
 8003afc:	2801      	cmp	r0, #1
 8003afe:	d001      	beq.n	8003b04 <Max30102_Init+0x64>
		printf("Max30102_FifoSampleAveraging\n");
 8003b00:	482a      	ldr	r0, [pc, #168]	; (8003bac <Max30102_Init+0x10c>)
 8003b02:	e7d5      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_FifoRolloverEnable(0)){
 8003b04:	2000      	movs	r0, #0
 8003b06:	f7ff fe89 	bl	800381c <Max30102_FifoRolloverEnable>
 8003b0a:	2801      	cmp	r0, #1
 8003b0c:	d001      	beq.n	8003b12 <Max30102_Init+0x72>
		printf("Max30102_FifoRolloverEnable\n");
 8003b0e:	4828      	ldr	r0, [pc, #160]	; (8003bb0 <Max30102_Init+0x110>)
 8003b10:	e7ce      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES)){
 8003b12:	2011      	movs	r0, #17
 8003b14:	f7ff fe88 	bl	8003828 <Max30102_FifoAlmostFullValue>
 8003b18:	2801      	cmp	r0, #1
 8003b1a:	d001      	beq.n	8003b20 <Max30102_Init+0x80>
		printf("Max30102_FifoAlmostFullValue\n");
 8003b1c:	4825      	ldr	r0, [pc, #148]	; (8003bb4 <Max30102_Init+0x114>)
 8003b1e:	e7c7      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE)){
 8003b20:	2003      	movs	r0, #3
 8003b22:	f7ff febe 	bl	80038a2 <Max30102_SetMode>
 8003b26:	2801      	cmp	r0, #1
 8003b28:	d001      	beq.n	8003b2e <Max30102_Init+0x8e>
		printf("Max30102_SetMode\n");
 8003b2a:	4823      	ldr	r0, [pc, #140]	; (8003bb8 <Max30102_Init+0x118>)
 8003b2c:	e7c0      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096)){
 8003b2e:	f7ff fed4 	bl	80038da <Max30102_SpO2AdcRange>
 8003b32:	2801      	cmp	r0, #1
 8003b34:	d001      	beq.n	8003b3a <Max30102_Init+0x9a>
		printf("Max30102_SpO2AdcRange\n");
 8003b36:	4821      	ldr	r0, [pc, #132]	; (8003bbc <Max30102_Init+0x11c>)
 8003b38:	e7ba      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE)){
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7ff feea 	bl	8003914 <Max30102_SpO2SampleRate>
 8003b40:	2801      	cmp	r0, #1
 8003b42:	d001      	beq.n	8003b48 <Max30102_Init+0xa8>
		printf("Max30102_SpO2SampleRate\n");
 8003b44:	481e      	ldr	r0, [pc, #120]	; (8003bc0 <Max30102_Init+0x120>)
 8003b46:	e7b3      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411)){
 8003b48:	2003      	movs	r0, #3
 8003b4a:	f7ff ff00 	bl	800394e <Max30102_SpO2LedPulseWidth>
 8003b4e:	2801      	cmp	r0, #1
 8003b50:	d001      	beq.n	8003b56 <Max30102_Init+0xb6>
		printf("Max30102_SpO2LedPulseWidth\n");
 8003b52:	481c      	ldr	r0, [pc, #112]	; (8003bc4 <Max30102_Init+0x124>)
 8003b54:	e7ac      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW)){
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7ff ff15 	bl	8003986 <Max30102_Led1PulseAmplitude>
 8003b5c:	2801      	cmp	r0, #1
 8003b5e:	d001      	beq.n	8003b64 <Max30102_Init+0xc4>
		printf("Max30102_Led1PulseAmplitude\n");
 8003b60:	4819      	ldr	r0, [pc, #100]	; (8003bc8 <Max30102_Init+0x128>)
 8003b62:	e7a5      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW)){
 8003b64:	f7ff ff18 	bl	8003998 <Max30102_Led2PulseAmplitude>
 8003b68:	2801      	cmp	r0, #1
 8003b6a:	d001      	beq.n	8003b70 <Max30102_Init+0xd0>
		printf("Max30102_Led2PulseAmplitude\n");
 8003b6c:	4817      	ldr	r0, [pc, #92]	; (8003bcc <Max30102_Init+0x12c>)
 8003b6e:	e79f      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1)){
 8003b70:	f7ff fd7a 	bl	8003668 <Max30102_SetIntAlmostFullEnabled>
 8003b74:	2801      	cmp	r0, #1
 8003b76:	d001      	beq.n	8003b7c <Max30102_Init+0xdc>
		printf("Max30102_SetIntAlmostFullEnabled\n");
 8003b78:	4815      	ldr	r0, [pc, #84]	; (8003bd0 <Max30102_Init+0x130>)
 8003b7a:	e799      	b.n	8003ab0 <Max30102_Init+0x10>
	if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1)){
 8003b7c:	f7ff fd79 	bl	8003672 <Max30102_SetIntFifoDataReadyEnabled>
 8003b80:	2801      	cmp	r0, #1
 8003b82:	f04f 0400 	mov.w	r4, #0
 8003b86:	d001      	beq.n	8003b8c <Max30102_Init+0xec>
		printf("Max30102_SetIntFifoDataReadyEnabled\n");
 8003b88:	4812      	ldr	r0, [pc, #72]	; (8003bd4 <Max30102_Init+0x134>)
 8003b8a:	e791      	b.n	8003ab0 <Max30102_Init+0x10>
	StateMachine = MAX30102_STATE_BEGIN;
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <Max30102_Init+0x138>)
 8003b8e:	701c      	strb	r4, [r3, #0]
	return MAX30102_OK;
 8003b90:	e791      	b.n	8003ab6 <Max30102_Init+0x16>
 8003b92:	bf00      	nop
 8003b94:	20000df8 	.word	0x20000df8
 8003b98:	08008f88 	.word	0x08008f88
 8003b9c:	08008f97 	.word	0x08008f97
 8003ba0:	08008fa8 	.word	0x08008fa8
 8003ba4:	08008fc2 	.word	0x08008fc2
 8003ba8:	08008fdf 	.word	0x08008fdf
 8003bac:	08008ff8 	.word	0x08008ff8
 8003bb0:	08009015 	.word	0x08009015
 8003bb4:	08009031 	.word	0x08009031
 8003bb8:	0800904e 	.word	0x0800904e
 8003bbc:	0800905f 	.word	0x0800905f
 8003bc0:	08009075 	.word	0x08009075
 8003bc4:	0800908d 	.word	0x0800908d
 8003bc8:	080090a8 	.word	0x080090a8
 8003bcc:	080090c4 	.word	0x080090c4
 8003bd0:	080090e0 	.word	0x080090e0
 8003bd4:	08009101 	.word	0x08009101
 8003bd8:	20000dfc 	.word	0x20000dfc

08003bdc <MPU9250_Init>:
#define YA_OFFSET_L         0x7B
#define ZA_OFFSET_H         0x7D
#define ZA_OFFSET_L         0x7E


MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250, MPU9250_Device_t dev) {
 8003bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003bde:	460c      	mov	r4, r1
    uint8_t data, rawData[3];

    /* Set values */
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8003be0:	2318      	movs	r3, #24
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 8003be2:	f042 01d0 	orr.w	r1, r2, #208	; 0xd0

    /* Check who I am */
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 8003be6:	2601      	movs	r6, #1
    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8003be8:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 8003bec:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 8003bf0:	f10d 030b 	add.w	r3, sp, #11
 8003bf4:	9600      	str	r6, [sp, #0]
 8003bf6:	2275      	movs	r2, #117	; 0x75
MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250, MPU9250_Device_t dev) {
 8003bf8:	4605      	mov	r5, r0
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 8003bfa:	f001 fa77 	bl	80050ec <I2C_ReadMulti>

    if (data != 0x71) { //modified from 0x71 to 0x73
 8003bfe:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003c02:	2b71      	cmp	r3, #113	; 0x71
 8003c04:	f040 80f0 	bne.w	8003de8 <MPU9250_Init+0x20c>
        return MPU9250_Result_DeviceNotConnected;
    }

    // wake up device
		I2C_Write(hi2c, MPU9250->I2C_Addr, PWR_MGMT_1, 0x00);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	226b      	movs	r2, #107	; 0x6b
 8003c0c:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003c10:	4628      	mov	r0, r5
 8003c12:	f001 fa57 	bl	80050c4 <I2C_Write>
    //Delayms(100); // Wait for all registers to reset
	HAL_Delay(100);
 8003c16:	2064      	movs	r0, #100	; 0x64
 8003c18:	f001 fd96 	bl	8005748 <HAL_Delay>

    // get stable time source
    I2C_Write(hi2c, MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8003c1c:	4633      	mov	r3, r6
 8003c1e:	226b      	movs	r2, #107	; 0x6b
 8003c20:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003c24:	4628      	mov	r0, r5
 8003c26:	f001 fa4d 	bl	80050c4 <I2C_Write>
    HAL_Delay(200);
 8003c2a:	20c8      	movs	r0, #200	; 0xc8
 8003c2c:	f001 fd8c 	bl	8005748 <HAL_Delay>
    // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
    // minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
    // be higher than 1 / 0.0059 = 170 Hz
    // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
    // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
    I2C_Write(hi2c, MPU9250->I2C_Addr, CONFIG, 0x04);
 8003c30:	2304      	movs	r3, #4
 8003c32:	221a      	movs	r2, #26
 8003c34:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f001 fa43 	bl	80050c4 <I2C_Write>
    // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
    I2C_Write(hi2c, MPU9250->I2C_Addr, SMPLRT_DIV, 0x00);  // Use a 1000 Hz rate; a rate consistent with the filter update rate
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2219      	movs	r2, #25
 8003c42:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003c46:	4628      	mov	r0, r5
 8003c48:	f001 fa3c 	bl	80050c4 <I2C_Write>
                            // determined inset in CONFIG above

    // Set gyroscope full scale range
    // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, &data, 1); // get current GYRO_CONFIG register value
 8003c4c:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003c50:	9600      	str	r6, [sp, #0]
 8003c52:	f10d 030b 	add.w	r3, sp, #11
 8003c56:	221b      	movs	r2, #27
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f001 fa47 	bl	80050ec <I2C_ReadMulti>
    // c = c & ~0xE0; // Clear self-test bits [7:5]
    data &= ~0x02; // Clear Fchoice bits [1:0]
    data &= ~0x18; // Clear AFS bits [4:3]
 8003c5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
		/**************************************/
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
		/**************************************/

    // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8003c62:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x18; // Clear AFS bits [4:3]
 8003c66:	f023 031a 	bic.w	r3, r3, #26
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
 8003c6a:	f043 0318 	orr.w	r3, r3, #24
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8003c6e:	221b      	movs	r2, #27
 8003c70:	4628      	mov	r0, r5
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
 8003c72:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8003c76:	f001 fa25 	bl	80050c4 <I2C_Write>

    // Set accelerometer full-scale range configuration
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, &data, 1); // get current ACCEL_CONFIG register value
 8003c7a:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003c7e:	9600      	str	r6, [sp, #0]
 8003c80:	f10d 030b 	add.w	r3, sp, #11
 8003c84:	221c      	movs	r2, #28
 8003c86:	4628      	mov	r0, r5
 8003c88:	f001 fa30 	bl	80050ec <I2C_ReadMulti>
    // c = c & ~0xE0; // Clear self-test bits [7:5]
    data &= ~0x18;  // Clear AFS bits [4:3]
 8003c8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    data |= 0x00 << 3; // Set full scale range for the accelerometer
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8003c90:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x18;  // Clear AFS bits [4:3]
 8003c94:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8003c98:	221c      	movs	r2, #28
 8003c9a:	4628      	mov	r0, r5
    data &= ~0x18;  // Clear AFS bits [4:3]
 8003c9c:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8003ca0:	f001 fa10 	bl	80050c4 <I2C_Write>

    // Set accelerometer sample rate configuration
    // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
    // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, &data, 1); // get current ACCEL_CONFIG2 register value
 8003ca4:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003ca8:	9600      	str	r6, [sp, #0]
 8003caa:	f10d 030b 	add.w	r3, sp, #11
 8003cae:	221d      	movs	r2, #29
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f001 fa1b 	bl	80050ec <I2C_ReadMulti>
    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8003cb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8003cba:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8003cbe:	f023 030f 	bic.w	r3, r3, #15
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003cc2:	f043 0303 	orr.w	r3, r3, #3
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8003cc6:	221d      	movs	r2, #29
 8003cc8:	4628      	mov	r0, r5
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003cca:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8003cce:	f001 f9f9 	bl	80050c4 <I2C_Write>

    // Configure Interrupts and Bypass Enable
    // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
    // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
    // can join the I2C bus and all can be controlled by the Arduino as master
    I2C_Write(hi2c, MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 8003cd2:	2322      	movs	r3, #34	; 0x22
 8003cd4:	2237      	movs	r2, #55	; 0x37
 8003cd6:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f001 f9f2 	bl	80050c4 <I2C_Write>
    I2C_Write(hi2c, MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 8003ce0:	4633      	mov	r3, r6
 8003ce2:	2238      	movs	r2, #56	; 0x38
 8003ce4:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f001 f9eb 	bl	80050c4 <I2C_Write>

    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 8003cee:	2300      	movs	r3, #0
 8003cf0:	220a      	movs	r2, #10
 8003cf2:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f001 f9e4 	bl	80050c4 <I2C_Write>
    //Delayms(10);
    HAL_Delay(10);
 8003cfc:	200a      	movs	r0, #10
 8003cfe:	f001 fd23 	bl	8005748 <HAL_Delay>
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8003d02:	230f      	movs	r3, #15
 8003d04:	220a      	movs	r2, #10
 8003d06:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f001 f9da 	bl	80050c4 <I2C_Write>
    //Delayms(10);
    HAL_Delay(10);
 8003d10:	200a      	movs	r0, #10
 8003d12:	f001 fd19 	bl	8005748 <HAL_Delay>

		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ASAX, &rawData[0], 3);
 8003d16:	2303      	movs	r3, #3
 8003d18:	2210      	movs	r2, #16
 8003d1a:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4628      	mov	r0, r5
 8003d22:	ab03      	add	r3, sp, #12
 8003d24:	f001 f9e2 	bl	80050ec <I2C_ReadMulti>
		//I2C_Read(hi2c, AK8963_ASTC, AK8963_ASAY, &rawData[1]);
		//I2C_Read(hi2c, AK8963_ASTC, AK8963_ASAZ, &rawData[2]);

		MPU9250->magCalibrationX =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8003d28:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003d2c:	3880      	subs	r0, #128	; 0x80
 8003d2e:	ee07 0a90 	vmov	s15, r0
 8003d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d36:	ee17 0a90 	vmov	r0, s15
 8003d3a:	f7fc fc05 	bl	8000548 <__aeabi_f2d>
 8003d3e:	2200      	movs	r2, #0
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <MPU9250_Init+0x210>)
 8003d42:	f7fc fc55 	bl	80005f0 <__aeabi_dmul>
 8003d46:	2200      	movs	r2, #0
 8003d48:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <MPU9250_Init+0x214>)
 8003d4a:	f7fc fa9f 	bl	800028c <__adddf3>
 8003d4e:	f7fc ff27 	bl	8000ba0 <__aeabi_d2f>
 8003d52:	6460      	str	r0, [r4, #68]	; 0x44
		MPU9250->magCalibrationY =  (float)(rawData[1] - 128)/256. + 1.;
 8003d54:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8003d58:	3880      	subs	r0, #128	; 0x80
 8003d5a:	ee07 0a90 	vmov	s15, r0
 8003d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d62:	ee17 0a90 	vmov	r0, s15
 8003d66:	f7fc fbef 	bl	8000548 <__aeabi_f2d>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <MPU9250_Init+0x210>)
 8003d6e:	f7fc fc3f 	bl	80005f0 <__aeabi_dmul>
 8003d72:	2200      	movs	r2, #0
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <MPU9250_Init+0x214>)
 8003d76:	f7fc fa89 	bl	800028c <__adddf3>
 8003d7a:	f7fc ff11 	bl	8000ba0 <__aeabi_d2f>
 8003d7e:	64a0      	str	r0, [r4, #72]	; 0x48
		MPU9250->magCalibrationZ =  (float)(rawData[2] - 128)/256. + 1.;
 8003d80:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8003d84:	3880      	subs	r0, #128	; 0x80
 8003d86:	ee07 0a90 	vmov	s15, r0
 8003d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8e:	ee17 0a90 	vmov	r0, s15
 8003d92:	f7fc fbd9 	bl	8000548 <__aeabi_f2d>
 8003d96:	2200      	movs	r2, #0
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <MPU9250_Init+0x210>)
 8003d9a:	f7fc fc29 	bl	80005f0 <__aeabi_dmul>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <MPU9250_Init+0x214>)
 8003da2:	f7fc fa73 	bl	800028c <__adddf3>
 8003da6:	f7fc fefb 	bl	8000ba0 <__aeabi_d2f>

    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 8003daa:	2300      	movs	r3, #0
 8003dac:	220a      	movs	r2, #10
 8003dae:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
		MPU9250->magCalibrationZ =  (float)(rawData[2] - 128)/256. + 1.;
 8003db2:	64e0      	str	r0, [r4, #76]	; 0x4c
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 8003db4:	4628      	mov	r0, r5
 8003db6:	f001 f985 	bl	80050c4 <I2C_Write>
    //Delayms(10);
    HAL_Delay(10);
 8003dba:	200a      	movs	r0, #10
 8003dbc:	f001 fcc4 	bl	8005748 <HAL_Delay>
    // Configure the magnetometer for continuous read and highest resolution
    // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
    // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 1 << 4 | 6); // Set magnetometer data resolution and sample ODR
 8003dc0:	2316      	movs	r3, #22
 8003dc2:	220a      	movs	r2, #10
 8003dc4:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f001 f97b 	bl	80050c4 <I2C_Write>
    //Delayms(10);
    HAL_Delay(10);
 8003dce:	200a      	movs	r0, #10
 8003dd0:	f001 fcba 	bl	8005748 <HAL_Delay>

    /* Calculate multiplicators */
    MPU9250->AMult = 2.0f / 32768.0f;
 8003dd4:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8003dd8:	63a3      	str	r3, [r4, #56]	; 0x38
    MPU9250->GMult = 2000.0f / 32768.0f; // modified from 250.0f to 2000.0f to increase gyro sensitivity
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <MPU9250_Init+0x218>)
 8003ddc:	63e3      	str	r3, [r4, #60]	; 0x3c
    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <MPU9250_Init+0x21c>)
 8003de0:	6423      	str	r3, [r4, #64]	; 0x40

    return MPU9250_Result_Ok;
 8003de2:	2000      	movs	r0, #0
}
 8003de4:	b004      	add	sp, #16
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
        return MPU9250_Result_DeviceNotConnected;
 8003de8:	2002      	movs	r0, #2
 8003dea:	e7fb      	b.n	8003de4 <MPU9250_Init+0x208>
 8003dec:	3f700000 	.word	0x3f700000
 8003df0:	3ff00000 	.word	0x3ff00000
 8003df4:	3d7a0000 	.word	0x3d7a0000
 8003df8:	3fbfe000 	.word	0x3fbfe000

08003dfc <MPU9250_ReadAcce>:

MPU9250_Result_t MPU9250_ReadAcce(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[6];

    /* Read accelerometer data */
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 8003dfe:	2306      	movs	r3, #6
MPU9250_Result_t MPU9250_ReadAcce(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003e00:	460c      	mov	r4, r1
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 8003e02:	223b      	movs	r2, #59	; 0x3b
 8003e04:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	ab02      	add	r3, sp, #8
 8003e0c:	f001 f96e 	bl	80050ec <I2C_ReadMulti>

    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 8003e10:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003e14:	f89d 1009 	ldrb.w	r1, [sp, #9]
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8003e18:	f89d 200b 	ldrb.w	r2, [sp, #11]
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8003e1c:	f89d 000c 	ldrb.w	r0, [sp, #12]

    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8003e20:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 8003e24:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8003e28:	b209      	sxth	r1, r1
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8003e2a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 8003e2e:	84a1      	strh	r1, [r4, #36]	; 0x24
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8003e30:	ee07 1a90 	vmov	s15, r1
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8003e34:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8003e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8003e3c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8003e40:	b212      	sxth	r2, r2
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8003e42:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8003e46:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8003e4a:	ee07 2a90 	vmov	s15, r2
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8003e4e:	b21b      	sxth	r3, r3
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8003e50:	ed84 7a00 	vstr	s14, [r4]
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8003e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 8003e58:	ee07 3a90 	vmov	s15, r3
 8003e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8003e60:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 8003e64:	ee67 7aa6 	vmul.f32	s15, s15, s13
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8003e68:	84e2      	strh	r2, [r4, #38]	; 0x26
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8003e6a:	8523      	strh	r3, [r4, #40]	; 0x28
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8003e6c:	ed84 7a01 	vstr	s14, [r4, #4]
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 8003e70:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8003e74:	b004      	add	sp, #16
 8003e76:	bd10      	pop	{r4, pc}

08003e78 <MPU9250_ReadGyro>:

MPU9250_Result_t MPU9250_ReadGyro(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[6];
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8003e7a:	2306      	movs	r3, #6
MPU9250_Result_t MPU9250_ReadGyro(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003e7c:	460c      	mov	r4, r1
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8003e7e:	2243      	movs	r2, #67	; 0x43
 8003e80:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	ab02      	add	r3, sp, #8
 8003e88:	f001 f930 	bl	80050ec <I2C_ReadMulti>

    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8003e8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003e90:	f89d 1009 	ldrb.w	r1, [sp, #9]
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];

    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003e94:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8003e98:	f89d 200b 	ldrb.w	r2, [sp, #11]
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8003e9c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003ea0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003f04 <MPU9250_ReadGyro+0x8c>
    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8003ea4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8003ea8:	b209      	sxth	r1, r1
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003eaa:	ee07 1a90 	vmov	s15, r1
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8003eae:	f89d 300a 	ldrb.w	r3, [sp, #10]
    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8003eb2:	8561      	strh	r1, [r4, #42]	; 0x2a
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8003eb8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003ebc:	ee27 7a06 	vmul.f32	s14, s14, s12
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8003ec0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8003ec4:	b212      	sxth	r2, r2
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8003ec6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003eca:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8003ece:	ee07 2a90 	vmov	s15, r2
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8003ed2:	b21b      	sxth	r3, r3
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003ed4:	ed84 7a03 	vstr	s14, [r4, #12]
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8003ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8003ee4:	ee27 7a06 	vmul.f32	s14, s14, s12
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 8003ee8:	ee67 7a86 	vmul.f32	s15, s15, s12
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8003eec:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 8003ef0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8003ef4:	85a2      	strh	r2, [r4, #44]	; 0x2c
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8003ef6:	85e3      	strh	r3, [r4, #46]	; 0x2e
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8003ef8:	ed84 7a04 	vstr	s14, [r4, #16]
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 8003efc:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8003f00:	b004      	add	sp, #16
 8003f02:	bd10      	pop	{r4, pc}
 8003f04:	3c8efa35 	.word	0x3c8efa35

08003f08 <MPU9250_ReadMag>:

MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003f08:	b530      	push	{r4, r5, lr}
 8003f0a:	b087      	sub	sp, #28
	uint8_t data[7];
	uint8_t check;

	/* Check status */
	I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	2202      	movs	r2, #2
MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003f10:	460c      	mov	r4, r1
	I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 8003f12:	f891 10b5 	ldrb.w	r1, [r1, #181]	; 0xb5
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	f10d 030f 	add.w	r3, sp, #15
MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003f1c:	4605      	mov	r5, r0
	I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 8003f1e:	f001 f8e5 	bl	80050ec <I2C_ReadMulti>

	if (check & 0x01) {
 8003f22:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003f26:	07da      	lsls	r2, r3, #31
 8003f28:	d54a      	bpl.n	8003fc0 <MPU9250_ReadMag+0xb8>
		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_XOUT_L, data, 7);
 8003f2a:	2307      	movs	r3, #7
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8003f32:	ab04      	add	r3, sp, #16
 8003f34:	2203      	movs	r2, #3
 8003f36:	4628      	mov	r0, r5
 8003f38:	f001 f8d8 	bl	80050ec <I2C_ReadMulti>
		if (!(data[6] & 0x08)) {
 8003f3c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003f40:	071b      	lsls	r3, r3, #28
 8003f42:	d43d      	bmi.n	8003fc0 <MPU9250_ReadMag+0xb8>
			MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 8003f44:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003f48:	f89d 1010 	ldrb.w	r1, [sp, #16]
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];

			//---------------------------------------------------
			MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
 8003f4c:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 8003f50:	f89d 2012 	ldrb.w	r2, [sp, #18]
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 8003f54:	f89d 0015 	ldrb.w	r0, [sp, #21]
			MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 8003f58:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8003f5c:	b209      	sxth	r1, r1
			MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
 8003f5e:	ee07 1a90 	vmov	s15, r1
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 8003f62:	f89d 3013 	ldrb.w	r3, [sp, #19]
			MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 8003f66:	8621      	strh	r1, [r4, #48]	; 0x30
			MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
 8003f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 8003f6c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
 8003f70:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 8003f74:	f89d 3014 	ldrb.w	r3, [sp, #20]
			MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
 8003f78:	ee27 7a26 	vmul.f32	s14, s14, s13
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 8003f7c:	b212      	sxth	r2, r2
			MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
 8003f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
			MPU9250->My = MPU9250->My_Raw * MPU9250->MMult * MPU9250->magCalibrationY;
 8003f82:	ee07 2a90 	vmov	s15, r2
			MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
 8003f86:	ed84 7a06 	vstr	s14, [r4, #24]
			MPU9250->My = MPU9250->My_Raw * MPU9250->MMult * MPU9250->magCalibrationY;
 8003f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 8003f8e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			MPU9250->My = MPU9250->My_Raw * MPU9250->MMult * MPU9250->magCalibrationY;
 8003f92:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 8003f96:	8662      	strh	r2, [r4, #50]	; 0x32
			MPU9250->My = MPU9250->My_Raw * MPU9250->MMult * MPU9250->magCalibrationY;
 8003f98:	ee27 7a26 	vmul.f32	s14, s14, s13
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 8003f9c:	b21b      	sxth	r3, r3
			MPU9250->My = MPU9250->My_Raw * MPU9250->MMult * MPU9250->magCalibrationY;
 8003f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
			MPU9250->Mz = MPU9250->Mz_Raw * MPU9250->MMult * MPU9250->magCalibrationZ;
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			MPU9250->My = MPU9250->My_Raw * MPU9250->MMult * MPU9250->magCalibrationY;
 8003faa:	ed84 7a07 	vstr	s14, [r4, #28]
			MPU9250->Mz = MPU9250->Mz_Raw * MPU9250->MMult * MPU9250->magCalibrationZ;
 8003fae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fb2:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 8003fb6:	86a3      	strh	r3, [r4, #52]	; 0x34
			MPU9250->Mz = MPU9250->Mz_Raw * MPU9250->MMult * MPU9250->magCalibrationZ;
 8003fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fbc:	edc4 7a08 	vstr	s15, [r4, #32]
		}
	}
}
 8003fc0:	b007      	add	sp, #28
 8003fc2:	bd30      	pop	{r4, r5, pc}

08003fc4 <MPU9250_DataReady>:

MPU9250_Result_t MPU9250_DataReady(I2C_HandleTypeDef* hi2c ,MPU9250_t* MPU9250) {
 8003fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data;
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, INT_STATUS, &data, 1);
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	223a      	movs	r2, #58	; 0x3a
 8003fd0:	f10d 030f 	add.w	r3, sp, #15
 8003fd4:	f001 f88a 	bl	80050ec <I2C_ReadMulti>

    if (data & 0x01) {
        return MPU9250_Result_Ok;
 8003fd8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003fdc:	43c0      	mvns	r0, r0
    }
    return MPU9250_Result_Error;
}
 8003fde:	f000 0001 	and.w	r0, r0, #1
 8003fe2:	b005      	add	sp, #20
 8003fe4:	f85d fb04 	ldr.w	pc, [sp], #4

08003fe8 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8003fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t i = 1, n_width;
    *pn_npks = 0;
 8003fec:	2400      	movs	r4, #0
{
 8003fee:	4681      	mov	r9, r0
    *pn_npks = 0;
 8003ff0:	600c      	str	r4, [r1, #0]
    int32_t i = 1, n_width;
 8003ff2:	2501      	movs	r5, #1

    while (i < n_size-1){
 8003ff4:	f103 3cff 	add.w	ip, r3, #4294967295
 8003ff8:	4565      	cmp	r5, ip
 8003ffa:	db01      	blt.n	8004000 <maxim_peaks_above_min_height+0x18>
                i += n_width;
        }
        else
            i++;
    }
}
 8003ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8004000:	9c07      	ldr	r4, [sp, #28]
 8004002:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8004006:	42a6      	cmp	r6, r4
 8004008:	ea4f 0785 	mov.w	r7, r5, lsl #2
 800400c:	f105 0401 	add.w	r4, r5, #1
 8004010:	dd22      	ble.n	8004058 <maxim_peaks_above_min_height+0x70>
 8004012:	4417      	add	r7, r2
 8004014:	f857 7c04 	ldr.w	r7, [r7, #-4]
 8004018:	42be      	cmp	r6, r7
 800401a:	dd1d      	ble.n	8004058 <maxim_peaks_above_min_height+0x70>
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800401c:	429c      	cmp	r4, r3
 800401e:	eba4 0e05 	sub.w	lr, r4, r5
 8004022:	4627      	mov	r7, r4
 8004024:	d105      	bne.n	8004032 <maxim_peaks_above_min_height+0x4a>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8004026:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800402a:	42a6      	cmp	r6, r4
 800402c:	dc09      	bgt.n	8004042 <maxim_peaks_above_min_height+0x5a>
 800402e:	463d      	mov	r5, r7
 8004030:	e7e2      	b.n	8003ff8 <maxim_peaks_above_min_height+0x10>
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8004032:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8004036:	4286      	cmp	r6, r0
 8004038:	f104 0801 	add.w	r8, r4, #1
 800403c:	d1f3      	bne.n	8004026 <maxim_peaks_above_min_height+0x3e>
 800403e:	4644      	mov	r4, r8
 8004040:	e7ec      	b.n	800401c <maxim_peaks_above_min_height+0x34>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8004042:	680c      	ldr	r4, [r1, #0]
 8004044:	2c0e      	cmp	r4, #14
 8004046:	dcf2      	bgt.n	800402e <maxim_peaks_above_min_height+0x46>
                pn_locs[(*pn_npks)++] = i;
 8004048:	1c66      	adds	r6, r4, #1
 800404a:	600e      	str	r6, [r1, #0]
 800404c:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
                i += n_width+1;
 8004050:	f10e 0401 	add.w	r4, lr, #1
 8004054:	1967      	adds	r7, r4, r5
 8004056:	e7ea      	b.n	800402e <maxim_peaks_above_min_height+0x46>
            i++;
 8004058:	4627      	mov	r7, r4
 800405a:	e7e8      	b.n	800402e <maxim_peaks_above_min_height+0x46>

0800405c <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 800405c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 800405e:	2301      	movs	r3, #1
 8004060:	4604      	mov	r4, r0
 8004062:	428b      	cmp	r3, r1
 8004064:	db00      	blt.n	8004068 <maxim_sort_ascend+0xc>
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
            pn_x[j] = pn_x[j-1];
        pn_x[j] = n_temp;
    }
}
 8004066:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_temp = pn_x[i];
 8004068:	f854 6f04 	ldr.w	r6, [r4, #4]!
 800406c:	461a      	mov	r2, r3
 800406e:	4625      	mov	r5, r4
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8004070:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8004074:	42be      	cmp	r6, r7
 8004076:	da03      	bge.n	8004080 <maxim_sort_ascend+0x24>
 8004078:	3a01      	subs	r2, #1
            pn_x[j] = pn_x[j-1];
 800407a:	f845 7904 	str.w	r7, [r5], #-4
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 800407e:	d1f7      	bne.n	8004070 <maxim_sort_ascend+0x14>
        pn_x[j] = n_temp;
 8004080:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    for (i = 1; i < n_size; i++) {
 8004084:	3301      	adds	r3, #1
 8004086:	e7ec      	b.n	8004062 <maxim_sort_ascend+0x6>

08004088 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8004088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800408c:	4694      	mov	ip, r2
 800408e:	460d      	mov	r5, r1
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8004090:	2301      	movs	r3, #1
 8004092:	4563      	cmp	r3, ip
 8004094:	db01      	blt.n	800409a <maxim_sort_indices_descend+0x12>
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
            pn_indx[j] = pn_indx[j-1];
        pn_indx[j] = n_temp;
    }
}
 8004096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        n_temp = pn_indx[i];
 800409a:	f855 9f04 	ldr.w	r9, [r5, #4]!
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800409e:	461c      	mov	r4, r3
 80040a0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 80040a4:	462e      	mov	r6, r5
 80040a6:	f8d8 2000 	ldr.w	r2, [r8]
 80040aa:	f856 7c04 	ldr.w	r7, [r6, #-4]
 80040ae:	4696      	mov	lr, r2
 80040b0:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 80040b4:	4596      	cmp	lr, r2
 80040b6:	dd03      	ble.n	80040c0 <maxim_sort_indices_descend+0x38>
 80040b8:	3c01      	subs	r4, #1
            pn_indx[j] = pn_indx[j-1];
 80040ba:	f846 7904 	str.w	r7, [r6], #-4
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80040be:	d1f2      	bne.n	80040a6 <maxim_sort_indices_descend+0x1e>
        pn_indx[j] = n_temp;
 80040c0:	f841 9024 	str.w	r9, [r1, r4, lsl #2]
    for (i = 1; i < n_size; i++) {
 80040c4:	3301      	adds	r3, #1
 80040c6:	e7e4      	b.n	8004092 <maxim_sort_indices_descend+0xa>

080040c8 <maxim_remove_close_peaks>:
{
 80040c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040cc:	4604      	mov	r4, r0
 80040ce:	461f      	mov	r7, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	460d      	mov	r5, r1
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 80040d4:	680a      	ldr	r2, [r1, #0]
 80040d6:	4621      	mov	r1, r4
 80040d8:	f7ff ffd6 	bl	8004088 <maxim_sort_indices_descend>
 80040dc:	1f20      	subs	r0, r4, #4
    for ( i = -1; i < *pn_npks; i++ ){
 80040de:	f04f 32ff 	mov.w	r2, #4294967295
 80040e2:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80040e6:	f1c7 0c00 	rsb	ip, r7, #0
    for ( i = -1; i < *pn_npks; i++ ){
 80040ea:	6829      	ldr	r1, [r5, #0]
 80040ec:	428a      	cmp	r2, r1
 80040ee:	db04      	blt.n	80040fa <maxim_remove_close_peaks+0x32>
    maxim_sort_ascend( pn_locs, *pn_npks );
 80040f0:	4620      	mov	r0, r4
}
 80040f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    maxim_sort_ascend( pn_locs, *pn_npks );
 80040f6:	f7ff bfb1 	b.w	800405c <maxim_sort_ascend>
        *pn_npks = i+1;
 80040fa:	3201      	adds	r2, #1
 80040fc:	4471      	add	r1, lr
 80040fe:	602a      	str	r2, [r5, #0]
 8004100:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        for ( j = i+1; j < n_old_npks; j++ ){
 8004104:	4606      	mov	r6, r0
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8004106:	f102 38ff 	add.w	r8, r2, #4294967295
        for ( j = i+1; j < n_old_npks; j++ ){
 800410a:	428e      	cmp	r6, r1
 800410c:	d101      	bne.n	8004112 <maxim_remove_close_peaks+0x4a>
 800410e:	3004      	adds	r0, #4
 8004110:	e7eb      	b.n	80040ea <maxim_remove_close_peaks+0x22>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8004112:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004116:	bf18      	it	ne
 8004118:	f8d0 9000 	ldrne.w	r9, [r0]
 800411c:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8004120:	bf08      	it	eq
 8004122:	46c1      	moveq	r9, r8
 8004124:	eba3 0309 	sub.w	r3, r3, r9
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8004128:	42bb      	cmp	r3, r7
 800412a:	dc01      	bgt.n	8004130 <maxim_remove_close_peaks+0x68>
 800412c:	4563      	cmp	r3, ip
 800412e:	daec      	bge.n	800410a <maxim_remove_close_peaks+0x42>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8004130:	f8d5 9000 	ldr.w	r9, [r5]
 8004134:	f109 0301 	add.w	r3, r9, #1
 8004138:	602b      	str	r3, [r5, #0]
 800413a:	6833      	ldr	r3, [r6, #0]
 800413c:	f844 3029 	str.w	r3, [r4, r9, lsl #2]
 8004140:	e7e3      	b.n	800410a <maxim_remove_close_peaks+0x42>

08004142 <maxim_find_peaks>:
{
 8004142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 8004144:	9f08      	ldr	r7, [sp, #32]
 8004146:	9700      	str	r7, [sp, #0]
{
 8004148:	4605      	mov	r5, r0
 800414a:	460c      	mov	r4, r1
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 800414c:	f7ff ff4c 	bl	8003fe8 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 8004150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004152:	4628      	mov	r0, r5
 8004154:	f7ff ffb8 	bl	80040c8 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415c:	429a      	cmp	r2, r3
 800415e:	bfd4      	ite	le
 8004160:	6022      	strle	r2, [r4, #0]
 8004162:	6023      	strgt	r3, [r4, #0]
}
 8004164:	b003      	add	sp, #12
 8004166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004168 <maxim_heart_rate_and_oxygen_saturation>:
{
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	468b      	mov	fp, r1
    for (k=0 ; k<n_buffer_length ; k++ )
 800416e:	2100      	movs	r1, #0
{
 8004170:	4680      	mov	r8, r0
 8004172:	4617      	mov	r7, r2
 8004174:	b0bb      	sub	sp, #236	; 0xec
    uint32_t un_offset_tmp = un_offset;
 8004176:	461e      	mov	r6, r3
 8004178:	461a      	mov	r2, r3
    un_ir_mean =0;
 800417a:	4608      	mov	r0, r1
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 800417c:	f44f 7496 	mov.w	r4, #300	; 0x12c
    for (k=0 ; k<n_buffer_length ; k++ )
 8004180:	42b9      	cmp	r1, r7
 8004182:	f2c0 80b2 	blt.w	80042ea <maxim_heart_rate_and_oxygen_saturation+0x182>
 8004186:	4dca      	ldr	r5, [pc, #808]	; (80044b0 <maxim_heart_rate_and_oxygen_saturation+0x348>)
    un_ir_mean =un_ir_mean/n_buffer_length ;
 8004188:	fbb0 f2f7 	udiv	r2, r0, r7
    for (k=0 ; k<n_buffer_length ; k++ )
 800418c:	2100      	movs	r1, #0
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 800418e:	f44f 7496 	mov.w	r4, #300	; 0x12c
    for (k=0 ; k<n_buffer_length ; k++ )
 8004192:	42b9      	cmp	r1, r7
 8004194:	f2c0 80b3 	blt.w	80042fe <maxim_heart_rate_and_oxygen_saturation+0x196>
 8004198:	4cc5      	ldr	r4, [pc, #788]	; (80044b0 <maxim_heart_rate_and_oxygen_saturation+0x348>)
        an_x[k]=  n_denom/(int32_t)4;
 800419a:	2104      	movs	r1, #4
 800419c:	f504 7276 	add.w	r2, r4, #984	; 0x3d8
    for (k=0 ; k<n_buffer_length ; k++ )
 80041a0:	4625      	mov	r5, r4
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 80041a2:	e895 0009 	ldmia.w	r5, {r0, r3}
 80041a6:	4403      	add	r3, r0
 80041a8:	68a8      	ldr	r0, [r5, #8]
 80041aa:	4403      	add	r3, r0
 80041ac:	68e8      	ldr	r0, [r5, #12]
 80041ae:	4403      	add	r3, r0
        an_x[k]=  n_denom/(int32_t)4;
 80041b0:	fb93 f3f1 	sdiv	r3, r3, r1
 80041b4:	f845 3b04 	str.w	r3, [r5], #4
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 80041b8:	42aa      	cmp	r2, r5
 80041ba:	d1f2      	bne.n	80041a2 <maxim_heart_rate_and_oxygen_saturation+0x3a>
 80041bc:	49bc      	ldr	r1, [pc, #752]	; (80044b0 <maxim_heart_rate_and_oxygen_saturation+0x348>)
        an_dx[k]= (an_x[k+1]- an_x[k]);
 80041be:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 80044b4 <maxim_heart_rate_and_oxygen_saturation+0x34c>
 80041c2:	2300      	movs	r3, #0
 80041c4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80041c8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80041cc:	1a12      	subs	r2, r2, r0
 80041ce:	f84e 2023 	str.w	r2, [lr, r3, lsl #2]
 80041d2:	3301      	adds	r3, #1
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 80041d4:	2bf5      	cmp	r3, #245	; 0xf5
 80041d6:	d1f5      	bne.n	80041c4 <maxim_heart_rate_and_oxygen_saturation+0x5c>
 80041d8:	4bb6      	ldr	r3, [pc, #728]	; (80044b4 <maxim_heart_rate_and_oxygen_saturation+0x34c>)
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 80041da:	2002      	movs	r0, #2
 80041dc:	f503 7174 	add.w	r1, r3, #976	; 0x3d0
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f853 ef04 	ldr.w	lr, [r3, #4]!
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 80041e6:	4299      	cmp	r1, r3
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 80041e8:	4472      	add	r2, lr
 80041ea:	fb92 f2f0 	sdiv	r2, r2, r0
 80041ee:	f843 2c04 	str.w	r2, [r3, #-4]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 80041f2:	d1f5      	bne.n	80041e0 <maxim_heart_rate_and_oxygen_saturation+0x78>
 80041f4:	2100      	movs	r1, #0
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm
 80041f6:	f240 4c7a 	movw	ip, #1146	; 0x47a
 80041fa:	2300      	movs	r3, #0
 80041fc:	461a      	mov	r2, r3
            s -= an_dx[k] *auw_hamm[k-i] ;
 80041fe:	48ae      	ldr	r0, [pc, #696]	; (80044b8 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8004200:	eb01 0a03 	add.w	sl, r1, r3
 8004204:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
 8004208:	48aa      	ldr	r0, [pc, #680]	; (80044b4 <maxim_heart_rate_and_oxygen_saturation+0x34c>)
 800420a:	3301      	adds	r3, #1
 800420c:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8004210:	2b05      	cmp	r3, #5
            s -= an_dx[k] *auw_hamm[k-i] ;
 8004212:	fb0a 221e 	mls	r2, sl, lr, r2
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8004216:	d1f2      	bne.n	80041fe <maxim_heart_rate_and_oxygen_saturation+0x96>
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm
 8004218:	fb92 f2fc 	sdiv	r2, r2, ip
 800421c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8004220:	3101      	adds	r1, #1
 8004222:	29ef      	cmp	r1, #239	; 0xef
 8004224:	d1e9      	bne.n	80041fa <maxim_heart_rate_and_oxygen_saturation+0x92>
 8004226:	2200      	movs	r2, #0
 8004228:	4613      	mov	r3, r2
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 800422a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 800422e:	3301      	adds	r3, #1
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8004230:	ea81 7ee1 	eor.w	lr, r1, r1, asr #31
 8004234:	ebae 7ee1 	sub.w	lr, lr, r1, asr #31
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8004238:	2bf5      	cmp	r3, #245	; 0xf5
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 800423a:	4472      	add	r2, lr
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 800423c:	d1f5      	bne.n	800422a <maxim_heart_rate_and_oxygen_saturation+0xc2>
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks
 800423e:	2105      	movs	r1, #5
 8004240:	9102      	str	r1, [sp, #8]
 8004242:	2108      	movs	r1, #8
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8004244:	fb92 f2f3 	sdiv	r2, r2, r3
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks
 8004248:	9101      	str	r1, [sp, #4]
 800424a:	9200      	str	r2, [sp, #0]
 800424c:	a907      	add	r1, sp, #28
 800424e:	4a99      	ldr	r2, [pc, #612]	; (80044b4 <maxim_heart_rate_and_oxygen_saturation+0x34c>)
 8004250:	a82b      	add	r0, sp, #172	; 0xac
 8004252:	f7ff ff76 	bl	8004142 <maxim_find_peaks>
    if (n_npks>=2){
 8004256:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800425a:	f1be 0f01 	cmp.w	lr, #1
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	dd5a      	ble.n	800431a <maxim_heart_rate_and_oxygen_saturation+0x1b2>
 8004264:	aa2b      	add	r2, sp, #172	; 0xac
 8004266:	469c      	mov	ip, r3
 8004268:	2001      	movs	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 800426a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800426e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8004272:	1ac9      	subs	r1, r1, r3
 8004274:	448c      	add	ip, r1
        for (k=1; k<n_npks; k++)
 8004276:	1c41      	adds	r1, r0, #1
 8004278:	458e      	cmp	lr, r1
 800427a:	d14c      	bne.n	8004316 <maxim_heart_rate_and_oxygen_saturation+0x1ae>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 800427c:	fb9c f3f0 	sdiv	r3, ip, r0
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80044bc <maxim_heart_rate_and_oxygen_saturation+0x354>
 8004288:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800428a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800428e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004292:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800429e:	edc3 7a00 	vstr	s15, [r3]
        *pch_hr_valid  = 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 80042a6:	a90d      	add	r1, sp, #52	; 0x34
        *pch_hr_valid  = 1;
 80042a8:	7013      	strb	r3, [r2, #0]
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 80042aa:	a82b      	add	r0, sp, #172	; 0xac
 80042ac:	2300      	movs	r3, #0
    for ( k=0 ; k<n_npks ;k++)
 80042ae:	4573      	cmp	r3, lr
 80042b0:	db37      	blt.n	8004322 <maxim_heart_rate_and_oxygen_saturation+0x1ba>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 80042b2:	497f      	ldr	r1, [pc, #508]	; (80044b0 <maxim_heart_rate_and_oxygen_saturation+0x348>)
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 80042b4:	4882      	ldr	r0, [pc, #520]	; (80044c0 <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80042b6:	2300      	movs	r3, #0
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80042b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
    for (k=0 ; k<n_buffer_length ; k++ )  {
 80042bc:	42bb      	cmp	r3, r7
 80042be:	db37      	blt.n	8004330 <maxim_heart_rate_and_oxygen_saturation+0x1c8>
 80042c0:	2300      	movs	r3, #0
                if (an_x[i]<n_c_min){
 80042c2:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 80044b0 <maxim_heart_rate_and_oxygen_saturation+0x348>
 80042c6:	461a      	mov	r2, r3
        m=an_ir_valley_locs[k];
 80042c8:	f10d 0834 	add.w	r8, sp, #52	; 0x34
                   an_exact_ir_valley_locs[k]=i;
 80042cc:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
    for(k=0 ; k<n_npks ;k++){
 80042d0:	4572      	cmp	r2, lr
 80042d2:	db3c      	blt.n	800434e <maxim_heart_rate_and_oxygen_saturation+0x1e6>
    if (n_exact_ir_valley_locs_count <2 ){
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	dc54      	bgt.n	8004382 <maxim_heart_rate_and_oxygen_saturation+0x21a>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 80042d8:	9a44      	ldr	r2, [sp, #272]	; 0x110
 80042da:	4b7a      	ldr	r3, [pc, #488]	; (80044c4 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 80042dc:	6013      	str	r3, [r2, #0]
       *pch_spo2_valid  = 0;
 80042de:	2300      	movs	r3, #0
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80042e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80042e2:	7013      	strb	r3, [r2, #0]
}
 80042e4:	b03b      	add	sp, #236	; 0xec
 80042e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 80042ea:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80042ee:	3201      	adds	r2, #1
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 80042f0:	4428      	add	r0, r5
    for (k=0 ; k<n_buffer_length ; k++ )
 80042f2:	3101      	adds	r1, #1
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80042f4:	fbb2 f5f4 	udiv	r5, r2, r4
 80042f8:	fb04 2215 	mls	r2, r4, r5, r2
 80042fc:	e740      	b.n	8004180 <maxim_heart_rate_and_oxygen_saturation+0x18>
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 80042fe:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8004302:	3301      	adds	r3, #1
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8004304:	1a80      	subs	r0, r0, r2
 8004306:	f845 0021 	str.w	r0, [r5, r1, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 800430a:	fbb3 f0f4 	udiv	r0, r3, r4
    for (k=0 ; k<n_buffer_length ; k++ )
 800430e:	3101      	adds	r1, #1
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8004310:	fb04 3310 	mls	r3, r4, r0, r3
 8004314:	e73d      	b.n	8004192 <maxim_heart_rate_and_oxygen_saturation+0x2a>
 8004316:	4608      	mov	r0, r1
 8004318:	e7a7      	b.n	800426a <maxim_heart_rate_and_oxygen_saturation+0x102>
        *pn_heart_rate = -999;
 800431a:	9946      	ldr	r1, [sp, #280]	; 0x118
 800431c:	4a69      	ldr	r2, [pc, #420]	; (80044c4 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 800431e:	600a      	str	r2, [r1, #0]
 8004320:	e7c0      	b.n	80042a4 <maxim_heart_rate_and_oxygen_saturation+0x13c>
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 8004322:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004326:	3202      	adds	r2, #2
 8004328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( k=0 ; k<n_npks ;k++)
 800432c:	3301      	adds	r3, #1
 800432e:	e7be      	b.n	80042ae <maxim_heart_rate_and_oxygen_saturation+0x146>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 8004330:	f858 c026 	ldr.w	ip, [r8, r6, lsl #2]
 8004334:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8004338:	f85b c026 	ldr.w	ip, [fp, r6, lsl #2]
 800433c:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8004340:	3601      	adds	r6, #1
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8004342:	3301      	adds	r3, #1
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8004344:	fbb6 fcf2 	udiv	ip, r6, r2
 8004348:	fb02 661c 	mls	r6, r2, ip, r6
 800434c:	e7b6      	b.n	80042bc <maxim_heart_rate_and_oxygen_saturation+0x154>
        m=an_ir_valley_locs[k];
 800434e:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8004352:	1f88      	subs	r0, r1, #6
 8004354:	28e9      	cmp	r0, #233	; 0xe9
 8004356:	d808      	bhi.n	800436a <maxim_heart_rate_and_oxygen_saturation+0x202>
            for(i= m-5;i<m+5; i++)
 8004358:	1f48      	subs	r0, r1, #5
        n_c_min= 16777216;//2^24;
 800435a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 800435e:	3105      	adds	r1, #5
        un_only_once =1;
 8004360:	2601      	movs	r6, #1
            for(i= m-5;i<m+5; i++)
 8004362:	4288      	cmp	r0, r1
 8004364:	d103      	bne.n	800436e <maxim_heart_rate_and_oxygen_saturation+0x206>
            if (un_only_once ==0)
 8004366:	b906      	cbnz	r6, 800436a <maxim_heart_rate_and_oxygen_saturation+0x202>
                n_exact_ir_valley_locs_count ++ ;
 8004368:	3301      	adds	r3, #1
    for(k=0 ; k<n_npks ;k++){
 800436a:	3201      	adds	r2, #1
 800436c:	e7b0      	b.n	80042d0 <maxim_heart_rate_and_oxygen_saturation+0x168>
                if (an_x[i]<n_c_min){
 800436e:	f85b c020 	ldr.w	ip, [fp, r0, lsl #2]
 8004372:	4567      	cmp	r7, ip
                   an_exact_ir_valley_locs[k]=i;
 8004374:	bfc2      	ittt	gt
 8004376:	f84a 0022 	strgt.w	r0, [sl, r2, lsl #2]
 800437a:	4667      	movgt	r7, ip
 800437c:	2600      	movgt	r6, #0
            for(i= m-5;i<m+5; i++)
 800437e:	3001      	adds	r0, #1
 8004380:	e7ef      	b.n	8004362 <maxim_heart_rate_and_oxygen_saturation+0x1fa>
 8004382:	494f      	ldr	r1, [pc, #316]	; (80044c0 <maxim_heart_rate_and_oxygen_saturation+0x358>)
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8004384:	2604      	movs	r6, #4
 8004386:	e894 0005 	ldmia.w	r4, {r0, r2}
 800438a:	68a7      	ldr	r7, [r4, #8]
 800438c:	4402      	add	r2, r0
 800438e:	443a      	add	r2, r7
 8004390:	68e7      	ldr	r7, [r4, #12]
 8004392:	443a      	add	r2, r7
 8004394:	fb92 f2f6 	sdiv	r2, r2, r6
 8004398:	f844 2b04 	str.w	r2, [r4], #4
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 800439c:	e891 0005 	ldmia.w	r1, {r0, r2}
 80043a0:	688f      	ldr	r7, [r1, #8]
 80043a2:	4402      	add	r2, r0
 80043a4:	443a      	add	r2, r7
 80043a6:	68cf      	ldr	r7, [r1, #12]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80043a8:	42a5      	cmp	r5, r4
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 80043aa:	443a      	add	r2, r7
 80043ac:	fb92 f2f6 	sdiv	r2, r2, r6
 80043b0:	f841 2b04 	str.w	r2, [r1], #4
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80043b4:	d1e7      	bne.n	8004386 <maxim_heart_rate_and_oxygen_saturation+0x21e>
    for(k=0; k< 5; k++) an_ratio[k]=0;
 80043b6:	2200      	movs	r2, #0
 80043b8:	9208      	str	r2, [sp, #32]
 80043ba:	9209      	str	r2, [sp, #36]	; 0x24
 80043bc:	920a      	str	r2, [sp, #40]	; 0x28
 80043be:	920b      	str	r2, [sp, #44]	; 0x2c
 80043c0:	920c      	str	r2, [sp, #48]	; 0x30
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){
 80043c2:	ad1c      	add	r5, sp, #112	; 0x70
 80043c4:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80043c8:	29fa      	cmp	r1, #250	; 0xfa
 80043ca:	dc85      	bgt.n	80042d8 <maxim_heart_rate_and_oxygen_saturation+0x170>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80043cc:	3201      	adds	r2, #1
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d1f8      	bne.n	80043c4 <maxim_heart_rate_and_oxygen_saturation+0x25c>
 80043d2:	2400      	movs	r4, #0
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80043d4:	3b01      	subs	r3, #1
 80043d6:	4e36      	ldr	r6, [pc, #216]	; (80044b0 <maxim_heart_rate_and_oxygen_saturation+0x348>)
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 80043d8:	4f39      	ldr	r7, [pc, #228]	; (80044c0 <maxim_heart_rate_and_oxygen_saturation+0x358>)
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80043da:	9305      	str	r3, [sp, #20]
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80043dc:	46a4      	mov	ip, r4
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80043de:	9b05      	ldr	r3, [sp, #20]
 80043e0:	459c      	cmp	ip, r3
 80043e2:	db1d      	blt.n	8004420 <maxim_heart_rate_and_oxygen_saturation+0x2b8>
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80043e4:	4621      	mov	r1, r4
 80043e6:	a808      	add	r0, sp, #32
    n_middle_idx= n_i_ratio_count/2;
 80043e8:	1064      	asrs	r4, r4, #1
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80043ea:	f7ff fe37 	bl	800405c <maxim_sort_ascend>
    if (n_middle_idx >1)
 80043ee:	2c01      	cmp	r4, #1
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80043f0:	aa3a      	add	r2, sp, #232	; 0xe8
 80043f2:	ea4f 0384 	mov.w	r3, r4, lsl #2
    if (n_middle_idx >1)
 80043f6:	dd7b      	ble.n	80044f0 <maxim_heart_rate_and_oxygen_saturation+0x388>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80043f8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80043fc:	f854 2cc8 	ldr.w	r2, [r4, #-200]
 8004400:	f854 3ccc 	ldr.w	r3, [r4, #-204]
 8004404:	4413      	add	r3, r2
 8004406:	2202      	movs	r2, #2
 8004408:	fb93 f3f2 	sdiv	r3, r3, r2
    if( n_ratio_average>2 && n_ratio_average <184){
 800440c:	1eda      	subs	r2, r3, #3
 800440e:	2ab4      	cmp	r2, #180	; 0xb4
 8004410:	f63f af62 	bhi.w	80042d8 <maxim_heart_rate_and_oxygen_saturation+0x170>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8004414:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <maxim_heart_rate_and_oxygen_saturation+0x360>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	9a44      	ldr	r2, [sp, #272]	; 0x110
 800441a:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 800441c:	2301      	movs	r3, #1
 800441e:	e75f      	b.n	80042e0 <maxim_heart_rate_and_oxygen_saturation+0x178>
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 8004420:	f855 ef04 	ldr.w	lr, [r5, #4]!
 8004424:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8004428:	ebae 0802 	sub.w	r8, lr, r2
 800442c:	f1b8 0f0a 	cmp.w	r8, #10
 8004430:	f10c 0c01 	add.w	ip, ip, #1
 8004434:	ddd3      	ble.n	80043de <maxim_heart_rate_and_oxygen_saturation+0x276>
 8004436:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800443a:	4610      	mov	r0, r2
 800443c:	4619      	mov	r1, r3
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 800443e:	4570      	cmp	r0, lr
 8004440:	db44      	blt.n	80044cc <maxim_heart_rate_and_oxygen_saturation+0x364>
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 8004442:	f856 a022 	ldr.w	sl, [r6, r2, lsl #2]
 8004446:	f856 002e 	ldr.w	r0, [r6, lr, lsl #2]
 800444a:	eba0 0b0a 	sub.w	fp, r0, sl
 800444e:	9804      	ldr	r0, [sp, #16]
 8004450:	1a80      	subs	r0, r0, r2
 8004452:	fb00 f00b 	mul.w	r0, r0, fp
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 8004456:	fb90 f0f8 	sdiv	r0, r0, r8
 800445a:	4482      	add	sl, r0
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 800445c:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
 8004460:	eba0 0a0a 	sub.w	sl, r0, sl
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8004464:	fb01 f10a 	mul.w	r1, r1, sl
 8004468:	11c9      	asrs	r1, r1, #7
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 800446a:	2900      	cmp	r1, #0
 800446c:	ddb7      	ble.n	80043de <maxim_heart_rate_and_oxygen_saturation+0x276>
 800446e:	2c04      	cmp	r4, #4
 8004470:	dcb5      	bgt.n	80043de <maxim_heart_rate_and_oxygen_saturation+0x276>
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8004472:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8004476:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
 800447a:	eba9 0202 	sub.w	r2, r9, r2
 800447e:	ebae 0e00 	sub.w	lr, lr, r0
 8004482:	fb02 f20e 	mul.w	r2, r2, lr
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ;
 8004486:	fb92 f2f8 	sdiv	r2, r2, r8
 800448a:	4402      	add	r2, r0
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 800448c:	f857 0029 	ldr.w	r0, [r7, r9, lsl #2]
 8004490:	1a80      	subs	r0, r0, r2
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8004492:	4343      	muls	r3, r0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8004494:	11db      	asrs	r3, r3, #7
 8004496:	d0a2      	beq.n	80043de <maxim_heart_rate_and_oxygen_saturation+0x276>
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8004498:	aa3a      	add	r2, sp, #232	; 0xe8
 800449a:	eb02 0e84 	add.w	lr, r2, r4, lsl #2
 800449e:	2264      	movs	r2, #100	; 0x64
 80044a0:	4353      	muls	r3, r2
                n_i_ratio_count++;
 80044a2:	3401      	adds	r4, #1
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80044a4:	fb93 f1f1 	sdiv	r1, r3, r1
 80044a8:	f84e 1cc8 	str.w	r1, [lr, #-200]
 80044ac:	e797      	b.n	80043de <maxim_heart_rate_and_oxygen_saturation+0x276>
 80044ae:	bf00      	nop
 80044b0:	200005d4 	.word	0x200005d4
 80044b4:	200001fc 	.word	0x200001fc
 80044b8:	08009126 	.word	0x08009126
 80044bc:	45bb8000 	.word	0x45bb8000
 80044c0:	200009bc 	.word	0x200009bc
 80044c4:	fffffc19 	.word	0xfffffc19
 80044c8:	08009164 	.word	0x08009164
 80044cc:	ea4f 0a80 	mov.w	sl, r0, lsl #2
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80044d0:	f856 b020 	ldr.w	fp, [r6, r0, lsl #2]
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 80044d4:	f85a a007 	ldr.w	sl, [sl, r7]
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80044d8:	455b      	cmp	r3, fp
 80044da:	bfac      	ite	ge
 80044dc:	469b      	movge	fp, r3
 80044de:	9004      	strlt	r0, [sp, #16]
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 80044e0:	4551      	cmp	r1, sl
 80044e2:	bfac      	ite	ge
 80044e4:	468a      	movge	sl, r1
 80044e6:	4681      	movlt	r9, r0
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80044e8:	465b      	mov	r3, fp
 80044ea:	3001      	adds	r0, #1
 80044ec:	4651      	mov	r1, sl
 80044ee:	e7a6      	b.n	800443e <maxim_heart_rate_and_oxygen_saturation+0x2d6>
        n_ratio_average = an_ratio[n_middle_idx ];
 80044f0:	4413      	add	r3, r2
 80044f2:	f853 3cc8 	ldr.w	r3, [r3, #-200]
 80044f6:	e789      	b.n	800440c <maxim_heart_rate_and_oxygen_saturation+0x2a4>

080044f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	2214      	movs	r2, #20
 80044fe:	2100      	movs	r1, #0
 8004500:	a807      	add	r0, sp, #28
 8004502:	f001 fb13 	bl	8005b2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004506:	2400      	movs	r4, #0
 8004508:	4b4d      	ldr	r3, [pc, #308]	; (8004640 <MX_GPIO_Init+0x148>)
 800450a:	9401      	str	r4, [sp, #4]
 800450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800450e:	4f4d      	ldr	r7, [pc, #308]	; (8004644 <MX_GPIO_Init+0x14c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8004510:	4d4d      	ldr	r5, [pc, #308]	; (8004648 <MX_GPIO_Init+0x150>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004512:	f042 0210 	orr.w	r2, r2, #16
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
 8004518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451a:	f002 0210 	and.w	r2, r2, #16
 800451e:	9201      	str	r2, [sp, #4]
 8004520:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004522:	9402      	str	r4, [sp, #8]
 8004524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004526:	f042 0204 	orr.w	r2, r2, #4
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
 800452c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452e:	f002 0204 	and.w	r2, r2, #4
 8004532:	9202      	str	r2, [sp, #8]
 8004534:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004536:	9403      	str	r4, [sp, #12]
 8004538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453a:	f042 0220 	orr.w	r2, r2, #32
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
 8004540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004542:	f002 0220 	and.w	r2, r2, #32
 8004546:	9203      	str	r2, [sp, #12]
 8004548:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800454a:	9404      	str	r4, [sp, #16]
 800454c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800454e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
 8004554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004556:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800455a:	9204      	str	r2, [sp, #16]
 800455c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800455e:	9405      	str	r4, [sp, #20]
 8004560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
 8004568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456a:	f002 0201 	and.w	r2, r2, #1
 800456e:	9205      	str	r2, [sp, #20]
 8004570:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004572:	9406      	str	r4, [sp, #24]
 8004574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004576:	f042 0202 	orr.w	r2, r2, #2
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8004584:	4638      	mov	r0, r7
 8004586:	2201      	movs	r2, #1
 8004588:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800458a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800458c:	f7fc fe84 	bl	8001298 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8004590:	4622      	mov	r2, r4
 8004592:	4628      	mov	r0, r5
 8004594:	2104      	movs	r1, #4
 8004596:	f7fc fe7f 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);
 800459a:	2201      	movs	r2, #1
 800459c:	4628      	mov	r0, r5
 800459e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80045a2:	f7fc fe79 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045a6:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80045a8:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045aa:	a907      	add	r1, sp, #28
 80045ac:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80045ae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045b6:	f7fc fd89 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045ba:	2304      	movs	r3, #4
 80045bc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045be:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80045c0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045c2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80045c4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045ca:	f7fc fd7f 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045ce:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045d0:	a907      	add	r1, sp, #28
 80045d2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045dc:	f7fc fd76 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80045e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045e4:	a907      	add	r1, sp, #28
 80045e6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80045e8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ea:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ec:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ee:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045f0:	f7fc fd6c 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045f8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045fa:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045fc:	4b13      	ldr	r3, [pc, #76]	; (800464c <MX_GPIO_Init+0x154>)
 80045fe:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004600:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004602:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004604:	f7fc fd62 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800460c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800460e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <MX_GPIO_Init+0x158>)
 8004612:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004614:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004618:	f7fc fd58 	bl	80010cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800461c:	4622      	mov	r2, r4
 800461e:	4621      	mov	r1, r4
 8004620:	2017      	movs	r0, #23
 8004622:	f7fc fce5 	bl	8000ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004626:	2017      	movs	r0, #23
 8004628:	f7fc fd16 	bl	8001058 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800462c:	4622      	mov	r2, r4
 800462e:	4621      	mov	r1, r4
 8004630:	2028      	movs	r0, #40	; 0x28
 8004632:	f7fc fcdd 	bl	8000ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004636:	2028      	movs	r0, #40	; 0x28
 8004638:	f7fc fd0e 	bl	8001058 <HAL_NVIC_EnableIRQ>

}
 800463c:	b00d      	add	sp, #52	; 0x34
 800463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004640:	40023800 	.word	0x40023800
 8004644:	40021000 	.word	0x40021000
 8004648:	40021400 	.word	0x40021400
 800464c:	10110000 	.word	0x10110000
 8004650:	10210000 	.word	0x10210000

08004654 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004654:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004656:	480c      	ldr	r0, [pc, #48]	; (8004688 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <MX_I2C1_Init+0x38>)
 800465a:	f8df e034 	ldr.w	lr, [pc, #52]	; 8004690 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800465e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8004662:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004666:	2300      	movs	r3, #0
 8004668:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800466a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800466c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800466e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004670:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004672:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004674:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004676:	f7fc fff1 	bl	800165c <HAL_I2C_Init>
 800467a:	b118      	cbz	r0, 8004684 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 800467c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004680:	f000 bd5f 	b.w	8005142 <Error_Handler>
 8004684:	bd08      	pop	{r3, pc}
 8004686:	bf00      	nop
 8004688:	20001778 	.word	0x20001778
 800468c:	40005400 	.word	0x40005400
 8004690:	000186a0 	.word	0x000186a0

08004694 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004694:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8004696:	480b      	ldr	r0, [pc, #44]	; (80046c4 <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 400000;
 8004698:	4a0b      	ldr	r2, [pc, #44]	; (80046c8 <MX_I2C2_Init+0x34>)
 800469a:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <MX_I2C2_Init+0x38>)
 800469c:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
  hi2c2.Init.OwnAddress1 = 0;
 80046a0:	2300      	movs	r3, #0
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80046a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046a6:	6082      	str	r2, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80046a8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046aa:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046ac:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80046ae:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046b0:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046b2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80046b4:	f7fc ffd2 	bl	800165c <HAL_I2C_Init>
 80046b8:	b118      	cbz	r0, 80046c2 <MX_I2C2_Init+0x2e>
  {
    Error_Handler();
  }

}
 80046ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80046be:	f000 bd40 	b.w	8005142 <Error_Handler>
 80046c2:	bd08      	pop	{r3, pc}
 80046c4:	200017cc 	.word	0x200017cc
 80046c8:	40005800 	.word	0x40005800
 80046cc:	00061a80 	.word	0x00061a80

080046d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80046d0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d2:	2214      	movs	r2, #20
{
 80046d4:	b08b      	sub	sp, #44	; 0x2c
 80046d6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d8:	2100      	movs	r1, #0
 80046da:	eb0d 0002 	add.w	r0, sp, r2
 80046de:	f001 fa25 	bl	8005b2c <memset>
  if(i2cHandle->Instance==I2C1)
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	4a36      	ldr	r2, [pc, #216]	; (80047c0 <HAL_I2C_MspInit+0xf0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d135      	bne.n	8004756 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ea:	2500      	movs	r5, #0
 80046ec:	4c35      	ldr	r4, [pc, #212]	; (80047c4 <HAL_I2C_MspInit+0xf4>)
 80046ee:	9501      	str	r5, [sp, #4]
 80046f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f2:	4835      	ldr	r0, [pc, #212]	; (80047c8 <HAL_I2C_MspInit+0xf8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	6323      	str	r3, [r4, #48]	; 0x30
 80046fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004704:	23c0      	movs	r3, #192	; 0xc0
 8004706:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004708:	2312      	movs	r3, #18
 800470a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800470c:	2301      	movs	r3, #1
 800470e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004710:	2303      	movs	r3, #3
 8004712:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004714:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004716:	2304      	movs	r3, #4
 8004718:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471a:	f7fc fcd7 	bl	80010cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800471e:	9502      	str	r5, [sp, #8]
 8004720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004726:	6423      	str	r3, [r4, #64]	; 0x40
 8004728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800472a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800472e:	462a      	mov	r2, r5
 8004730:	4629      	mov	r1, r5
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004732:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004734:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004736:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004738:	f7fc fc5a 	bl	8000ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800473c:	201f      	movs	r0, #31
 800473e:	f7fc fc8b 	bl	8001058 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004742:	2020      	movs	r0, #32
 8004744:	462a      	mov	r2, r5
 8004746:	4629      	mov	r1, r5
 8004748:	f7fc fc52 	bl	8000ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800474c:	2020      	movs	r0, #32

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800474e:	f7fc fc83 	bl	8001058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004752:	b00b      	add	sp, #44	; 0x2c
 8004754:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_I2C_MspInit+0xfc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d1fa      	bne.n	8004752 <HAL_I2C_MspInit+0x82>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800475c:	2500      	movs	r5, #0
 800475e:	4c19      	ldr	r4, [pc, #100]	; (80047c4 <HAL_I2C_MspInit+0xf4>)
 8004760:	9503      	str	r5, [sp, #12]
 8004762:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004764:	481a      	ldr	r0, [pc, #104]	; (80047d0 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004766:	f043 0320 	orr.w	r3, r3, #32
 800476a:	6323      	str	r3, [r4, #48]	; 0x30
 800476c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	9303      	str	r3, [sp, #12]
 8004774:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004776:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004778:	2303      	movs	r3, #3
 800477a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800477c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004780:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004782:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004784:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004786:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004788:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800478a:	f7fc fc9f 	bl	80010cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800478e:	9504      	str	r5, [sp, #16]
 8004790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004792:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004796:	6423      	str	r3, [r4, #64]	; 0x40
 8004798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800479e:	462a      	mov	r2, r5
 80047a0:	4629      	mov	r1, r5
    __HAL_RCC_I2C2_CLK_ENABLE();
 80047a2:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80047a4:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 80047a6:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80047a8:	f7fc fc22 	bl	8000ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80047ac:	2021      	movs	r0, #33	; 0x21
 80047ae:	f7fc fc53 	bl	8001058 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80047b2:	2022      	movs	r0, #34	; 0x22
 80047b4:	462a      	mov	r2, r5
 80047b6:	4629      	mov	r1, r5
 80047b8:	f7fc fc1a 	bl	8000ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80047bc:	2022      	movs	r0, #34	; 0x22
 80047be:	e7c6      	b.n	800474e <HAL_I2C_MspInit+0x7e>
 80047c0:	40005400 	.word	0x40005400
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40020400 	.word	0x40020400
 80047cc:	40005800 	.word	0x40005800
 80047d0:	40021400 	.word	0x40021400

080047d4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80047d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	if('\n' == ch)
 80047d6:	280a      	cmp	r0, #10
{
 80047d8:	9001      	str	r0, [sp, #4]
	if('\n' == ch)
 80047da:	d109      	bne.n	80047f0 <__io_putchar+0x1c>
	{
		int ch_tmp = '\r';
 80047dc:	a904      	add	r1, sp, #16
 80047de:	230d      	movs	r3, #13
 80047e0:	f841 3d04 	str.w	r3, [r1, #-4]!

		HAL_UART_Transmit(&huart1, (uint8_t *)&ch_tmp, 1, 0xFFFF);
 80047e4:	2201      	movs	r2, #1
 80047e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047ea:	4807      	ldr	r0, [pc, #28]	; (8004808 <__io_putchar+0x34>)
 80047ec:	f7fe fd3e 	bl	800326c <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80047f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047f4:	2201      	movs	r2, #1
 80047f6:	a901      	add	r1, sp, #4
 80047f8:	4803      	ldr	r0, [pc, #12]	; (8004808 <__io_putchar+0x34>)
 80047fa:	f7fe fd37 	bl	800326c <HAL_UART_Transmit>

	return ch;
}
 80047fe:	9801      	ldr	r0, [sp, #4]
 8004800:	b005      	add	sp, #20
 8004802:	f85d fb04 	ldr.w	pc, [sp], #4
 8004806:	bf00      	nop
 8004808:	20002b30 	.word	0x20002b30

0800480c <I2C2_ClearBusyFlagErratum>:
uint32_t tickstart1;
uint32_t tickstart2;
int fflag = 0;

void I2C2_ClearBusyFlagErratum(I2C_HandleTypeDef *instance, I2C_HandleTypeDef* instance2)
{
 800480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	4680      	mov	r8, r0
 8004812:	b08b      	sub	sp, #44	; 0x2c
 8004814:	460f      	mov	r7, r1
    GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct2;
    int timeout =100;
    int timeout_cnt=0;
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8004816:	2201      	movs	r2, #1
 8004818:	2104      	movs	r1, #4
 800481a:	488d      	ldr	r0, [pc, #564]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
 800481c:	f7fc fd3c 	bl	8001298 <HAL_GPIO_WritePin>
    // 1. Clear PE bit.
    instance->Instance->CR1 &= ~(0x0001);
 8004820:	f8d8 2000 	ldr.w	r2, [r8]
    GPIO_InitStruct2.Alternate    = GPIO_AF4_I2C2;
    GPIO_InitStruct2.Pull         = GPIO_PULLUP;
    GPIO_InitStruct2.Speed        = GPIO_SPEED_FREQ_HIGH;

    GPIO_InitStruct.Pin          = I2C1_SCL_PIN;
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 8004824:	488b      	ldr	r0, [pc, #556]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
    instance->Instance->CR1 &= ~(0x0001);
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	6013      	str	r3, [r2, #0]
	instance2->Instance->CR1 &= ~(0x0001);
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	6813      	ldr	r3, [r2, #0]
    GPIO_InitStruct.Pin          = I2C1_SCL_PIN;
 8004832:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004836:	2640      	movs	r6, #64	; 0x40
	instance2->Instance->CR1 &= ~(0x0001);
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin          = I2C1_SCL_PIN;
 800483e:	f849 6d28 	str.w	r6, [r9, #-40]!
    GPIO_InitStruct.Alternate    = GPIO_AF4_I2C1;
 8004842:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull         = GPIO_PULLUP;
 8004844:	2401      	movs	r4, #1
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_HIGH;
 8004846:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode         = GPIO_MODE_OUTPUT_OD;
 8004848:	2211      	movs	r2, #17
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 800484a:	4649      	mov	r1, r9
    GPIO_InitStruct.Alternate    = GPIO_AF4_I2C1;
 800484c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct2.Alternate    = GPIO_AF4_I2C2;
 800484e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode         = GPIO_MODE_OUTPUT_OD;
 8004850:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pull         = GPIO_PULLUP;
 8004852:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_HIGH;
 8004854:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct2.Mode         = GPIO_MODE_OUTPUT_OD;
 8004856:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct2.Pull         = GPIO_PULLUP;
 8004858:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct2.Speed        = GPIO_SPEED_FREQ_HIGH;
 800485a:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 800485c:	f7fc fc36 	bl	80010cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8004860:	4622      	mov	r2, r4
 8004862:	4631      	mov	r1, r6
 8004864:	487b      	ldr	r0, [pc, #492]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
 8004866:	f7fc fd17 	bl	8001298 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin          = I2C1_SDA_PIN;
 800486a:	2680      	movs	r6, #128	; 0x80
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 800486c:	4649      	mov	r1, r9
 800486e:	4879      	ldr	r0, [pc, #484]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
    GPIO_InitStruct.Pin          = I2C1_SDA_PIN;
 8004870:	9600      	str	r6, [sp, #0]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8004872:	f7fc fc2b 	bl	80010cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8004876:	4631      	mov	r1, r6
    GPIO_InitStruct2.Pin          = I2C2_SCL_PIN;
 8004878:	ae0a      	add	r6, sp, #40	; 0x28
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 800487a:	4622      	mov	r2, r4
 800487c:	4875      	ldr	r0, [pc, #468]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
 800487e:	f7fc fd0b 	bl	8001298 <HAL_GPIO_WritePin>
    GPIO_InitStruct2.Pin          = I2C2_SCL_PIN;
 8004882:	f846 5d14 	str.w	r5, [r6, #-20]!
    HAL_GPIO_Init(I2C2_SCL_PORT, &GPIO_InitStruct2);
 8004886:	4872      	ldr	r0, [pc, #456]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
 8004888:	4631      	mov	r1, r6
 800488a:	f7fc fc1f 	bl	80010cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 800488e:	4622      	mov	r2, r4
 8004890:	4629      	mov	r1, r5
 8004892:	486f      	ldr	r0, [pc, #444]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
    HAL_GPIO_Init(I2C2_SDA_PORT, &GPIO_InitStruct2);
    HAL_GPIO_WritePin(I2C2_SDA_PORT, I2C2_SDA_PIN, GPIO_PIN_SET);

    //HAL_UART_Transmit(&huart1, (uint8_t *)"2\n", strlen("1\n"), 0xFFFF);
    // 3. Check SCL and SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8004894:	4d6f      	ldr	r5, [pc, #444]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
    HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 8004896:	f7fc fcff 	bl	8001298 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(I2C2_SDA_PORT, &GPIO_InitStruct2);
 800489a:	4631      	mov	r1, r6
 800489c:	486c      	ldr	r0, [pc, #432]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
    GPIO_InitStruct2.Pin          = I2C2_SDA_PIN;
 800489e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(I2C2_SDA_PORT, &GPIO_InitStruct2);
 80048a0:	f7fc fc14 	bl	80010cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C2_SDA_PORT, I2C2_SDA_PIN, GPIO_PIN_SET);
 80048a4:	4622      	mov	r2, r4
 80048a6:	4621      	mov	r1, r4
 80048a8:	4869      	ldr	r0, [pc, #420]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
 80048aa:	f7fc fcf5 	bl	8001298 <HAL_GPIO_WritePin>
    int timeout_cnt=0;
 80048ae:	2400      	movs	r4, #0
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80048b0:	2140      	movs	r1, #64	; 0x40
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7fc fcea 	bl	800128c <HAL_GPIO_ReadPin>
 80048b8:	2801      	cmp	r0, #1
 80048ba:	d101      	bne.n	80048c0 <I2C2_ClearBusyFlagErratum+0xb4>
    {
        timeout_cnt++;
        if(timeout_cnt>timeout)
            return;
    }
	while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SCL_PORT, I2C2_SCL_PIN))
 80048bc:	4d64      	ldr	r5, [pc, #400]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
 80048be:	e008      	b.n	80048d2 <I2C2_ClearBusyFlagErratum+0xc6>
        timeout_cnt++;
 80048c0:	3401      	adds	r4, #1
        if(timeout_cnt>timeout)
 80048c2:	2c65      	cmp	r4, #101	; 0x65
 80048c4:	d1f4      	bne.n	80048b0 <I2C2_ClearBusyFlagErratum+0xa4>
	if(hr_flag)
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
	if(fall_flag)
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
}
 80048c6:	b00b      	add	sp, #44	; 0x2c
 80048c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        timeout_cnt++;
 80048cc:	3401      	adds	r4, #1
        if(timeout_cnt>timeout)
 80048ce:	2c65      	cmp	r4, #101	; 0x65
 80048d0:	d0f9      	beq.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
	while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SCL_PORT, I2C2_SCL_PIN))
 80048d2:	2102      	movs	r1, #2
 80048d4:	4628      	mov	r0, r5
 80048d6:	f7fc fcd9 	bl	800128c <HAL_GPIO_ReadPin>
 80048da:	2801      	cmp	r0, #1
 80048dc:	d1f6      	bne.n	80048cc <I2C2_ClearBusyFlagErratum+0xc0>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 80048de:	4d5d      	ldr	r5, [pc, #372]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
 80048e0:	e00d      	b.n	80048fe <I2C2_ClearBusyFlagErratum+0xf2>
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2140      	movs	r1, #64	; 0x40
 80048e6:	4628      	mov	r0, r5
 80048e8:	f7fc fcd6 	bl	8001298 <HAL_GPIO_WritePin>
        asm("nop");
 80048ec:	bf00      	nop
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 80048ee:	2201      	movs	r2, #1
 80048f0:	2140      	movs	r1, #64	; 0x40
 80048f2:	4628      	mov	r0, r5
        timeout_cnt++;
 80048f4:	3401      	adds	r4, #1
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 80048f6:	f7fc fccf 	bl	8001298 <HAL_GPIO_WritePin>
        if(timeout_cnt>timeout)
 80048fa:	2c64      	cmp	r4, #100	; 0x64
 80048fc:	dce3      	bgt.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 80048fe:	2180      	movs	r1, #128	; 0x80
 8004900:	4628      	mov	r0, r5
 8004902:	f7fc fcc3 	bl	800128c <HAL_GPIO_ReadPin>
 8004906:	2801      	cmp	r0, #1
 8004908:	d1eb      	bne.n	80048e2 <I2C2_ClearBusyFlagErratum+0xd6>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SDA_PORT, I2C2_SDA_PIN))
 800490a:	4d51      	ldr	r5, [pc, #324]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
 800490c:	e00c      	b.n	8004928 <I2C2_ClearBusyFlagErratum+0x11c>
        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_RESET);
 800490e:	2102      	movs	r1, #2
 8004910:	4628      	mov	r0, r5
 8004912:	f7fc fcc1 	bl	8001298 <HAL_GPIO_WritePin>
        asm("nop");
 8004916:	bf00      	nop
        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 8004918:	2201      	movs	r2, #1
 800491a:	2102      	movs	r1, #2
 800491c:	4628      	mov	r0, r5
        timeout_cnt++;
 800491e:	3401      	adds	r4, #1
        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 8004920:	f7fc fcba 	bl	8001298 <HAL_GPIO_WritePin>
        if(timeout_cnt>timeout)
 8004924:	2c64      	cmp	r4, #100	; 0x64
 8004926:	dcce      	bgt.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SDA_PORT, I2C2_SDA_PIN))
 8004928:	2101      	movs	r1, #1
 800492a:	4628      	mov	r0, r5
 800492c:	f7fc fcae 	bl	800128c <HAL_GPIO_ReadPin>
 8004930:	2801      	cmp	r0, #1
 8004932:	4682      	mov	sl, r0
        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_RESET);
 8004934:	f04f 0200 	mov.w	r2, #0
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SDA_PORT, I2C2_SDA_PIN))
 8004938:	d1e9      	bne.n	800490e <I2C2_ClearBusyFlagErratum+0x102>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_RESET);
 800493a:	2180      	movs	r1, #128	; 0x80
 800493c:	4845      	ldr	r0, [pc, #276]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 800493e:	4d45      	ldr	r5, [pc, #276]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_RESET);
 8004940:	f7fc fcaa 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C2_SDA_PORT, I2C2_SDA_PIN, GPIO_PIN_RESET);
 8004944:	2200      	movs	r2, #0
 8004946:	4651      	mov	r1, sl
 8004948:	4841      	ldr	r0, [pc, #260]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
 800494a:	f7fc fca5 	bl	8001298 <HAL_GPIO_WritePin>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	4628      	mov	r0, r5
 8004952:	f7fc fc9b 	bl	800128c <HAL_GPIO_ReadPin>
 8004956:	b910      	cbnz	r0, 800495e <I2C2_ClearBusyFlagErratum+0x152>
	while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C2_SDA_PORT, I2C2_SDA_PIN))
 8004958:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8004a50 <I2C2_ClearBusyFlagErratum+0x244>
 800495c:	e006      	b.n	800496c <I2C2_ClearBusyFlagErratum+0x160>
        timeout_cnt++;
 800495e:	3401      	adds	r4, #1
        if(timeout_cnt>timeout)
 8004960:	2c64      	cmp	r4, #100	; 0x64
 8004962:	ddf4      	ble.n	800494e <I2C2_ClearBusyFlagErratum+0x142>
 8004964:	e7af      	b.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
        timeout_cnt++;
 8004966:	3401      	adds	r4, #1
        if(timeout_cnt>timeout)
 8004968:	2c64      	cmp	r4, #100	; 0x64
 800496a:	dcac      	bgt.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
	while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C2_SDA_PORT, I2C2_SDA_PIN))
 800496c:	2101      	movs	r1, #1
 800496e:	4650      	mov	r0, sl
 8004970:	f7fc fc8c 	bl	800128c <HAL_GPIO_ReadPin>
 8004974:	4605      	mov	r5, r0
 8004976:	2800      	cmp	r0, #0
 8004978:	d1f5      	bne.n	8004966 <I2C2_ClearBusyFlagErratum+0x15a>
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 800497a:	4602      	mov	r2, r0
 800497c:	2140      	movs	r1, #64	; 0x40
 800497e:	4835      	ldr	r0, [pc, #212]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
 8004980:	f7fc fc8a 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_RESET);
 8004984:	462a      	mov	r2, r5
 8004986:	2102      	movs	r1, #2
 8004988:	4831      	ldr	r0, [pc, #196]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
 800498a:	f7fc fc85 	bl	8001298 <HAL_GPIO_WritePin>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 800498e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004992:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
 8004996:	2140      	movs	r1, #64	; 0x40
 8004998:	4628      	mov	r0, r5
 800499a:	f7fc fc77 	bl	800128c <HAL_GPIO_ReadPin>
 800499e:	b908      	cbnz	r0, 80049a4 <I2C2_ClearBusyFlagErratum+0x198>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C2_SCL_PORT, I2C2_SCL_PIN))
 80049a0:	4d2b      	ldr	r5, [pc, #172]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
 80049a2:	e006      	b.n	80049b2 <I2C2_ClearBusyFlagErratum+0x1a6>
        timeout_cnt++;
 80049a4:	3401      	adds	r4, #1
        if(timeout_cnt>timeout)
 80049a6:	2c64      	cmp	r4, #100	; 0x64
 80049a8:	ddf5      	ble.n	8004996 <I2C2_ClearBusyFlagErratum+0x18a>
 80049aa:	e78c      	b.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
        timeout_cnt++;
 80049ac:	3401      	adds	r4, #1
        if(timeout_cnt>timeout)
 80049ae:	2c64      	cmp	r4, #100	; 0x64
 80049b0:	dc89      	bgt.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C2_SCL_PORT, I2C2_SCL_PIN))
 80049b2:	2102      	movs	r1, #2
 80049b4:	4628      	mov	r0, r5
 80049b6:	f7fc fc69 	bl	800128c <HAL_GPIO_ReadPin>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d1f6      	bne.n	80049ac <I2C2_ClearBusyFlagErratum+0x1a0>
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 80049be:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80049c2:	2201      	movs	r2, #1
 80049c4:	2140      	movs	r1, #64	; 0x40
 80049c6:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 80049ca:	f7fc fc65 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 80049ce:	2201      	movs	r2, #1
 80049d0:	2102      	movs	r1, #2
 80049d2:	481f      	ldr	r0, [pc, #124]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80049d4:	4d1f      	ldr	r5, [pc, #124]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
	HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 80049d6:	f7fc fc5f 	bl	8001298 <HAL_GPIO_WritePin>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80049da:	2140      	movs	r1, #64	; 0x40
 80049dc:	4628      	mov	r0, r5
 80049de:	f7fc fc55 	bl	800128c <HAL_GPIO_ReadPin>
 80049e2:	2801      	cmp	r0, #1
 80049e4:	d102      	bne.n	80049ec <I2C2_ClearBusyFlagErratum+0x1e0>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SCL_PORT, I2C2_SCL_PIN))
 80049e6:	f8df a068 	ldr.w	sl, [pc, #104]	; 8004a50 <I2C2_ClearBusyFlagErratum+0x244>
 80049ea:	e007      	b.n	80049fc <I2C2_ClearBusyFlagErratum+0x1f0>
        timeout_cnt++;
 80049ec:	3401      	adds	r4, #1
        if(timeout_cnt>timeout)
 80049ee:	2c64      	cmp	r4, #100	; 0x64
 80049f0:	ddf3      	ble.n	80049da <I2C2_ClearBusyFlagErratum+0x1ce>
 80049f2:	e768      	b.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
        timeout_cnt++;
 80049f4:	3401      	adds	r4, #1
        if(timeout_cnt>timeout)
 80049f6:	2c64      	cmp	r4, #100	; 0x64
 80049f8:	f73f af65 	bgt.w	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SCL_PORT, I2C2_SCL_PIN))
 80049fc:	2102      	movs	r1, #2
 80049fe:	4650      	mov	r0, sl
 8004a00:	f7fc fc44 	bl	800128c <HAL_GPIO_ReadPin>
 8004a04:	2801      	cmp	r0, #1
 8004a06:	4605      	mov	r5, r0
 8004a08:	d1f4      	bne.n	80049f4 <I2C2_ClearBusyFlagErratum+0x1e8>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	2180      	movs	r1, #128	; 0x80
 8004a0e:	4811      	ldr	r0, [pc, #68]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
 8004a10:	f7fc fc42 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C2_SDA_PORT, I2C2_SDA_PIN, GPIO_PIN_SET);
 8004a14:	462a      	mov	r2, r5
 8004a16:	4629      	mov	r1, r5
 8004a18:	480d      	ldr	r0, [pc, #52]	; (8004a50 <I2C2_ClearBusyFlagErratum+0x244>)
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8004a1a:	4d0e      	ldr	r5, [pc, #56]	; (8004a54 <I2C2_ClearBusyFlagErratum+0x248>)
	HAL_GPIO_WritePin(I2C2_SDA_PORT, I2C2_SDA_PIN, GPIO_PIN_SET);
 8004a1c:	f7fc fc3c 	bl	8001298 <HAL_GPIO_WritePin>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8004a20:	2180      	movs	r1, #128	; 0x80
 8004a22:	4628      	mov	r0, r5
 8004a24:	f7fc fc32 	bl	800128c <HAL_GPIO_ReadPin>
 8004a28:	2801      	cmp	r0, #1
 8004a2a:	d102      	bne.n	8004a32 <I2C2_ClearBusyFlagErratum+0x226>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SDA_PORT, I2C2_SDA_PIN))
 8004a2c:	f8df a020 	ldr.w	sl, [pc, #32]	; 8004a50 <I2C2_ClearBusyFlagErratum+0x244>
 8004a30:	e021      	b.n	8004a76 <I2C2_ClearBusyFlagErratum+0x26a>
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 8004a32:	2200      	movs	r2, #0
 8004a34:	2140      	movs	r1, #64	; 0x40
 8004a36:	4628      	mov	r0, r5
 8004a38:	f7fc fc2e 	bl	8001298 <HAL_GPIO_WritePin>
        asm("nop");
 8004a3c:	bf00      	nop
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8004a3e:	2201      	movs	r2, #1
 8004a40:	2140      	movs	r1, #64	; 0x40
 8004a42:	4628      	mov	r0, r5
        timeout_cnt++;
 8004a44:	3401      	adds	r4, #1
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8004a46:	f7fc fc27 	bl	8001298 <HAL_GPIO_WritePin>
        if(timeout_cnt>timeout)
 8004a4a:	2c64      	cmp	r4, #100	; 0x64
 8004a4c:	dde8      	ble.n	8004a20 <I2C2_ClearBusyFlagErratum+0x214>
 8004a4e:	e73a      	b.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
 8004a50:	40021400 	.word	0x40021400
 8004a54:	40020400 	.word	0x40020400
        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_RESET);
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	f7fc fc1b 	bl	8001298 <HAL_GPIO_WritePin>
        asm("nop");
 8004a62:	bf00      	nop
        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 8004a64:	2201      	movs	r2, #1
 8004a66:	2102      	movs	r1, #2
 8004a68:	4650      	mov	r0, sl
        timeout_cnt++;
 8004a6a:	3401      	adds	r4, #1
        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 8004a6c:	f7fc fc14 	bl	8001298 <HAL_GPIO_WritePin>
        if(timeout_cnt>timeout)
 8004a70:	2c64      	cmp	r4, #100	; 0x64
 8004a72:	f73f af28 	bgt.w	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C2_SDA_PORT, I2C2_SDA_PIN))
 8004a76:	2101      	movs	r1, #1
 8004a78:	4650      	mov	r0, sl
 8004a7a:	f7fc fc07 	bl	800128c <HAL_GPIO_ReadPin>
 8004a7e:	2801      	cmp	r0, #1
 8004a80:	4605      	mov	r5, r0
 8004a82:	d1e9      	bne.n	8004a58 <I2C2_ClearBusyFlagErratum+0x24c>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a84:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a86:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a88:	9002      	str	r0, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8a:	f04f 0a00 	mov.w	sl, #0
    GPIO_InitStruct2.Pull = GPIO_PULLUP;
 8004a8e:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Pin = I2C1_SCL_PIN;
 8004a90:	2440      	movs	r4, #64	; 0x40
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 8004a92:	4649      	mov	r1, r9
 8004a94:	483e      	ldr	r0, [pc, #248]	; (8004b90 <I2C2_ClearBusyFlagErratum+0x384>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a96:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct2.Alternate = GPIO_AF4_I2C2;
 8004a98:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a9a:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct2.Mode = GPIO_MODE_AF_OD;
 8004a9c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = I2C1_SDA_PIN;
 8004a9e:	f04f 0b80 	mov.w	fp, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa2:	f8cd a00c 	str.w	sl, [sp, #12]
    GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa6:	f8cd a020 	str.w	sl, [sp, #32]
    GPIO_InitStruct.Pin = I2C1_SCL_PIN;
 8004aaa:	9400      	str	r4, [sp, #0]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 8004aac:	f7fc fb0e 	bl	80010cc <HAL_GPIO_Init>
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	4837      	ldr	r0, [pc, #220]	; (8004b90 <I2C2_ClearBusyFlagErratum+0x384>)
    GPIO_InitStruct.Pin = I2C1_SDA_PIN;
 8004ab4:	f8cd b000 	str.w	fp, [sp]
	GPIO_InitStruct2.Pin = I2C2_SCL_PIN;
 8004ab8:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8004abc:	f7fc fb06 	bl	80010cc <HAL_GPIO_Init>
    HAL_GPIO_Init(I2C2_SCL_PORT, &GPIO_InitStruct2);
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4834      	ldr	r0, [pc, #208]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
	GPIO_InitStruct2.Pin = I2C2_SCL_PIN;
 8004ac4:	f8cd 9014 	str.w	r9, [sp, #20]
    HAL_GPIO_Init(I2C2_SCL_PORT, &GPIO_InitStruct2);
 8004ac8:	f7fc fb00 	bl	80010cc <HAL_GPIO_Init>
    HAL_GPIO_Init(I2C2_SDA_PORT, &GPIO_InitStruct2);
 8004acc:	4631      	mov	r1, r6
 8004ace:	4831      	ldr	r0, [pc, #196]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
    GPIO_InitStruct2.Pin = I2C2_SDA_PIN;
 8004ad0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2C2_SDA_PORT, &GPIO_InitStruct2);
 8004ad2:	f7fc fafb 	bl	80010cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8004ad6:	462a      	mov	r2, r5
 8004ad8:	4621      	mov	r1, r4
 8004ada:	482d      	ldr	r0, [pc, #180]	; (8004b90 <I2C2_ClearBusyFlagErratum+0x384>)
 8004adc:	f7fc fbdc 	bl	8001298 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4659      	mov	r1, fp
 8004ae4:	482a      	ldr	r0, [pc, #168]	; (8004b90 <I2C2_ClearBusyFlagErratum+0x384>)
 8004ae6:	f7fc fbd7 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 8004aea:	462a      	mov	r2, r5
 8004aec:	4649      	mov	r1, r9
 8004aee:	4829      	ldr	r0, [pc, #164]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
 8004af0:	f7fc fbd2 	bl	8001298 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C2_SDA_PORT, I2C2_SDA_PIN, GPIO_PIN_SET);
 8004af4:	462a      	mov	r2, r5
 8004af6:	4629      	mov	r1, r5
 8004af8:	4826      	ldr	r0, [pc, #152]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
 8004afa:	f7fc fbcd 	bl	8001298 <HAL_GPIO_WritePin>
    instance->Instance->CR1 |= 0x8000;
 8004afe:	f8d8 2000 	ldr.w	r2, [r8]
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b08:	6013      	str	r3, [r2, #0]
	instance2->Instance->CR1 |= 0x8000;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6819      	ldr	r1, [r3, #0]
 8004b0e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004b12:	6019      	str	r1, [r3, #0]
    asm("nop");
 8004b14:	bf00      	nop
    instance->Instance->CR1 &= ~0x8000;
 8004b16:	6811      	ldr	r1, [r2, #0]
 8004b18:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004b1c:	6011      	str	r1, [r2, #0]
	instance2->Instance->CR1 &= ~0x8000;
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004b24:	6019      	str	r1, [r3, #0]
    asm("nop");
 8004b26:	bf00      	nop
    instance->Instance->CR1 |= 0x0001;
 8004b28:	6811      	ldr	r1, [r2, #0]
 8004b2a:	f041 0101 	orr.w	r1, r1, #1
 8004b2e:	6011      	str	r1, [r2, #0]
	instance2->Instance->CR1 |= 0x0001;
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
    HAL_I2C_Init(instance);
 8004b38:	4640      	mov	r0, r8
 8004b3a:	f7fc fd8f 	bl	800165c <HAL_I2C_Init>
	HAL_I2C_Init(instance2);
 8004b3e:	4638      	mov	r0, r7
 8004b40:	f7fc fd8c 	bl	800165c <HAL_I2C_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 8004b44:	462a      	mov	r2, r5
 8004b46:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004b4a:	4812      	ldr	r0, [pc, #72]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
 8004b4c:	f7fc fba4 	bl	8001298 <HAL_GPIO_WritePin>
	if(gyro_onoff)
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <I2C2_ClearBusyFlagErratum+0x38c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b123      	cbz	r3, 8004b60 <I2C2_ClearBusyFlagErratum+0x354>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8004b56:	4652      	mov	r2, sl
 8004b58:	4621      	mov	r1, r4
 8004b5a:	480e      	ldr	r0, [pc, #56]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
 8004b5c:	f7fc fb9c 	bl	8001298 <HAL_GPIO_WritePin>
	if(hr_flag)
 8004b60:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <I2C2_ClearBusyFlagErratum+0x390>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	b123      	cbz	r3, 8004b70 <I2C2_ClearBusyFlagErratum+0x364>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8004b66:	2200      	movs	r2, #0
 8004b68:	2180      	movs	r1, #128	; 0x80
 8004b6a:	480a      	ldr	r0, [pc, #40]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
 8004b6c:	f7fc fb94 	bl	8001298 <HAL_GPIO_WritePin>
	if(fall_flag)
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <I2C2_ClearBusyFlagErratum+0x394>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b12b      	cbz	r3, 8004b82 <I2C2_ClearBusyFlagErratum+0x376>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
 8004b76:	2200      	movs	r2, #0
 8004b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b7c:	4805      	ldr	r0, [pc, #20]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
 8004b7e:	f7fc fb8b 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8004b82:	2200      	movs	r2, #0
 8004b84:	2104      	movs	r1, #4
 8004b86:	4803      	ldr	r0, [pc, #12]	; (8004b94 <I2C2_ClearBusyFlagErratum+0x388>)
 8004b88:	f7fc fb86 	bl	8001298 <HAL_GPIO_WritePin>
 8004b8c:	e69b      	b.n	80048c6 <I2C2_ClearBusyFlagErratum+0xba>
 8004b8e:	bf00      	nop
 8004b90:	40020400 	.word	0x40020400
 8004b94:	40021400 	.word	0x40021400
 8004b98:	20000db0 	.word	0x20000db0
 8004b9c:	20000db4 	.word	0x20000db4
 8004ba0:	20000da4 	.word	0x20000da4

08004ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ba8:	2230      	movs	r2, #48	; 0x30
 8004baa:	2100      	movs	r1, #0
 8004bac:	a808      	add	r0, sp, #32
 8004bae:	f000 ffbd 	bl	8005b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	2214      	movs	r2, #20
 8004bb6:	a803      	add	r0, sp, #12
 8004bb8:	f000 ffb8 	bl	8005b2c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bbc:	2400      	movs	r4, #0
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <SystemClock_Config+0x8c>)
 8004bc0:	9401      	str	r4, [sp, #4]
 8004bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd4:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <SystemClock_Config+0x90>)
 8004bd6:	9402      	str	r4, [sp, #8]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be6:	9302      	str	r3, [sp, #8]
 8004be8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bf4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004bf6:	2319      	movs	r3, #25
 8004bf8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004bfa:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bfc:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bfe:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004c00:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c02:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004c04:	2304      	movs	r3, #4
 8004c06:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c08:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c0a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c0c:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c0e:	f7fd ff45 	bl	8002a9c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c12:	230f      	movs	r3, #15
 8004c14:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004c1a:	4631      	mov	r1, r6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004c20:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c22:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c24:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c26:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004c28:	f7fe f8e8 	bl	8002dfc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004c2c:	b014      	add	sp, #80	; 0x50
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40007000 	.word	0x40007000

08004c38 <main>:
{
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	b0a5      	sub	sp, #148	; 0x94
  HAL_Init();
 8004c3e:	f7fc f9ab 	bl	8000f98 <HAL_Init>
  SystemClock_Config();
 8004c42:	f7ff ffaf 	bl	8004ba4 <SystemClock_Config>
  MX_GPIO_Init();
 8004c46:	f7ff fc57 	bl	80044f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004c4a:	f7ff fd03 	bl	8004654 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004c4e:	f7ff fd21 	bl	8004694 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8004c52:	f000 fe63 	bl	800591c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004c56:	f000 fe7d 	bl	8005954 <MX_USART6_UART_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	2120      	movs	r1, #32
 8004c5e:	487c      	ldr	r0, [pc, #496]	; (8004e50 <main+0x218>)
 8004c60:	f7fc fb1a 	bl	8001298 <HAL_GPIO_WritePin>
  if(HAL_UART_Receive_IT(&huart1, g_Uart_RxBuffer, UART_RXBUFFERSIZE) != HAL_OK)
 8004c64:	2264      	movs	r2, #100	; 0x64
 8004c66:	497b      	ldr	r1, [pc, #492]	; (8004e54 <main+0x21c>)
 8004c68:	487b      	ldr	r0, [pc, #492]	; (8004e58 <main+0x220>)
 8004c6a:	f7fe fb5c 	bl	8003326 <HAL_UART_Receive_IT>
  if(HAL_UART_Receive_IT(&huart6, g_Uart_6_Com_RxBuffer, UART_RXBUFFERSIZE) != HAL_OK)
 8004c6e:	2264      	movs	r2, #100	; 0x64
 8004c70:	497a      	ldr	r1, [pc, #488]	; (8004e5c <main+0x224>)
 8004c72:	487b      	ldr	r0, [pc, #492]	; (8004e60 <main+0x228>)
 8004c74:	f7fe fb57 	bl	8003326 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart6, (uint8_t *)"test\n", strlen("test\n"), 0xFFFF);
 8004c78:	2205      	movs	r2, #5
 8004c7a:	497a      	ldr	r1, [pc, #488]	; (8004e64 <main+0x22c>)
 8004c7c:	4878      	ldr	r0, [pc, #480]	; (8004e60 <main+0x228>)
 8004c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c82:	f7fe faf3 	bl	800326c <HAL_UART_Transmit>
	if (MPU9250_Init(&hi2c2, &MPU9250, MPU9250_Device_0) != MPU9250_Result_Ok) {
 8004c86:	2200      	movs	r2, #0
 8004c88:	4977      	ldr	r1, [pc, #476]	; (8004e68 <main+0x230>)
 8004c8a:	4878      	ldr	r0, [pc, #480]	; (8004e6c <main+0x234>)
 8004c8c:	f7fe ffa6 	bl	8003bdc <MPU9250_Init>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	f040 8093 	bne.w	8004dbc <main+0x184>
	TM_AHRSIMU_Init(&IMU, 1000, 0.5, 0);
 8004c96:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8004e70 <main+0x238>
 8004c9a:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8004e74 <main+0x23c>
 8004c9e:	4876      	ldr	r0, [pc, #472]	; (8004e78 <main+0x240>)
 8004ca0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8004ca4:	f000 fbf8 	bl	8005498 <TM_AHRSIMU_Init>
	if(Max30102_Init(&hi2c1) != MAX30102_OK){
 8004ca8:	4874      	ldr	r0, [pc, #464]	; (8004e7c <main+0x244>)
 8004caa:	f7fe fef9 	bl	8003aa0 <Max30102_Init>
 8004cae:	2801      	cmp	r0, #1
 8004cb0:	f040 80a3 	bne.w	8004dfa <main+0x1c2>
	printf("START\n");
 8004cb4:	4872      	ldr	r0, [pc, #456]	; (8004e80 <main+0x248>)
		if (MPU9250_DataReady(&hi2c2, &MPU9250) == MPU9250_Result_Ok) {
 8004cb6:	4c6c      	ldr	r4, [pc, #432]	; (8004e68 <main+0x230>)
	printf("START\n");
 8004cb8:	f001 fcb4 	bl	8006624 <puts>
			if(SMV > 3.4) {
 8004cbc:	f20f 1b88 	addw	fp, pc, #392	; 0x188
 8004cc0:	e9db ab00 	ldrd	sl, fp, [fp]
	int sum_hr = 0;
 8004cc4:	2600      	movs	r6, #0
	int hr, hr_count = 0;
 8004cc6:	4637      	mov	r7, r6
		UART6_Test();
 8004cc8:	f000 fe02 	bl	80058d0 <UART6_Test>
		if (MPU9250_DataReady(&hi2c2, &MPU9250) == MPU9250_Result_Ok) {
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4867      	ldr	r0, [pc, #412]	; (8004e6c <main+0x234>)
 8004cd0:	f7ff f978 	bl	8003fc4 <MPU9250_DataReady>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f040 809e 	bne.w	8004e16 <main+0x1de>
			MPU9250_ReadAcce(&hi2c2, &MPU9250);
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4863      	ldr	r0, [pc, #396]	; (8004e6c <main+0x234>)
 8004cde:	f7ff f88d 	bl	8003dfc <MPU9250_ReadAcce>
			MPU9250_ReadGyro(&hi2c2, &MPU9250);
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4861      	ldr	r0, [pc, #388]	; (8004e6c <main+0x234>)
 8004ce6:	f7ff f8c7 	bl	8003e78 <MPU9250_ReadGyro>
			MPU9250_ReadMag(&hi2c2, &MPU9250);
 8004cea:	4621      	mov	r1, r4
 8004cec:	485f      	ldr	r0, [pc, #380]	; (8004e6c <main+0x234>)
 8004cee:	f7ff f90b 	bl	8003f08 <MPU9250_ReadMag>
		TM_AHRSIMU_UpdateIMU(&IMU, MPU9250.Gx, MPU9250.Gy, MPU9250.Gz, MPU9250.Ax, MPU9250.Ay, MPU9250.Az);
 8004cf2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8004e78 <main+0x240>
 8004cf6:	edd4 2a02 	vldr	s5, [r4, #8]
 8004cfa:	ed94 2a01 	vldr	s4, [r4, #4]
 8004cfe:	edd4 1a00 	vldr	s3, [r4]
 8004d02:	ed94 1a05 	vldr	s2, [r4, #20]
 8004d06:	edd4 0a04 	vldr	s1, [r4, #16]
 8004d0a:	ed94 0a03 	vldr	s0, [r4, #12]
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f000 fbd3 	bl	80054ba <TM_AHRSIMU_UpdateIMU>
		if(gyro_onoff) {
 8004d14:	4b5b      	ldr	r3, [pc, #364]	; (8004e84 <main+0x24c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	9305      	str	r3, [sp, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80c4 	beq.w	8004ea8 <main+0x270>
			sprintf(tx_test, "[%d,%.0f,%.0f\n", flag, IMU.Roll, IMU.Pitch);
 8004d20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004d24:	4d58      	ldr	r5, [pc, #352]	; (8004e88 <main+0x250>)
 8004d26:	f7fb fc0f 	bl	8000548 <__aeabi_f2d>
 8004d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d2e:	f8d8 0000 	ldr.w	r0, [r8]
 8004d32:	f7fb fc09 	bl	8000548 <__aeabi_f2d>
 8004d36:	e9cd 0100 	strd	r0, r1, [sp]
 8004d3a:	4954      	ldr	r1, [pc, #336]	; (8004e8c <main+0x254>)
 8004d3c:	682a      	ldr	r2, [r5, #0]
 8004d3e:	a80b      	add	r0, sp, #44	; 0x2c
 8004d40:	f001 fc88 	bl	8006654 <siprintf>
			if(flag == 1){
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d109      	bne.n	8004d5e <main+0x126>
				HAL_UART_Transmit(&huart6, (uint8_t *)tx_test, strlen(tx_test), 0xFFFF);
 8004d4a:	a80b      	add	r0, sp, #44	; 0x2c
 8004d4c:	f7fb fa40 	bl	80001d0 <strlen>
 8004d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d54:	b282      	uxth	r2, r0
 8004d56:	a90b      	add	r1, sp, #44	; 0x2c
 8004d58:	4841      	ldr	r0, [pc, #260]	; (8004e60 <main+0x228>)
 8004d5a:	f7fe fa87 	bl	800326c <HAL_UART_Transmit>
		if(hr_flag){
 8004d5e:	4d4c      	ldr	r5, [pc, #304]	; (8004e90 <main+0x258>)
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0b0      	beq.n	8004cc8 <main+0x90>
			Max30102_Task();
 8004d66:	f7fe fe27 	bl	80039b8 <Max30102_Task>
			hr = (int)Max30102_GetHeartRate();
 8004d6a:	f7fe fe1f 	bl	80039ac <Max30102_GetHeartRate>
			if(40 < hr && hr < 130) {
 8004d6e:	f1a0 0329 	sub.w	r3, r0, #41	; 0x29
 8004d72:	2b58      	cmp	r3, #88	; 0x58
				sum_hr += hr;
 8004d74:	bf9c      	itt	ls
 8004d76:	1836      	addls	r6, r6, r0
				hr_count++;
 8004d78:	3701      	addls	r7, #1
			if((HAL_GetTick() - tickstart1) >= 10000)
 8004d7a:	f000 fcfd 	bl	8005778 <HAL_GetTick>
 8004d7e:	4b45      	ldr	r3, [pc, #276]	; (8004e94 <main+0x25c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1ac0      	subs	r0, r0, r3
 8004d84:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d88:	4298      	cmp	r0, r3
 8004d8a:	d99d      	bls.n	8004cc8 <main+0x90>
				sprintf(uartbuff, "<%d>", avr_hr);
 8004d8c:	fb96 f2f7 	sdiv	r2, r6, r7
 8004d90:	4941      	ldr	r1, [pc, #260]	; (8004e98 <main+0x260>)
 8004d92:	a806      	add	r0, sp, #24
 8004d94:	f001 fc5e 	bl	8006654 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)uartbuff, strlen(uartbuff), 0xFFFF);
 8004d98:	a806      	add	r0, sp, #24
 8004d9a:	f7fb fa19 	bl	80001d0 <strlen>
 8004d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004da2:	b282      	uxth	r2, r0
 8004da4:	a906      	add	r1, sp, #24
 8004da6:	482c      	ldr	r0, [pc, #176]	; (8004e58 <main+0x220>)
 8004da8:	f7fe fa60 	bl	800326c <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_SET);
 8004dac:	2201      	movs	r2, #1
 8004dae:	2180      	movs	r1, #128	; 0x80
 8004db0:	483a      	ldr	r0, [pc, #232]	; (8004e9c <main+0x264>)
 8004db2:	f7fc fa71 	bl	8001298 <HAL_GPIO_WritePin>
				hr_flag = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	602b      	str	r3, [r5, #0]
 8004dba:	e785      	b.n	8004cc8 <main+0x90>
		printf("Device error!\r\n");
 8004dbc:	4838      	ldr	r0, [pc, #224]	; (8004ea0 <main+0x268>)
		while(MPU9250_Init(&hi2c2, &MPU9250, MPU9250_Device_0) != MPU9250_Result_Ok){
 8004dbe:	4d2a      	ldr	r5, [pc, #168]	; (8004e68 <main+0x230>)
 8004dc0:	4c2a      	ldr	r4, [pc, #168]	; (8004e6c <main+0x234>)
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_RESET);
 8004dc2:	4e36      	ldr	r6, [pc, #216]	; (8004e9c <main+0x264>)
		printf("Device error!\r\n");
 8004dc4:	f001 fc2e 	bl	8006624 <puts>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_RESET);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004dce:	4833      	ldr	r0, [pc, #204]	; (8004e9c <main+0x264>)
 8004dd0:	f7fc fa62 	bl	8001298 <HAL_GPIO_WritePin>
		while(MPU9250_Init(&hi2c2, &MPU9250, MPU9250_Device_0) != MPU9250_Result_Ok){
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7fe feff 	bl	8003bdc <MPU9250_Init>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	f43f af59 	beq.w	8004c96 <main+0x5e>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_RESET);
 8004de4:	4630      	mov	r0, r6
 8004de6:	2200      	movs	r2, #0
 8004de8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004dec:	f7fc fa54 	bl	8001298 <HAL_GPIO_WritePin>
			I2C2_ClearBusyFlagErratum(&hi2c1, &hi2c2);
 8004df0:	4621      	mov	r1, r4
 8004df2:	4822      	ldr	r0, [pc, #136]	; (8004e7c <main+0x244>)
 8004df4:	f7ff fd0a 	bl	800480c <I2C2_ClearBusyFlagErratum>
 8004df8:	e7ec      	b.n	8004dd4 <main+0x19c>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_RESET);
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004e00:	4826      	ldr	r0, [pc, #152]	; (8004e9c <main+0x264>)
 8004e02:	f7fc fa49 	bl	8001298 <HAL_GPIO_WritePin>
		I2C2_ClearBusyFlagErratum(&hi2c1, &hi2c2);
 8004e06:	4919      	ldr	r1, [pc, #100]	; (8004e6c <main+0x234>)
 8004e08:	481c      	ldr	r0, [pc, #112]	; (8004e7c <main+0x244>)
 8004e0a:	f7ff fcff 	bl	800480c <I2C2_ClearBusyFlagErratum>
		Max30102_Init(&hi2c1);
 8004e0e:	481b      	ldr	r0, [pc, #108]	; (8004e7c <main+0x244>)
 8004e10:	f7fe fe46 	bl	8003aa0 <Max30102_Init>
 8004e14:	e74e      	b.n	8004cb4 <main+0x7c>
				printf("MPU9250_Result_Error\n");
 8004e16:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004ea4 <main+0x26c>
				I2C2_ClearBusyFlagErratum(&hi2c1, &hi2c2);
 8004e1a:	4d14      	ldr	r5, [pc, #80]	; (8004e6c <main+0x234>)
				printf("MPU9250_Result_Error\n");
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	f001 fc01 	bl	8006624 <puts>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_8, GPIO_PIN_RESET);
 8004e22:	2200      	movs	r2, #0
 8004e24:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e28:	481c      	ldr	r0, [pc, #112]	; (8004e9c <main+0x264>)
 8004e2a:	f7fc fa35 	bl	8001298 <HAL_GPIO_WritePin>
				I2C2_ClearBusyFlagErratum(&hi2c1, &hi2c2);
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4812      	ldr	r0, [pc, #72]	; (8004e7c <main+0x244>)
 8004e32:	f7ff fceb 	bl	800480c <I2C2_ClearBusyFlagErratum>
			}while(MPU9250_Init(&hi2c2, &MPU9250, MPU9250_Device_0) != MPU9250_Result_Ok);
 8004e36:	2200      	movs	r2, #0
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7fe fece 	bl	8003bdc <MPU9250_Init>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d1eb      	bne.n	8004e1c <main+0x1e4>
 8004e44:	e755      	b.n	8004cf2 <main+0xba>
 8004e46:	bf00      	nop
 8004e48:	33333333 	.word	0x33333333
 8004e4c:	400b3333 	.word	0x400b3333
 8004e50:	40021000 	.word	0x40021000
 8004e54:	20002acc 	.word	0x20002acc
 8004e58:	20002b30 	.word	0x20002b30
 8004e5c:	20002a68 	.word	0x20002a68
 8004e60:	20002b70 	.word	0x20002b70
 8004e64:	0800922b 	.word	0x0800922b
 8004e68:	20001870 	.word	0x20001870
 8004e6c:	200017cc 	.word	0x200017cc
 8004e70:	00000000 	.word	0x00000000
 8004e74:	447a0000 	.word	0x447a0000
 8004e78:	20001828 	.word	0x20001828
 8004e7c:	20001778 	.word	0x20001778
 8004e80:	08009240 	.word	0x08009240
 8004e84:	20000db0 	.word	0x20000db0
 8004e88:	20000dac 	.word	0x20000dac
 8004e8c:	0800925b 	.word	0x0800925b
 8004e90:	20000db4 	.word	0x20000db4
 8004e94:	20001928 	.word	0x20001928
 8004e98:	0800929a 	.word	0x0800929a
 8004e9c:	40021400 	.word	0x40021400
 8004ea0:	08009231 	.word	0x08009231
 8004ea4:	08009246 	.word	0x08009246
			double SMV = sqrt(MPU9250.Ax * MPU9250.Ax + MPU9250.Ay * MPU9250.Ay + MPU9250.Az * MPU9250.Az);
 8004ea8:	edd4 7a01 	vldr	s15, [r4, #4]
 8004eac:	edd4 6a00 	vldr	s13, [r4]
 8004eb0:	ed94 7a02 	vldr	s14, [r4, #8]
			if(fall_flag && SMV > 1.4){
 8004eb4:	4d56      	ldr	r5, [pc, #344]	; (8005010 <main+0x3d8>)
			double SMV = sqrt(MPU9250.Ax * MPU9250.Ax + MPU9250.Ay * MPU9250.Ay + MPU9250.Az * MPU9250.Az);
 8004eb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004eba:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8004ebe:	eee7 7a07 	vfma.f32	s15, s14, s14
 8004ec2:	ee17 0a90 	vmov	r0, s15
 8004ec6:	f7fb fb3f 	bl	8000548 <__aeabi_f2d>
 8004eca:	ec41 0b10 	vmov	d0, r0, r1
 8004ece:	f003 faa1 	bl	8008414 <sqrt>
			if(fall_flag && SMV > 1.4){
 8004ed2:	682b      	ldr	r3, [r5, #0]
			double SMV = sqrt(MPU9250.Ax * MPU9250.Ax + MPU9250.Ay * MPU9250.Ay + MPU9250.Az * MPU9250.Az);
 8004ed4:	ec59 8b10 	vmov	r8, r9, d0
			if(fall_flag && SMV > 1.4){
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8088 	beq.w	8004fee <main+0x3b6>
 8004ede:	a34a      	add	r3, pc, #296	; (adr r3, 8005008 <main+0x3d0>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	ee10 0a10 	vmov	r0, s0
 8004ee8:	4649      	mov	r1, r9
 8004eea:	f7fb fe11 	bl	8000b10 <__aeabi_dcmpgt>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d074      	beq.n	8004fdc <main+0x3a4>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ef8:	4846      	ldr	r0, [pc, #280]	; (8005014 <main+0x3dc>)
 8004efa:	f7fc f9cd 	bl	8001298 <HAL_GPIO_WritePin>
				printf("fall flag zero\n");
 8004efe:	4846      	ldr	r0, [pc, #280]	; (8005018 <main+0x3e0>)
 8004f00:	f001 fb90 	bl	8006624 <puts>
				fall_flag = 0;
 8004f04:	9b05      	ldr	r3, [sp, #20]
 8004f06:	602b      	str	r3, [r5, #0]
				HAL_Delay(1000);
 8004f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f0c:	f000 fc1c 	bl	8005748 <HAL_Delay>
			if(SMV > 3.4) {
 8004f10:	4652      	mov	r2, sl
 8004f12:	465b      	mov	r3, fp
 8004f14:	4640      	mov	r0, r8
 8004f16:	4649      	mov	r1, r9
 8004f18:	f7fb fdfa 	bl	8000b10 <__aeabi_dcmpgt>
 8004f1c:	b190      	cbz	r0, 8004f44 <main+0x30c>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f24:	483b      	ldr	r0, [pc, #236]	; (8005014 <main+0x3dc>)
 8004f26:	f7fc f9b7 	bl	8001298 <HAL_GPIO_WritePin>
				printf("SMV 3.4\n");
 8004f2a:	483c      	ldr	r0, [pc, #240]	; (800501c <main+0x3e4>)
 8004f2c:	f001 fb7a 	bl	8006624 <puts>
				tickstart2 = HAL_GetTick();
 8004f30:	f000 fc22 	bl	8005778 <HAL_GetTick>
 8004f34:	4b3a      	ldr	r3, [pc, #232]	; (8005020 <main+0x3e8>)
 8004f36:	6018      	str	r0, [r3, #0]
				fall_flag = 1;
 8004f38:	2301      	movs	r3, #1
				HAL_Delay(1000);
 8004f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				fall_flag = 1;
 8004f3e:	602b      	str	r3, [r5, #0]
				HAL_Delay(1000);
 8004f40:	f000 fc02 	bl	8005748 <HAL_Delay>
			if(fall_flag && (HAL_GetTick() - tickstart2) >= 10000)
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b38b      	cbz	r3, 8004fac <main+0x374>
 8004f48:	f000 fc16 	bl	8005778 <HAL_GetTick>
 8004f4c:	4b34      	ldr	r3, [pc, #208]	; (8005020 <main+0x3e8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	1ac0      	subs	r0, r0, r3
 8004f52:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f56:	4298      	cmp	r0, r3
 8004f58:	d928      	bls.n	8004fac <main+0x374>
				printf("fall detected\n");
 8004f5a:	4832      	ldr	r0, [pc, #200]	; (8005024 <main+0x3ec>)
 8004f5c:	f001 fb62 	bl	8006624 <puts>
				fall_flag = 0;
 8004f60:	f04f 0800 	mov.w	r8, #0
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8004f64:	2201      	movs	r2, #1
 8004f66:	2104      	movs	r1, #4
 8004f68:	482a      	ldr	r0, [pc, #168]	; (8005014 <main+0x3dc>)
				fall_flag = 0;
 8004f6a:	f8c5 8000 	str.w	r8, [r5]
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8004f6e:	f7fc f993 	bl	8001298 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8004f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f76:	f000 fbe7 	bl	8005748 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	4825      	ldr	r0, [pc, #148]	; (8005014 <main+0x3dc>)
 8004f80:	f7fc f98a 	bl	8001298 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 8004f84:	2201      	movs	r2, #1
 8004f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f8a:	4822      	ldr	r0, [pc, #136]	; (8005014 <main+0x3dc>)
 8004f8c:	f7fc f984 	bl	8001298 <HAL_GPIO_WritePin>
				sprintf(uartbuff, "@");
 8004f90:	4925      	ldr	r1, [pc, #148]	; (8005028 <main+0x3f0>)
 8004f92:	a806      	add	r0, sp, #24
 8004f94:	f001 fb82 	bl	800669c <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *)uartbuff, strlen(uartbuff), 0xFFFF);
 8004f98:	a806      	add	r0, sp, #24
 8004f9a:	f7fb f919 	bl	80001d0 <strlen>
 8004f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fa2:	b282      	uxth	r2, r0
 8004fa4:	a906      	add	r1, sp, #24
 8004fa6:	4821      	ldr	r0, [pc, #132]	; (800502c <main+0x3f4>)
 8004fa8:	f7fe f960 	bl	800326c <HAL_UART_Transmit>
			if(fflag == 1){
 8004fac:	4d20      	ldr	r5, [pc, #128]	; (8005030 <main+0x3f8>)
 8004fae:	682b      	ldr	r3, [r5, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f47f aed4 	bne.w	8004d5e <main+0x126>
				sprintf(tx_test, "[%d,0,0\n", flag);
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <main+0x3fc>)
 8004fb8:	491f      	ldr	r1, [pc, #124]	; (8005038 <main+0x400>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	a80b      	add	r0, sp, #44	; 0x2c
 8004fbe:	f001 fb49 	bl	8006654 <siprintf>
				HAL_UART_Transmit(&huart6, (uint8_t *)tx_test, strlen(tx_test), 0xFFFF);
 8004fc2:	a80b      	add	r0, sp, #44	; 0x2c
 8004fc4:	f7fb f904 	bl	80001d0 <strlen>
 8004fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fcc:	b282      	uxth	r2, r0
 8004fce:	a90b      	add	r1, sp, #44	; 0x2c
 8004fd0:	481a      	ldr	r0, [pc, #104]	; (800503c <main+0x404>)
 8004fd2:	f7fe f94b 	bl	800326c <HAL_UART_Transmit>
				fflag = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	e6c0      	b.n	8004d5e <main+0x126>
			if(SMV > 3.4) {
 8004fdc:	4652      	mov	r2, sl
 8004fde:	465b      	mov	r3, fp
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	f7fb fd94 	bl	8000b10 <__aeabi_dcmpgt>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d198      	bne.n	8004f1e <main+0x2e6>
 8004fec:	e7ac      	b.n	8004f48 <main+0x310>
 8004fee:	4652      	mov	r2, sl
 8004ff0:	465b      	mov	r3, fp
 8004ff2:	ee10 0a10 	vmov	r0, s0
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	f7fb fd8a 	bl	8000b10 <__aeabi_dcmpgt>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d0d5      	beq.n	8004fac <main+0x374>
 8005000:	e78d      	b.n	8004f1e <main+0x2e6>
 8005002:	bf00      	nop
 8005004:	f3af 8000 	nop.w
 8005008:	66666666 	.word	0x66666666
 800500c:	3ff66666 	.word	0x3ff66666
 8005010:	20000da4 	.word	0x20000da4
 8005014:	40021400 	.word	0x40021400
 8005018:	0800926a 	.word	0x0800926a
 800501c:	08009279 	.word	0x08009279
 8005020:	20001820 	.word	0x20001820
 8005024:	08009281 	.word	0x08009281
 8005028:	0800928f 	.word	0x0800928f
 800502c:	20002b30 	.word	0x20002b30
 8005030:	20000da8 	.word	0x20000da8
 8005034:	20000dac 	.word	0x20000dac
 8005038:	08009291 	.word	0x08009291
 800503c:	20002b70 	.word	0x20002b70

08005040 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == GPIO_PIN_12) {
 8005040:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005044:	b508      	push	{r3, lr}
	if (GPIO_Pin == GPIO_PIN_12) {
 8005046:	d103      	bne.n	8005050 <HAL_GPIO_EXTI_Callback+0x10>
		printf("wait 10 sec...\n");
		hr_flag = 1;
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
		tickstart1 = HAL_GetTick();
	}
}
 8005048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Max30102_InterruptCallback();
 800504c:	f7fe bb2c 	b.w	80036a8 <Max30102_InterruptCallback>
	else if(GPIO_Pin == GPIO_PIN_9) {
 8005050:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005054:	d114      	bne.n	8005080 <HAL_GPIO_EXTI_Callback+0x40>
		if(gyro_onoff){
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <HAL_GPIO_EXTI_Callback+0x68>)
 8005058:	4914      	ldr	r1, [pc, #80]	; (80050ac <HAL_GPIO_EXTI_Callback+0x6c>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	b162      	cbz	r2, 8005078 <HAL_GPIO_EXTI_Callback+0x38>
			gyro_onoff = 0;
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
			flag = 3;
 8005062:	2303      	movs	r3, #3
 8005064:	600b      	str	r3, [r1, #0]
			fflag = 1;
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	4811      	ldr	r0, [pc, #68]	; (80050b4 <HAL_GPIO_EXTI_Callback+0x74>)
}
 8005070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8005074:	f7fc b910 	b.w	8001298 <HAL_GPIO_WritePin>
			gyro_onoff = 1;
 8005078:	2001      	movs	r0, #1
 800507a:	6018      	str	r0, [r3, #0]
			flag = 1;
 800507c:	6008      	str	r0, [r1, #0]
 800507e:	e7f5      	b.n	800506c <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == GPIO_PIN_10) {
 8005080:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005084:	d10e      	bne.n	80050a4 <HAL_GPIO_EXTI_Callback+0x64>
		printf("wait 10 sec...\n");
 8005086:	480c      	ldr	r0, [pc, #48]	; (80050b8 <HAL_GPIO_EXTI_Callback+0x78>)
 8005088:	f001 facc 	bl	8006624 <puts>
		hr_flag = 1;
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_GPIO_EXTI_Callback+0x7c>)
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 800508e:	4809      	ldr	r0, [pc, #36]	; (80050b4 <HAL_GPIO_EXTI_Callback+0x74>)
		hr_flag = 1;
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8005094:	2180      	movs	r1, #128	; 0x80
 8005096:	2200      	movs	r2, #0
 8005098:	f7fc f8fe 	bl	8001298 <HAL_GPIO_WritePin>
		tickstart1 = HAL_GetTick();
 800509c:	f000 fb6c 	bl	8005778 <HAL_GetTick>
 80050a0:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <HAL_GPIO_EXTI_Callback+0x80>)
 80050a2:	6018      	str	r0, [r3, #0]
 80050a4:	bd08      	pop	{r3, pc}
 80050a6:	bf00      	nop
 80050a8:	20000db0 	.word	0x20000db0
 80050ac:	20000dac 	.word	0x20000dac
 80050b0:	20000da8 	.word	0x20000da8
 80050b4:	40021400 	.word	0x40021400
 80050b8:	0800921c 	.word	0x0800921c
 80050bc:	20000db4 	.word	0x20000db4
 80050c0:	20001928 	.word	0x20001928

080050c4 <I2C_Write>:

I2C_Result_t I2C_Write(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t data) {
 80050c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t d[2];

	/* Format array to send */
	d[0] = register_address;
	d[1] = data;
 80050c6:	f88d 300d 	strb.w	r3, [sp, #13]

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 80050ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	d[0] = register_address;
 80050ce:	f88d 200c 	strb.w	r2, [sp, #12]
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	aa03      	add	r2, sp, #12
 80050d6:	2302      	movs	r3, #2
I2C_Result_t I2C_Write(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t data) {
 80050d8:	4604      	mov	r4, r0
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 80050da:	f7fc fb63 	bl	80017a4 <HAL_I2C_Master_Transmit>
 80050de:	b118      	cbz	r0, 80050e8 <I2C_Write+0x24>
		/* Check error */
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7fd fcd9 	bl	8002a98 <HAL_I2C_GetError>

		}
		/* Return error */
		return I2C_Result_Error;
 80050e6:	2001      	movs	r0, #1
	}

	/* Return OK */
	return I2C_Result_Ok;
}
 80050e8:	b004      	add	sp, #16
 80050ea:	bd10      	pop	{r4, pc}

080050ec <I2C_ReadMulti>:

I2C_Result_t I2C_ReadMulti(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 80050ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ee:	b085      	sub	sp, #20
 80050f0:	ad04      	add	r5, sp, #16
 80050f2:	461f      	mov	r7, r3
 80050f4:	f805 2d01 	strb.w	r2, [r5, #-1]!

	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, &register_address, 1, 0xffff) != HAL_OK) {
 80050f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	462a      	mov	r2, r5
 8005100:	2301      	movs	r3, #1
I2C_Result_t I2C_ReadMulti(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8005102:	4604      	mov	r4, r0
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, &register_address, 1, 0xffff) != HAL_OK) {
 8005104:	460e      	mov	r6, r1
 8005106:	f7fc fb4d 	bl	80017a4 <HAL_I2C_Master_Transmit>
 800510a:	b960      	cbnz	r0, 8005126 <I2C_ReadMulti+0x3a>
		/* Return error */
		return I2C_Result_Error;
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(hi2c, device_address, data, count, 1000) != HAL_OK) {
 800510c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	463a      	mov	r2, r7
 8005114:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8005118:	4631      	mov	r1, r6
 800511a:	4620      	mov	r0, r4
 800511c:	f7fc fc10 	bl	8001940 <HAL_I2C_Master_Receive>
 8005120:	b958      	cbnz	r0, 800513a <I2C_ReadMulti+0x4e>
		return I2C_Result_Error;
	}

	/* Return OK */
	return I2C_Result_Ok;
}
 8005122:	b005      	add	sp, #20
 8005124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 8005126:	4620      	mov	r0, r4
 8005128:	f7fd fcb6 	bl	8002a98 <HAL_I2C_GetError>
		if(HAL_I2C_GetError(hi2c) == HAL_I2C_ERROR_TIMEOUT)
 800512c:	4620      	mov	r0, r4
 800512e:	f7fd fcb3 	bl	8002a98 <HAL_I2C_GetError>
 8005132:	2820      	cmp	r0, #32
 8005134:	d1ea      	bne.n	800510c <I2C_ReadMulti+0x20>
		return I2C_Result_Error;
 8005136:	2001      	movs	r0, #1
 8005138:	e7f3      	b.n	8005122 <I2C_ReadMulti+0x36>
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 800513a:	4620      	mov	r0, r4
 800513c:	f7fd fcac 	bl	8002a98 <HAL_I2C_GetError>
 8005140:	e7f9      	b.n	8005136 <I2C_ReadMulti+0x4a>

08005142 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005142:	4770      	bx	lr

08005144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005144:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005146:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <HAL_MspInit+0x34>)
 8005148:	2100      	movs	r1, #0
 800514a:	9100      	str	r1, [sp, #0]
 800514c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005152:	645a      	str	r2, [r3, #68]	; 0x44
 8005154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005156:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800515a:	9200      	str	r2, [sp, #0]
 800515c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800515e:	9101      	str	r1, [sp, #4]
 8005160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005162:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005172:	b002      	add	sp, #8
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <NMI_Handler>:
 800517c:	4770      	bx	lr

0800517e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800517e:	e7fe      	b.n	800517e <HardFault_Handler>

08005180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005180:	e7fe      	b.n	8005180 <MemManage_Handler>

08005182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005182:	e7fe      	b.n	8005182 <BusFault_Handler>

08005184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005184:	e7fe      	b.n	8005184 <UsageFault_Handler>

08005186 <SVC_Handler>:
 8005186:	4770      	bx	lr

08005188 <DebugMon_Handler>:
 8005188:	4770      	bx	lr

0800518a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800518a:	4770      	bx	lr

0800518c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800518c:	f000 baa4 	b.w	80056d8 <HAL_IncTick>

08005190 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005190:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005194:	f7fc b886 	b.w	80012a4 <HAL_GPIO_EXTI_IRQHandler>

08005198 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005198:	4801      	ldr	r0, [pc, #4]	; (80051a0 <I2C1_EV_IRQHandler+0x8>)
 800519a:	f7fc bfc3 	b.w	8002124 <HAL_I2C_EV_IRQHandler>
 800519e:	bf00      	nop
 80051a0:	20001778 	.word	0x20001778

080051a4 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80051a4:	4801      	ldr	r0, [pc, #4]	; (80051ac <I2C1_ER_IRQHandler+0x8>)
 80051a6:	f7fd bbe1 	b.w	800296c <HAL_I2C_ER_IRQHandler>
 80051aa:	bf00      	nop
 80051ac:	20001778 	.word	0x20001778

080051b0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <I2C2_EV_IRQHandler+0x8>)
 80051b2:	f7fc bfb7 	b.w	8002124 <HAL_I2C_EV_IRQHandler>
 80051b6:	bf00      	nop
 80051b8:	200017cc 	.word	0x200017cc

080051bc <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <I2C2_ER_IRQHandler+0x8>)
 80051be:	f7fd bbd5 	b.w	800296c <HAL_I2C_ER_IRQHandler>
 80051c2:	bf00      	nop
 80051c4:	200017cc 	.word	0x200017cc

080051c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80051c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80051ca:	4c0a      	ldr	r4, [pc, #40]	; (80051f4 <USART1_IRQHandler+0x2c>)
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7fe f913 	bl	80033f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UartQueue_Serial_EnQueue((uint8_t)(huart1.Instance->DR & (uint8_t)0x00FFU));
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	6858      	ldr	r0, [r3, #4]
 80051d6:	b2c0      	uxtb	r0, r0
 80051d8:	f000 fae8 	bl	80057ac <UartQueue_Serial_EnQueue>
  if(HAL_UART_Receive_IT(&huart1, g_Uart_RxBuffer, UART_RXBUFFERSIZE) != HAL_OK)
 80051dc:	2264      	movs	r2, #100	; 0x64
 80051de:	4906      	ldr	r1, [pc, #24]	; (80051f8 <USART1_IRQHandler+0x30>)
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7fe f8a0 	bl	8003326 <HAL_UART_Receive_IT>
 80051e6:	b118      	cbz	r0, 80051f0 <USART1_IRQHandler+0x28>
  {
      Error_Handler();
  }
  //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_6);
  /* USER CODE END USART1_IRQn 1 */
}
 80051e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      Error_Handler();
 80051ec:	f7ff bfa9 	b.w	8005142 <Error_Handler>
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	bf00      	nop
 80051f4:	20002b30 	.word	0x20002b30
 80051f8:	20002acc 	.word	0x20002acc

080051fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80051fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80051fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005202:	f7fc f84f 	bl	80012a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005206:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800520a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800520e:	f7fc b849 	b.w	80012a4 <HAL_GPIO_EXTI_IRQHandler>
	...

08005214 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005214:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005216:	4c0a      	ldr	r4, [pc, #40]	; (8005240 <USART6_IRQHandler+0x2c>)
 8005218:	4620      	mov	r0, r4
 800521a:	f7fe f8ed 	bl	80033f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  Uart_6_Queue_Comm_EnQueue((uint8_t)(huart6.Instance->DR & (uint8_t)0x00FFU));
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	6858      	ldr	r0, [r3, #4]
 8005222:	b2c0      	uxtb	r0, r0
 8005224:	f000 fadc 	bl	80057e0 <Uart_6_Queue_Comm_EnQueue>
  if(HAL_UART_Receive_IT(&huart6, g_Uart_6_Com_RxBuffer, UART_RXBUFFERSIZE) != HAL_OK)
 8005228:	2264      	movs	r2, #100	; 0x64
 800522a:	4906      	ldr	r1, [pc, #24]	; (8005244 <USART6_IRQHandler+0x30>)
 800522c:	4620      	mov	r0, r4
 800522e:	f7fe f87a 	bl	8003326 <HAL_UART_Receive_IT>
 8005232:	b118      	cbz	r0, 800523c <USART6_IRQHandler+0x28>
  {
	  Error_Handler();
  }
  /* USER CODE END USART6_IRQn 1 */
}
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  Error_Handler();
 8005238:	f7ff bf83 	b.w	8005142 <Error_Handler>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	bf00      	nop
 8005240:	20002b70 	.word	0x20002b70
 8005244:	20002a68 	.word	0x20002a68

08005248 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	460e      	mov	r6, r1
 800524c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800524e:	460c      	mov	r4, r1
 8005250:	1ba3      	subs	r3, r4, r6
 8005252:	429d      	cmp	r5, r3
 8005254:	dc01      	bgt.n	800525a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005256:	4628      	mov	r0, r5
 8005258:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800525a:	f3af 8000 	nop.w
 800525e:	f804 0b01 	strb.w	r0, [r4], #1
 8005262:	e7f5      	b.n	8005250 <_read+0x8>

08005264 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	460e      	mov	r6, r1
 8005268:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800526a:	460c      	mov	r4, r1
 800526c:	1ba3      	subs	r3, r4, r6
 800526e:	429d      	cmp	r5, r3
 8005270:	dc01      	bgt.n	8005276 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8005272:	4628      	mov	r0, r5
 8005274:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005276:	f814 0b01 	ldrb.w	r0, [r4], #1
 800527a:	f7ff faab 	bl	80047d4 <__io_putchar>
 800527e:	e7f5      	b.n	800526c <_write+0x8>

08005280 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8005280:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <_sbrk+0x2c>)
 8005284:	6819      	ldr	r1, [r3, #0]
{
 8005286:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005288:	b909      	cbnz	r1, 800528e <_sbrk+0xe>
		heap_end = &end;
 800528a:	4909      	ldr	r1, [pc, #36]	; (80052b0 <_sbrk+0x30>)
 800528c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800528e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005290:	4669      	mov	r1, sp
 8005292:	4402      	add	r2, r0
 8005294:	428a      	cmp	r2, r1
 8005296:	d906      	bls.n	80052a6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005298:	f000 fc16 	bl	8005ac8 <__errno>
 800529c:	230c      	movs	r3, #12
 800529e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80052a6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80052a8:	bd08      	pop	{r3, pc}
 80052aa:	bf00      	nop
 80052ac:	20000dbc 	.word	0x20000dbc
 80052b0:	20002bb4 	.word	0x20002bb4

080052b4 <_close>:

int _close(int file)
{
	return -1;
}
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	4770      	bx	lr

080052ba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80052ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052be:	604b      	str	r3, [r1, #4]
	return 0;
}
 80052c0:	2000      	movs	r0, #0
 80052c2:	4770      	bx	lr

080052c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80052c4:	2001      	movs	r0, #1
 80052c6:	4770      	bx	lr

080052c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80052c8:	2000      	movs	r0, #0
 80052ca:	4770      	bx	lr

080052cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052cc:	490f      	ldr	r1, [pc, #60]	; (800530c <SystemInit+0x40>)
 80052ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80052d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80052da:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <SystemInit+0x44>)
 80052dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80052de:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80052e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80052ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80052f4:	4a07      	ldr	r2, [pc, #28]	; (8005314 <SystemInit+0x48>)
 80052f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005300:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005302:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005306:	608b      	str	r3, [r1, #8]
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	e000ed00 	.word	0xe000ed00
 8005310:	40023800 	.word	0x40023800
 8005314:	24003010 	.word	0x24003010

08005318 <oneOverSqrt>:
 */
#include "tm_stm32_ahrs_imu.h"

/* Calculate 1/sqrt(x) with magic number support */
static
float oneOverSqrt(float x) {
 8005318:	b508      	push	{r3, lr}
    return 1.0f / (float) sqrt(x);
 800531a:	ee10 0a10 	vmov	r0, s0
 800531e:	f7fb f913 	bl	8000548 <__aeabi_f2d>
 8005322:	ec41 0b10 	vmov	d0, r0, r1
 8005326:	f003 f875 	bl	8008414 <sqrt>
 800532a:	ec51 0b10 	vmov	r0, r1, d0
 800532e:	f7fb fc37 	bl	8000ba0 <__aeabi_d2f>
}
 8005332:	ee07 0a90 	vmov	s15, r0
 8005336:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800533a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800533e:	bd08      	pop	{r3, pc}

08005340 <calculateAngles>:

static
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 8005340:	b510      	push	{r4, lr}
 8005342:	ed2d 8b04 	vpush	{d8-d9}
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8005346:	ed90 9a06 	vldr	s18, [r0, #24]
 800534a:	ed90 8a07 	vldr	s16, [r0, #28]
 800534e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8005352:	eef0 7a68 	vmov.f32	s15, s17
 8005356:	eee9 7a49 	vfms.f32	s15, s18, s18
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 800535a:	4604      	mov	r4, r0
 800535c:	b082      	sub	sp, #8
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 800535e:	eee8 7a48 	vfms.f32	s15, s16, s16
 8005362:	ee17 0a90 	vmov	r0, s15
 8005366:	f7fb f8ef 	bl	8000548 <__aeabi_f2d>
 800536a:	edd4 7a08 	vldr	s15, [r4, #32]
 800536e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005372:	edd4 7a05 	vldr	s15, [r4, #20]
 8005376:	eea7 8a89 	vfma.f32	s16, s15, s18
 800537a:	e9cd 0100 	strd	r0, r1, [sp]
 800537e:	ee18 0a10 	vmov	r0, s16
 8005382:	f7fb f8e1 	bl	8000548 <__aeabi_f2d>
 8005386:	ed9d 1b00 	vldr	d1, [sp]
 800538a:	ec41 0b10 	vmov	d0, r0, r1
 800538e:	f003 f83f 	bl	8008410 <atan2>
 8005392:	ec51 0b10 	vmov	r0, r1, d0
 8005396:	f7fb fc03 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 800539a:	ed94 7a05 	vldr	s14, [r4, #20]
 800539e:	edd4 7a07 	vldr	s15, [r4, #28]
 80053a2:	edd4 6a06 	vldr	s13, [r4, #24]
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 80053a6:	6020      	str	r0, [r4, #0]
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 80053a8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80053ac:	ed94 7a08 	vldr	s14, [r4, #32]
 80053b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80053b4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80053b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053bc:	ee17 0a90 	vmov	r0, s15
 80053c0:	f7fb f8c2 	bl	8000548 <__aeabi_f2d>
 80053c4:	ec41 0b10 	vmov	d0, r0, r1
 80053c8:	f002 ffca 	bl	8008360 <asin>
 80053cc:	ec51 0b10 	vmov	r0, r1, d0
 80053d0:	f7fb fbe6 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 80053d4:	ed94 9a07 	vldr	s18, [r4, #28]
 80053d8:	ed94 8a08 	vldr	s16, [r4, #32]
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 80053dc:	6060      	str	r0, [r4, #4]
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 80053de:	eee9 8a49 	vfms.f32	s17, s18, s18
 80053e2:	eee8 8a48 	vfms.f32	s17, s16, s16
 80053e6:	ee18 0a90 	vmov	r0, s17
 80053ea:	f7fb f8ad 	bl	8000548 <__aeabi_f2d>
 80053ee:	edd4 7a05 	vldr	s15, [r4, #20]
 80053f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80053f6:	edd4 7a06 	vldr	s15, [r4, #24]
 80053fa:	eea7 8a89 	vfma.f32	s16, s15, s18
 80053fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005402:	ee18 0a10 	vmov	r0, s16
 8005406:	f7fb f89f 	bl	8000548 <__aeabi_f2d>
 800540a:	ed9d 1b00 	vldr	d1, [sp]
 800540e:	ec41 0b10 	vmov	d0, r0, r1
 8005412:	f002 fffd 	bl	8008410 <atan2>

    /* Calculate degrees and remove inclination */
    AHRSIMU->Roll *= AHRSIMU_RAD2DEG(1);
 8005416:	ed9f 8a1d 	vldr	s16, [pc, #116]	; 800548c <calculateAngles+0x14c>
 800541a:	edd4 7a00 	vldr	s15, [r4]
 800541e:	ee67 7a88 	vmul.f32	s15, s15, s16
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8005422:	ec51 0b10 	vmov	r0, r1, d0
    AHRSIMU->Roll *= AHRSIMU_RAD2DEG(1);
 8005426:	edc4 7a00 	vstr	s15, [r4]
    AHRSIMU->Pitch *= AHRSIMU_RAD2DEG(1);
 800542a:	edd4 7a01 	vldr	s15, [r4, #4]
 800542e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005432:	edc4 7a01 	vstr	s15, [r4, #4]
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8005436:	f7fb fbb3 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Yaw = AHRSIMU->Yaw * AHRSIMU_RAD2DEG(1) - AHRSIMU->Inclination;
 800543a:	edd4 7a03 	vldr	s15, [r4, #12]
 800543e:	ee07 0a10 	vmov	s14, r0
 8005442:	eed7 7a08 	vfnms.f32	s15, s14, s16
 8005446:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005490 <calculateAngles+0x150>
 800544a:	eef0 6a67 	vmov.f32	s13, s15

    /* Check values because of inclination */
    if (AHRSIMU->Yaw < -180) {
 800544e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8005494 <calculateAngles+0x154>
 8005452:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545a:	d506      	bpl.n	800546a <calculateAngles+0x12a>
        AHRSIMU->Yaw = 180.0f - (-180.0f - AHRSIMU->Yaw);
 800545c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005460:	ee77 7a67 	vsub.f32	s15, s14, s15
    } else if (AHRSIMU->Yaw > 180) {
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 8005464:	edc4 7a02 	vstr	s15, [r4, #8]
    }
}
 8005468:	e006      	b.n	8005478 <calculateAngles+0x138>
    } else if (AHRSIMU->Yaw > 180) {
 800546a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800546e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005472:	dc05      	bgt.n	8005480 <calculateAngles+0x140>
    AHRSIMU->Yaw = AHRSIMU->Yaw * AHRSIMU_RAD2DEG(1) - AHRSIMU->Inclination;
 8005474:	edc4 6a02 	vstr	s13, [r4, #8]
}
 8005478:	b002      	add	sp, #8
 800547a:	ecbd 8b04 	vpop	{d8-d9}
 800547e:	bd10      	pop	{r4, pc}
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 8005480:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005488:	e7ec      	b.n	8005464 <calculateAngles+0x124>
 800548a:	bf00      	nop
 800548c:	42652ee1 	.word	0x42652ee1
 8005490:	43340000 	.word	0x43340000
 8005494:	c3340000 	.word	0xc3340000

08005498 <TM_AHRSIMU_Init>:

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float beta, float sampleRate, float inclination) {
    AHRSIMU->_beta = beta;
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8005498:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800549c:	eec7 0aa0 	vdiv.f32	s1, s15, s1
    AHRSIMU->Inclination = inclination;

    AHRSIMU->_q0 = 1.0f;
    AHRSIMU->_q1 = 0.0f;
 80054a0:	2300      	movs	r3, #0
 80054a2:	6183      	str	r3, [r0, #24]
    AHRSIMU->_q2 = 0.0f;
 80054a4:	61c3      	str	r3, [r0, #28]
    AHRSIMU->_q3 = 0.0f;
 80054a6:	6203      	str	r3, [r0, #32]
    AHRSIMU->_beta = beta;
 80054a8:	ed80 0a04 	vstr	s0, [r0, #16]
    AHRSIMU->_sampleRate = 1 / sampleRate;
 80054ac:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    AHRSIMU->Inclination = inclination;
 80054b0:	ed80 1a03 	vstr	s2, [r0, #12]
    AHRSIMU->_q0 = 1.0f;
 80054b4:	edc0 7a05 	vstr	s15, [r0, #20]
    AHRSIMU->_q3 = 0.0f;
 80054b8:	4770      	bx	lr

080054ba <TM_AHRSIMU_UpdateIMU>:

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 80054ba:	b510      	push	{r4, lr}
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80054bc:	edd0 7a06 	vldr	s15, [r0, #24]
 80054c0:	edd0 6a07 	vldr	s13, [r0, #28]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 80054c4:	ed90 6a05 	vldr	s12, [r0, #20]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80054c8:	edd0 5a08 	vldr	s11, [r0, #32]
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 80054cc:	ed2d 8b0a 	vpush	{d8-d12}
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80054d0:	ee60 bae6 	vnmul.f32	s23, s1, s13
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 80054d4:	ee26 ba81 	vmul.f32	s22, s13, s2
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 80054d8:	ee61 aa67 	vnmul.f32	s21, s2, s15
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 80054dc:	ee27 9aa0 	vmul.f32	s18, s15, s1
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80054e0:	eee7 bac0 	vfms.f32	s23, s15, s0
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 80054e4:	4604      	mov	r4, r0
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 80054e6:	eea0 ba06 	vfma.f32	s22, s0, s12
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 80054ea:	eee0 aa86 	vfma.f32	s21, s1, s12
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 80054ee:	eea1 9a06 	vfma.f32	s18, s2, s12
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80054f2:	eee5 bac1 	vfms.f32	s23, s11, s2
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 80054f6:	eea0 bae5 	vfms.f32	s22, s1, s11
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 80054fa:	eee0 aa25 	vfma.f32	s21, s0, s11
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 80054fe:	eea0 9a66 	vfms.f32	s18, s0, s13

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8005502:	eef5 1a40 	vcmp.f32	s3, #0.0
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8005506:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 800550e:	eef0 9a61 	vmov.f32	s19, s3
 8005512:	eef0 8a42 	vmov.f32	s17, s4
 8005516:	eeb0 8a62 	vmov.f32	s16, s5
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 800551a:	ee6b ba87 	vmul.f32	s23, s23, s14
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 800551e:	ee2b ba07 	vmul.f32	s22, s22, s14
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8005522:	ee6a aa87 	vmul.f32	s21, s21, s14
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8005526:	ee29 9a07 	vmul.f32	s18, s18, s14
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 800552a:	d10a      	bne.n	8005542 <TM_AHRSIMU_UpdateIMU+0x88>
 800552c:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8005530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005534:	d105      	bne.n	8005542 <TM_AHRSIMU_UpdateIMU+0x88>
 8005536:	eef5 2a40 	vcmp.f32	s5, #0.0
 800553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553e:	f000 8086 	beq.w	800564e <TM_AHRSIMU_UpdateIMU+0x194>

        /* Normalise accelerometer measurement */
        recipNorm = oneOverSqrt(ax * ax + ay * ay + az * az);
 8005542:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8005546:	eea9 0aa9 	vfma.f32	s0, s19, s19
 800554a:	eea8 0a08 	vfma.f32	s0, s16, s16
 800554e:	f7ff fee3 	bl	8005318 <oneOverSqrt>

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRSIMU->_q0;
        _2q1 = 2.0f * AHRSIMU->_q1;
        _2q2 = 2.0f * AHRSIMU->_q2;
        _2q3 = 2.0f * AHRSIMU->_q3;
 8005552:	edd4 6a08 	vldr	s13, [r4, #32]
        _2q1 = 2.0f * AHRSIMU->_q1;
 8005556:	edd4 4a06 	vldr	s9, [r4, #24]
        _2q0 = 2.0f * AHRSIMU->_q0;
 800555a:	ed94 3a05 	vldr	s6, [r4, #20]
        _2q2 = 2.0f * AHRSIMU->_q2;
 800555e:	ed94 ca07 	vldr	s24, [r4, #28]
        ax *= recipNorm;
 8005562:	ee69 1a80 	vmul.f32	s3, s19, s0
        _2q3 = 2.0f * AHRSIMU->_q3;
 8005566:	ee36 1aa6 	vadd.f32	s2, s13, s13
        _4q0 = 4.0f * AHRSIMU->_q0;
 800556a:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
        az *= recipNorm;
 800556e:	ee68 2a00 	vmul.f32	s5, s16, s0
        _8q1 = 8.0f * AHRSIMU->_q1;
        _8q2 = 8.0f * AHRSIMU->_q2;
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 8005572:	ee66 0aa6 	vmul.f32	s1, s13, s13

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8005576:	ee20 0a68 	vnmul.f32	s0, s0, s17
        _4q1 = 4.0f * AHRSIMU->_q1;
 800557a:	ee24 8aa5 	vmul.f32	s16, s9, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800557e:	ee61 8a61 	vnmul.f32	s17, s2, s3
        _2q0 = 2.0f * AHRSIMU->_q0;
 8005582:	ee73 7a03 	vadd.f32	s15, s6, s6
        _4q0 = 4.0f * AHRSIMU->_q0;
 8005586:	ee23 2a25 	vmul.f32	s4, s6, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800558a:	eee8 8a20 	vfma.f32	s17, s16, s1
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 800558e:	ee23 3a03 	vmul.f32	s6, s6, s6
        _8q1 = 8.0f * AHRSIMU->_q1;
 8005592:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8005596:	ee23 3a25 	vmul.f32	s6, s6, s11
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 800559a:	ee24 5aa4 	vmul.f32	s10, s9, s9
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800559e:	eee4 8a83 	vfma.f32	s17, s9, s6
        _8q1 = 8.0f * AHRSIMU->_q1;
 80055a2:	ee64 caa3 	vmul.f32	s25, s9, s7
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80055a6:	eee0 8a27 	vfma.f32	s17, s0, s15
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 80055aa:	ee2c 7a0c 	vmul.f32	s14, s24, s24
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80055ae:	ee78 8ac8 	vsub.f32	s17, s17, s16
        _4q2 = 4.0f * AHRSIMU->_q2;
 80055b2:	ee2c 4a25 	vmul.f32	s8, s24, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80055b6:	eeec 8a85 	vfma.f32	s17, s25, s10
        _2q2 = 2.0f * AHRSIMU->_q2;
 80055ba:	ee3c 6a0c 	vadd.f32	s12, s24, s24
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80055be:	eeec 8a87 	vfma.f32	s17, s25, s14
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80055c2:	ee21 aa86 	vmul.f32	s20, s3, s12
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80055c6:	eee2 8a88 	vfma.f32	s17, s5, s16
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80055ca:	ee21 8aa7 	vmul.f32	s16, s3, s15
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80055ce:	eea2 aa07 	vfma.f32	s20, s4, s14
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80055d2:	eeac 8a03 	vfma.f32	s16, s24, s6
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80055d6:	eea2 aa05 	vfma.f32	s20, s4, s10
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80055da:	eea4 8a20 	vfma.f32	s16, s8, s1
        _2q1 = 2.0f * AHRSIMU->_q1;
 80055de:	ee74 9aa4 	vadd.f32	s19, s9, s9
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80055e2:	eea0 8a01 	vfma.f32	s16, s0, s2
        _8q2 = 8.0f * AHRSIMU->_q2;
 80055e6:	ee6c 3a23 	vmul.f32	s7, s24, s7
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80055ea:	ee38 8a44 	vsub.f32	s16, s16, s8
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80055ee:	eea0 aa29 	vfma.f32	s20, s0, s19
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80055f2:	eea3 8a85 	vfma.f32	s16, s7, s10
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 80055f6:	ee69 9ae1 	vnmul.f32	s19, s19, s3
 80055fa:	ee25 5a25 	vmul.f32	s10, s10, s11
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80055fe:	eea3 8a87 	vfma.f32	s16, s7, s14
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8005602:	eee6 9a85 	vfma.f32	s19, s13, s10
 8005606:	ee27 7a25 	vmul.f32	s14, s14, s11
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800560a:	eea2 8a84 	vfma.f32	s16, s5, s8
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 800560e:	eee6 9a87 	vfma.f32	s19, s13, s14
 8005612:	eee0 9a06 	vfma.f32	s19, s0, s12

        /* Normalise step magnitude */
        recipNorm = oneOverSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8005616:	ee28 0aa8 	vmul.f32	s0, s17, s17
 800561a:	eeaa 0a0a 	vfma.f32	s0, s20, s20
 800561e:	eea8 0a08 	vfma.f32	s0, s16, s16
 8005622:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8005626:	f7ff fe77 	bl	8005318 <oneOverSqrt>
        s1 *= recipNorm;
        s2 *= recipNorm;
        s3 *= recipNorm;

        /* Apply feedback step */
        qDot1 -= AHRSIMU->_beta * s0;
 800562a:	edd4 7a04 	vldr	s15, [r4, #16]
 800562e:	ee20 aa4a 	vnmul.f32	s20, s0, s20
        qDot2 -= AHRSIMU->_beta * s1;
 8005632:	ee60 8a68 	vnmul.f32	s17, s0, s17
        qDot3 -= AHRSIMU->_beta * s2;
 8005636:	ee20 8a48 	vnmul.f32	s16, s0, s16
        qDot4 -= AHRSIMU->_beta * s3;
 800563a:	ee20 0a69 	vnmul.f32	s0, s0, s19
        qDot1 -= AHRSIMU->_beta * s0;
 800563e:	eeea ba27 	vfma.f32	s23, s20, s15
        qDot2 -= AHRSIMU->_beta * s1;
 8005642:	eea8 baa7 	vfma.f32	s22, s17, s15
        qDot3 -= AHRSIMU->_beta * s2;
 8005646:	eee8 aa27 	vfma.f32	s21, s16, s15
        qDot4 -= AHRSIMU->_beta * s3;
 800564a:	eea0 9a27 	vfma.f32	s18, s0, s15
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 800564e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8005652:	ed94 0a06 	vldr	s0, [r4, #24]
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8005656:	edd4 6a05 	vldr	s13, [r4, #20]
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 800565a:	ed94 7a07 	vldr	s14, [r4, #28]
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 800565e:	edd4 7a08 	vldr	s15, [r4, #32]
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8005662:	eeab 0a06 	vfma.f32	s0, s22, s12
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8005666:	eeeb 6a86 	vfma.f32	s13, s23, s12
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 800566a:	ed84 0a06 	vstr	s0, [r4, #24]

    /* Normalise quaternion */
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 800566e:	ee20 0a00 	vmul.f32	s0, s0, s0
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8005672:	eeaa 7a86 	vfma.f32	s14, s21, s12
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8005676:	eea6 0aa6 	vfma.f32	s0, s13, s13
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 800567a:	eee9 7a06 	vfma.f32	s15, s18, s12
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 800567e:	eea7 0a07 	vfma.f32	s0, s14, s14
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8005682:	edc4 7a08 	vstr	s15, [r4, #32]
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8005686:	edc4 6a05 	vstr	s13, [r4, #20]
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 800568a:	ed84 7a07 	vstr	s14, [r4, #28]
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 800568e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8005692:	f7ff fe41 	bl	8005318 <oneOverSqrt>
    AHRSIMU->_q0 *= recipNorm;
 8005696:	edd4 7a05 	vldr	s15, [r4, #20]
 800569a:	ee67 7a80 	vmul.f32	s15, s15, s0
    AHRSIMU->_q2 *= recipNorm;
    AHRSIMU->_q3 *= recipNorm;

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}
 800569e:	ecbd 8b0a 	vpop	{d8-d12}
    AHRSIMU->_q0 *= recipNorm;
 80056a2:	edc4 7a05 	vstr	s15, [r4, #20]
    AHRSIMU->_q1 *= recipNorm;
 80056a6:	edd4 7a06 	vldr	s15, [r4, #24]
 80056aa:	ee67 7a80 	vmul.f32	s15, s15, s0
    calculateAngles(AHRSIMU);
 80056ae:	4620      	mov	r0, r4
    AHRSIMU->_q1 *= recipNorm;
 80056b0:	edc4 7a06 	vstr	s15, [r4, #24]
    AHRSIMU->_q2 *= recipNorm;
 80056b4:	edd4 7a07 	vldr	s15, [r4, #28]
 80056b8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80056bc:	edc4 7a07 	vstr	s15, [r4, #28]
    AHRSIMU->_q3 *= recipNorm;
 80056c0:	edd4 7a08 	vldr	s15, [r4, #32]
 80056c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80056c8:	ed84 0a08 	vstr	s0, [r4, #32]
}
 80056cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calculateAngles(AHRSIMU);
 80056d0:	f7ff be36 	b.w	8005340 <calculateAngles>

080056d4 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;

	/* Increase system time */
	TM_Time++;
 80056d8:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_IncTick+0x64>)
void HAL_IncTick(void) {
 80056da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TM_Time++;
 80056dc:	6813      	ldr	r3, [r2, #0]
 80056de:	3301      	adds	r3, #1
 80056e0:	6013      	str	r3, [r2, #0]

	/* Decrease other system time */
	if (TM_Time2) {
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <HAL_IncTick+0x68>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	b112      	cbz	r2, 80056ee <HAL_IncTick+0x16>
		TM_Time2--;
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	3a01      	subs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
	}

	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80056ee:	4e15      	ldr	r6, [pc, #84]	; (8005744 <HAL_IncTick+0x6c>)
void HAL_IncTick(void) {
 80056f0:	2500      	movs	r5, #0
 80056f2:	4637      	mov	r7, r6
	for (i = 0; i < CustomTimers.Count; i++) {
 80056f4:	7833      	ldrb	r3, [r6, #0]
 80056f6:	b2ec      	uxtb	r4, r5
 80056f8:	42a3      	cmp	r3, r4
 80056fa:	d802      	bhi.n	8005702 <HAL_IncTick+0x2a>
			}
		}
	}

	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80056fc:	f7ff ffea 	bl	80056d4 <TM_DELAY_1msHandler>
 8005700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8005702:	00a4      	lsls	r4, r4, #2
 8005704:	1933      	adds	r3, r6, r4
 8005706:	6858      	ldr	r0, [r3, #4]
		if (
 8005708:	b1b0      	cbz	r0, 8005738 <HAL_IncTick+0x60>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 800570a:	7803      	ldrb	r3, [r0, #0]
 800570c:	079b      	lsls	r3, r3, #30
 800570e:	d513      	bpl.n	8005738 <HAL_IncTick+0x60>
			if (CustomTimers.Timers[i]->CNT) {
 8005710:	6883      	ldr	r3, [r0, #8]
 8005712:	b10b      	cbz	r3, 8005718 <HAL_IncTick+0x40>
				CustomTimers.Timers[i]->CNT--;
 8005714:	3b01      	subs	r3, #1
 8005716:	6083      	str	r3, [r0, #8]
			if (CustomTimers.Timers[i]->CNT == 0) {
 8005718:	6883      	ldr	r3, [r0, #8]
 800571a:	b96b      	cbnz	r3, 8005738 <HAL_IncTick+0x60>
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 800571c:	443c      	add	r4, r7
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 800571e:	68c3      	ldr	r3, [r0, #12]
 8005720:	6901      	ldr	r1, [r0, #16]
 8005722:	4798      	blx	r3
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8005724:	6862      	ldr	r2, [r4, #4]
 8005726:	6853      	ldr	r3, [r2, #4]
 8005728:	6093      	str	r3, [r2, #8]
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 800572a:	7813      	ldrb	r3, [r2, #0]
 800572c:	f013 0101 	ands.w	r1, r3, #1
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8005730:	bf04      	itt	eq
 8005732:	f361 0341 	bfieq	r3, r1, #1, #1
 8005736:	7013      	strbeq	r3, [r2, #0]
 8005738:	3501      	adds	r5, #1
 800573a:	e7db      	b.n	80056f4 <HAL_IncTick+0x1c>
 800573c:	20000dd8 	.word	0x20000dd8
 8005740:	20000ddc 	.word	0x20000ddc
 8005744:	20000dc0 	.word	0x20000dc0

08005748 <HAL_Delay>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005748:	f3ef 8305 	mrs	r3, IPSR
}

void HAL_Delay(uint32_t Delay) {
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 800574c:	b113      	cbz	r3, 8005754 <HAL_Delay+0xc>
		}
	} else {
		/* Called from interrupt mode */
		while (Delay) {
			/* Check if timer reached zero after we last checked COUNTFLAG bit */
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 800574e:	4b08      	ldr	r3, [pc, #32]	; (8005770 <HAL_Delay+0x28>)
		while (Delay) {
 8005750:	b938      	cbnz	r0, 8005762 <HAL_Delay+0x1a>
 8005752:	4770      	bx	lr
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 8005754:	4b07      	ldr	r3, [pc, #28]	; (8005774 <HAL_Delay+0x2c>)
 8005756:	6819      	ldr	r1, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
		while ((HAL_GetTick() - tickstart) < Delay) {
 800575a:	1a52      	subs	r2, r2, r1
 800575c:	4290      	cmp	r0, r2
 800575e:	d8fb      	bhi.n	8005758 <HAL_Delay+0x10>
 8005760:	4770      	bx	lr
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	03d2      	lsls	r2, r2, #15
				Delay--;
 8005766:	bf48      	it	mi
 8005768:	f100 30ff 	addmi.w	r0, r0, #4294967295
 800576c:	e7f0      	b.n	8005750 <HAL_Delay+0x8>
 800576e:	bf00      	nop
 8005770:	e000e010 	.word	0xe000e010
 8005774:	20000dd8 	.word	0x20000dd8

08005778 <HAL_GetTick>:
	return TM_Time;
 8005778:	4b01      	ldr	r3, [pc, #4]	; (8005780 <HAL_GetTick+0x8>)
 800577a:	6818      	ldr	r0, [r3, #0]
}
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000dd8 	.word	0x20000dd8

08005784 <uart_queue_increase_point_value>:

/* Static Functions */

__STATIC_INLINE void uart_queue_increase_point_value(uint32_t * data_p)
{
    (* data_p) ++;
 8005784:	6803      	ldr	r3, [r0, #0]
 8005786:	3301      	adds	r3, #1
    if(UART_QUEUE_BUFFER_SIZE == (* data_p))
 8005788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    {
        (* data_p) = 0;
 800578c:	bf08      	it	eq
 800578e:	2300      	moveq	r3, #0
 8005790:	6003      	str	r3, [r0, #0]
 8005792:	4770      	bx	lr

08005794 <UartQueue_Serial_Is_Empty>:
    uart_queue_serial_point_head = uart_queue_serial_point_tail = 0;
}

CRZ_bool UartQueue_Serial_Is_Empty(void)
{
    if(uart_queue_serial_point_head == uart_queue_serial_point_tail)
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <UartQueue_Serial_Is_Empty+0x10>)
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <UartQueue_Serial_Is_Empty+0x14>)
 800579a:	681b      	ldr	r3, [r3, #0]
    {
        return CRZ_TRUE;
    }
    return CRZ_FALSE;
}
 800579c:	1ac3      	subs	r3, r0, r3
 800579e:	4258      	negs	r0, r3
 80057a0:	4158      	adcs	r0, r3
 80057a2:	4770      	bx	lr
 80057a4:	20000de4 	.word	0x20000de4
 80057a8:	20000de8 	.word	0x20000de8

080057ac <UartQueue_Serial_EnQueue>:

void UartQueue_Serial_EnQueue(uint16_t data)
{
    uart_queue_serial_buffer[uart_queue_serial_point_head] = data;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <UartQueue_Serial_EnQueue+0x10>)
 80057ae:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <UartQueue_Serial_EnQueue+0x14>)
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
    uart_queue_increase_point_value(&uart_queue_serial_point_head);
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff bfe4 	b.w	8005784 <uart_queue_increase_point_value>
 80057bc:	20000de4 	.word	0x20000de4
 80057c0:	200020fc 	.word	0x200020fc

080057c4 <UartQueue_Serial_DeQueue>:
	return;
}

uint16_t UartQueue_Serial_DeQueue(void)
{
    uint16_t retVal = uart_queue_serial_buffer[uart_queue_serial_point_tail];
 80057c4:	4804      	ldr	r0, [pc, #16]	; (80057d8 <UartQueue_Serial_DeQueue+0x14>)
{
 80057c6:	b508      	push	{r3, lr}
    uint16_t retVal = uart_queue_serial_buffer[uart_queue_serial_point_tail];
 80057c8:	6802      	ldr	r2, [r0, #0]
 80057ca:	4b04      	ldr	r3, [pc, #16]	; (80057dc <UartQueue_Serial_DeQueue+0x18>)
 80057cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    uart_queue_increase_point_value(&uart_queue_serial_point_tail);
 80057d0:	f7ff ffd8 	bl	8005784 <uart_queue_increase_point_value>
    return retVal;
}
 80057d4:	4610      	mov	r0, r2
 80057d6:	bd08      	pop	{r3, pc}
 80057d8:	20000de8 	.word	0x20000de8
 80057dc:	200020fc 	.word	0x200020fc

080057e0 <Uart_6_Queue_Comm_EnQueue>:
    return CRZ_FALSE;
}

void Uart_6_Queue_Comm_EnQueue(uint16_t data)
{
    uart_6_queue_comm_buffer[uart_6_queue_comm_point_head] = data;
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <Uart_6_Queue_Comm_EnQueue+0x10>)
 80057e2:	4a04      	ldr	r2, [pc, #16]	; (80057f4 <Uart_6_Queue_Comm_EnQueue+0x14>)
 80057e4:	6819      	ldr	r1, [r3, #0]
 80057e6:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
    uart_queue_increase_point_value(&uart_6_queue_comm_point_head);
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff bfca 	b.w	8005784 <uart_queue_increase_point_value>
 80057f0:	20000de0 	.word	0x20000de0
 80057f4:	2000192c 	.word	0x2000192c

080057f8 <send_operation>:

}

void send_operation(int op)
{
	switch(op) {
 80057f8:	1e42      	subs	r2, r0, #1
{
 80057fa:	b510      	push	{r4, lr}
 80057fc:	4603      	mov	r3, r0
	switch(op) {
 80057fe:	2a07      	cmp	r2, #7
 8005800:	d848      	bhi.n	8005894 <send_operation+0x9c>
 8005802:	e8df f002 	tbb	[pc, r2]
 8005806:	0404      	.short	0x0404
 8005808:	16040404 	.word	0x16040404
 800580c:	3724      	.short	0x3724
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
		flag = 2;
 800580e:	4923      	ldr	r1, [pc, #140]	; (800589c <send_operation+0xa4>)
		sprintf(tx_test, "[%d,%d,0\n", flag, op);
 8005810:	4823      	ldr	r0, [pc, #140]	; (80058a0 <send_operation+0xa8>)
		flag = 2;
 8005812:	2202      	movs	r2, #2
 8005814:	600a      	str	r2, [r1, #0]
		sprintf(tx_test, "[%d,%d,0\n", flag, op);
 8005816:	4923      	ldr	r1, [pc, #140]	; (80058a4 <send_operation+0xac>)
 8005818:	f000 ff1c 	bl	8006654 <siprintf>
		gyro_onoff = 0;
		flag = 3;
		fflag = 1;
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
		sprintf(tx_test, "[%d,0,0\n",flag);
		HAL_UART_Transmit(&huart6, (uint8_t *)tx_test, strlen(tx_test), 0xFFFF);
 800581c:	4820      	ldr	r0, [pc, #128]	; (80058a0 <send_operation+0xa8>)
 800581e:	f7fa fcd7 	bl	80001d0 <strlen>
 8005822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005826:	b282      	uxth	r2, r0
 8005828:	491d      	ldr	r1, [pc, #116]	; (80058a0 <send_operation+0xa8>)
 800582a:	481f      	ldr	r0, [pc, #124]	; (80058a8 <send_operation+0xb0>)
 800582c:	f7fd fd1e 	bl	800326c <HAL_UART_Transmit>
		break;
 8005830:	e009      	b.n	8005846 <send_operation+0x4e>
		gyro_onoff = 1;
 8005832:	4a1e      	ldr	r2, [pc, #120]	; (80058ac <send_operation+0xb4>)
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8005834:	481e      	ldr	r0, [pc, #120]	; (80058b0 <send_operation+0xb8>)
		gyro_onoff = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	6013      	str	r3, [r2, #0]
		flag = 1;
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <send_operation+0xa4>)
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 800583c:	2140      	movs	r1, #64	; 0x40
		flag = 1;
 800583e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8005840:	2200      	movs	r2, #0
 8005842:	f7fb fd29 	bl	8001298 <HAL_GPIO_WritePin>
	default:
		printf("operation error\n");
		break;
	}

	operation = 0;
 8005846:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <send_operation+0xbc>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	bd10      	pop	{r4, pc}
		gyro_onoff = 0;
 800584e:	4b17      	ldr	r3, [pc, #92]	; (80058ac <send_operation+0xb4>)
		flag = 3;
 8005850:	4c12      	ldr	r4, [pc, #72]	; (800589c <send_operation+0xa4>)
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8005852:	4817      	ldr	r0, [pc, #92]	; (80058b0 <send_operation+0xb8>)
		gyro_onoff = 0;
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
		flag = 3;
 8005858:	2303      	movs	r3, #3
 800585a:	6023      	str	r3, [r4, #0]
		fflag = 1;
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <send_operation+0xc0>)
 800585e:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8005860:	2140      	movs	r1, #64	; 0x40
		fflag = 1;
 8005862:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8005864:	f7fb fd18 	bl	8001298 <HAL_GPIO_WritePin>
		sprintf(tx_test, "[%d,0,0\n",flag);
 8005868:	6822      	ldr	r2, [r4, #0]
 800586a:	4914      	ldr	r1, [pc, #80]	; (80058bc <send_operation+0xc4>)
 800586c:	480c      	ldr	r0, [pc, #48]	; (80058a0 <send_operation+0xa8>)
 800586e:	f000 fef1 	bl	8006654 <siprintf>
 8005872:	e7d3      	b.n	800581c <send_operation+0x24>
		printf("wait 10 sec...\n");
 8005874:	4812      	ldr	r0, [pc, #72]	; (80058c0 <send_operation+0xc8>)
 8005876:	f000 fed5 	bl	8006624 <puts>
		hr_flag = 1;
 800587a:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <send_operation+0xcc>)
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 800587c:	480c      	ldr	r0, [pc, #48]	; (80058b0 <send_operation+0xb8>)
		hr_flag = 1;
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	2200      	movs	r2, #0
 8005886:	f7fb fd07 	bl	8001298 <HAL_GPIO_WritePin>
		tickstart1 = HAL_GetTick();
 800588a:	f7ff ff75 	bl	8005778 <HAL_GetTick>
 800588e:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <send_operation+0xd0>)
 8005890:	6018      	str	r0, [r3, #0]
		break;
 8005892:	e7d8      	b.n	8005846 <send_operation+0x4e>
		printf("operation error\n");
 8005894:	480d      	ldr	r0, [pc, #52]	; (80058cc <send_operation+0xd4>)
 8005896:	f000 fec5 	bl	8006624 <puts>
		break;
 800589a:	e7d4      	b.n	8005846 <send_operation+0x4e>
 800589c:	20000dac 	.word	0x20000dac
 80058a0:	20002930 	.word	0x20002930
 80058a4:	080092b7 	.word	0x080092b7
 80058a8:	20002b70 	.word	0x20002b70
 80058ac:	20000db0 	.word	0x20000db0
 80058b0:	40021400 	.word	0x40021400
 80058b4:	20000db8 	.word	0x20000db8
 80058b8:	20000da8 	.word	0x20000da8
 80058bc:	08009291 	.word	0x08009291
 80058c0:	0800921c 	.word	0x0800921c
 80058c4:	20000db4 	.word	0x20000db4
 80058c8:	20001928 	.word	0x20001928
 80058cc:	080092c1 	.word	0x080092c1

080058d0 <UART6_Test>:
{
 80058d0:	b538      	push	{r3, r4, r5, lr}
		ch = UartQueue_Serial_DeQueue();
 80058d2:	4d0f      	ldr	r5, [pc, #60]	; (8005910 <UART6_Test+0x40>)
 80058d4:	4c0f      	ldr	r4, [pc, #60]	; (8005914 <UART6_Test+0x44>)
	while(CRZ_FALSE == UartQueue_Serial_Is_Empty())
 80058d6:	f7ff ff5d 	bl	8005794 <UartQueue_Serial_Is_Empty>
 80058da:	b100      	cbz	r0, 80058de <UART6_Test+0xe>
}
 80058dc:	bd38      	pop	{r3, r4, r5, pc}
		ch = UartQueue_Serial_DeQueue();
 80058de:	f7ff ff71 	bl	80057c4 <UartQueue_Serial_DeQueue>
 80058e2:	b2c0      	uxtb	r0, r0
		if(ch == '['){
 80058e4:	285b      	cmp	r0, #91	; 0x5b
			dflag = 1;
 80058e6:	bf04      	itt	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	6023      	streq	r3, [r4, #0]
		if(dflag && ch != 91 && ch != 93){
 80058ec:	6823      	ldr	r3, [r4, #0]
		ch = UartQueue_Serial_DeQueue();
 80058ee:	7028      	strb	r0, [r5, #0]
		if(dflag && ch != 91 && ch != 93){
 80058f0:	b143      	cbz	r3, 8005904 <UART6_Test+0x34>
 80058f2:	285b      	cmp	r0, #91	; 0x5b
 80058f4:	d006      	beq.n	8005904 <UART6_Test+0x34>
 80058f6:	285d      	cmp	r0, #93	; 0x5d
 80058f8:	d004      	beq.n	8005904 <UART6_Test+0x34>
			operation = ch - '0';
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <UART6_Test+0x48>)
 80058fc:	3830      	subs	r0, #48	; 0x30
 80058fe:	6018      	str	r0, [r3, #0]
			send_operation(operation);
 8005900:	f7ff ff7a 	bl	80057f8 <send_operation>
		if(ch == ']'){
 8005904:	782b      	ldrb	r3, [r5, #0]
 8005906:	2b5d      	cmp	r3, #93	; 0x5d
 8005908:	d1e5      	bne.n	80058d6 <UART6_Test+0x6>
			dflag = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	e7e1      	b.n	80058d4 <UART6_Test+0x4>
 8005910:	20002a64 	.word	0x20002a64
 8005914:	200029fc 	.word	0x200029fc
 8005918:	20000db8 	.word	0x20000db8

0800591c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800591c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800591e:	480b      	ldr	r0, [pc, #44]	; (800594c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <MX_USART1_UART_Init+0x34>)
 8005922:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005926:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800592a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800592c:	2300      	movs	r3, #0
 800592e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005930:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005932:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005934:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005936:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005938:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800593a:	f7fd fc69 	bl	8003210 <HAL_UART_Init>
 800593e:	b118      	cbz	r0, 8005948 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005944:	f7ff bbfd 	b.w	8005142 <Error_Handler>
 8005948:	bd08      	pop	{r3, pc}
 800594a:	bf00      	nop
 800594c:	20002b30 	.word	0x20002b30
 8005950:	40011000 	.word	0x40011000

08005954 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005954:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8005956:	480b      	ldr	r0, [pc, #44]	; (8005984 <MX_USART6_UART_Init+0x30>)
  huart6.Init.BaudRate = 115200;
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <MX_USART6_UART_Init+0x34>)
 800595a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800595e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005962:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005964:	2300      	movs	r3, #0
 8005966:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005968:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800596a:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800596c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800596e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005970:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005972:	f7fd fc4d 	bl	8003210 <HAL_UART_Init>
 8005976:	b118      	cbz	r0, 8005980 <MX_USART6_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800597c:	f7ff bbe1 	b.w	8005142 <Error_Handler>
 8005980:	bd08      	pop	{r3, pc}
 8005982:	bf00      	nop
 8005984:	20002b70 	.word	0x20002b70
 8005988:	40011400 	.word	0x40011400

0800598c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800598c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598e:	2214      	movs	r2, #20
{
 8005990:	b08a      	sub	sp, #40	; 0x28
 8005992:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005994:	2100      	movs	r1, #0
 8005996:	eb0d 0002 	add.w	r0, sp, r2
 800599a:	f000 f8c7 	bl	8005b2c <memset>
  if(uartHandle->Instance==USART1)
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	4a2f      	ldr	r2, [pc, #188]	; (8005a60 <HAL_UART_MspInit+0xd4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d12e      	bne.n	8005a04 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059a8:	482f      	ldr	r0, [pc, #188]	; (8005a68 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80059aa:	2400      	movs	r4, #0
 80059ac:	9401      	str	r4, [sp, #4]
 80059ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b0:	f042 0210 	orr.w	r2, r2, #16
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44
 80059b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b8:	f002 0210 	and.w	r2, r2, #16
 80059bc:	9201      	str	r2, [sp, #4]
 80059be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c0:	9402      	str	r4, [sp, #8]
 80059c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	9302      	str	r3, [sp, #8]
 80059d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80059d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80059d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059da:	2302      	movs	r3, #2
 80059dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059de:	2301      	movs	r3, #1
 80059e0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e2:	2303      	movs	r3, #3
 80059e4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80059e8:	2307      	movs	r3, #7
 80059ea:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ec:	f7fb fb6e 	bl	80010cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80059f0:	2025      	movs	r0, #37	; 0x25
 80059f2:	4622      	mov	r2, r4
 80059f4:	4621      	mov	r1, r4
 80059f6:	f7fb fafb 	bl	8000ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80059fa:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80059fc:	f7fb fb2c 	bl	8001058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005a00:	b00a      	add	sp, #40	; 0x28
 8005a02:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART6)
 8005a04:	4a19      	ldr	r2, [pc, #100]	; (8005a6c <HAL_UART_MspInit+0xe0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d1fa      	bne.n	8005a00 <HAL_UART_MspInit+0x74>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005a0a:	4b16      	ldr	r3, [pc, #88]	; (8005a64 <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a0c:	4818      	ldr	r0, [pc, #96]	; (8005a70 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8005a0e:	2400      	movs	r4, #0
 8005a10:	9403      	str	r4, [sp, #12]
 8005a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a14:	f042 0220 	orr.w	r2, r2, #32
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44
 8005a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1c:	f002 0220 	and.w	r2, r2, #32
 8005a20:	9203      	str	r2, [sp, #12]
 8005a22:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a24:	9404      	str	r4, [sp, #16]
 8005a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a28:	f042 0204 	orr.w	r2, r2, #4
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a38:	23c0      	movs	r3, #192	; 0xc0
 8005a3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a40:	2301      	movs	r3, #1
 8005a42:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a44:	2303      	movs	r3, #3
 8005a46:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a48:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a4e:	f7fb fb3d 	bl	80010cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005a52:	2047      	movs	r0, #71	; 0x47
 8005a54:	4622      	mov	r2, r4
 8005a56:	4621      	mov	r1, r4
 8005a58:	f7fb faca 	bl	8000ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005a5c:	2047      	movs	r0, #71	; 0x47
 8005a5e:	e7cd      	b.n	80059fc <HAL_UART_MspInit+0x70>
 8005a60:	40011000 	.word	0x40011000
 8005a64:	40023800 	.word	0x40023800
 8005a68:	40020000 	.word	0x40020000
 8005a6c:	40011400 	.word	0x40011400
 8005a70:	40020800 	.word	0x40020800

08005a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005aac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005a7a:	e003      	b.n	8005a84 <LoopCopyDataInit>

08005a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a82:	3104      	adds	r1, #4

08005a84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a84:	480b      	ldr	r0, [pc, #44]	; (8005ab4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a8c:	d3f6      	bcc.n	8005a7c <CopyDataInit>
  ldr  r2, =_sbss
 8005a8e:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005a90:	e002      	b.n	8005a98 <LoopFillZerobss>

08005a92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005a92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005a94:	f842 3b04 	str.w	r3, [r2], #4

08005a98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a9c:	d3f9      	bcc.n	8005a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a9e:	f7ff fc15 	bl	80052cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aa2:	f000 f817 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005aa6:	f7ff f8c7 	bl	8004c38 <main>
  bx  lr    
 8005aaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005aac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005ab0:	080095f0 	.word	0x080095f0
  ldr  r0, =_sdata
 8005ab4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005ab8:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005abc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005ac0:	20002bb4 	.word	0x20002bb4

08005ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ac4:	e7fe      	b.n	8005ac4 <ADC_IRQHandler>
	...

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	; (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000000c 	.word	0x2000000c

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4e0d      	ldr	r6, [pc, #52]	; (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	; (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1ba4      	subs	r4, r4, r6
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2500      	movs	r5, #0
 8005ae0:	42a5      	cmp	r5, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4e0b      	ldr	r6, [pc, #44]	; (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	; (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f003 fa42 	bl	8008f70 <_init>
 8005aec:	1ba4      	subs	r4, r4, r6
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2500      	movs	r5, #0
 8005af2:	42a5      	cmp	r5, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005afc:	4798      	blx	r3
 8005afe:	3501      	adds	r5, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b06:	4798      	blx	r3
 8005b08:	3501      	adds	r5, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	080095e8 	.word	0x080095e8
 8005b10:	080095e8 	.word	0x080095e8
 8005b14:	080095e8 	.word	0x080095e8
 8005b18:	080095ec 	.word	0x080095ec

08005b1c <malloc>:
 8005b1c:	4b02      	ldr	r3, [pc, #8]	; (8005b28 <malloc+0xc>)
 8005b1e:	4601      	mov	r1, r0
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	f000 b859 	b.w	8005bd8 <_malloc_r>
 8005b26:	bf00      	nop
 8005b28:	2000000c 	.word	0x2000000c

08005b2c <memset>:
 8005b2c:	4402      	add	r2, r0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d100      	bne.n	8005b36 <memset+0xa>
 8005b34:	4770      	bx	lr
 8005b36:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3a:	e7f9      	b.n	8005b30 <memset+0x4>

08005b3c <_free_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4605      	mov	r5, r0
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d045      	beq.n	8005bd0 <_free_r+0x94>
 8005b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b48:	1f0c      	subs	r4, r1, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bfb8      	it	lt
 8005b4e:	18e4      	addlt	r4, r4, r3
 8005b50:	f001 fec1 	bl	80078d6 <__malloc_lock>
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <_free_r+0x98>)
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	4610      	mov	r0, r2
 8005b5a:	b933      	cbnz	r3, 8005b6a <_free_r+0x2e>
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	6014      	str	r4, [r2, #0]
 8005b60:	4628      	mov	r0, r5
 8005b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b66:	f001 beb7 	b.w	80078d8 <__malloc_unlock>
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	d90c      	bls.n	8005b88 <_free_r+0x4c>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	1862      	adds	r2, r4, r1
 8005b72:	4293      	cmp	r3, r2
 8005b74:	bf04      	itt	eq
 8005b76:	681a      	ldreq	r2, [r3, #0]
 8005b78:	685b      	ldreq	r3, [r3, #4]
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	bf04      	itt	eq
 8005b7e:	1852      	addeq	r2, r2, r1
 8005b80:	6022      	streq	r2, [r4, #0]
 8005b82:	6004      	str	r4, [r0, #0]
 8005b84:	e7ec      	b.n	8005b60 <_free_r+0x24>
 8005b86:	4613      	mov	r3, r2
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	b10a      	cbz	r2, 8005b90 <_free_r+0x54>
 8005b8c:	42a2      	cmp	r2, r4
 8005b8e:	d9fa      	bls.n	8005b86 <_free_r+0x4a>
 8005b90:	6819      	ldr	r1, [r3, #0]
 8005b92:	1858      	adds	r0, r3, r1
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d10b      	bne.n	8005bb0 <_free_r+0x74>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	4401      	add	r1, r0
 8005b9c:	1858      	adds	r0, r3, r1
 8005b9e:	4282      	cmp	r2, r0
 8005ba0:	6019      	str	r1, [r3, #0]
 8005ba2:	d1dd      	bne.n	8005b60 <_free_r+0x24>
 8005ba4:	6810      	ldr	r0, [r2, #0]
 8005ba6:	6852      	ldr	r2, [r2, #4]
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	4401      	add	r1, r0
 8005bac:	6019      	str	r1, [r3, #0]
 8005bae:	e7d7      	b.n	8005b60 <_free_r+0x24>
 8005bb0:	d902      	bls.n	8005bb8 <_free_r+0x7c>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	e7d3      	b.n	8005b60 <_free_r+0x24>
 8005bb8:	6820      	ldr	r0, [r4, #0]
 8005bba:	1821      	adds	r1, r4, r0
 8005bbc:	428a      	cmp	r2, r1
 8005bbe:	bf04      	itt	eq
 8005bc0:	6811      	ldreq	r1, [r2, #0]
 8005bc2:	6852      	ldreq	r2, [r2, #4]
 8005bc4:	6062      	str	r2, [r4, #4]
 8005bc6:	bf04      	itt	eq
 8005bc8:	1809      	addeq	r1, r1, r0
 8005bca:	6021      	streq	r1, [r4, #0]
 8005bcc:	605c      	str	r4, [r3, #4]
 8005bce:	e7c7      	b.n	8005b60 <_free_r+0x24>
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000dec 	.word	0x20000dec

08005bd8 <_malloc_r>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	1ccd      	adds	r5, r1, #3
 8005bdc:	f025 0503 	bic.w	r5, r5, #3
 8005be0:	3508      	adds	r5, #8
 8005be2:	2d0c      	cmp	r5, #12
 8005be4:	bf38      	it	cc
 8005be6:	250c      	movcc	r5, #12
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	4606      	mov	r6, r0
 8005bec:	db01      	blt.n	8005bf2 <_malloc_r+0x1a>
 8005bee:	42a9      	cmp	r1, r5
 8005bf0:	d903      	bls.n	8005bfa <_malloc_r+0x22>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	f001 fe6c 	bl	80078d6 <__malloc_lock>
 8005bfe:	4a23      	ldr	r2, [pc, #140]	; (8005c8c <_malloc_r+0xb4>)
 8005c00:	6814      	ldr	r4, [r2, #0]
 8005c02:	4621      	mov	r1, r4
 8005c04:	b991      	cbnz	r1, 8005c2c <_malloc_r+0x54>
 8005c06:	4c22      	ldr	r4, [pc, #136]	; (8005c90 <_malloc_r+0xb8>)
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	b91b      	cbnz	r3, 8005c14 <_malloc_r+0x3c>
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f000 fd11 	bl	8006634 <_sbrk_r>
 8005c12:	6020      	str	r0, [r4, #0]
 8005c14:	4629      	mov	r1, r5
 8005c16:	4630      	mov	r0, r6
 8005c18:	f000 fd0c 	bl	8006634 <_sbrk_r>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d126      	bne.n	8005c6e <_malloc_r+0x96>
 8005c20:	230c      	movs	r3, #12
 8005c22:	6033      	str	r3, [r6, #0]
 8005c24:	4630      	mov	r0, r6
 8005c26:	f001 fe57 	bl	80078d8 <__malloc_unlock>
 8005c2a:	e7e4      	b.n	8005bf6 <_malloc_r+0x1e>
 8005c2c:	680b      	ldr	r3, [r1, #0]
 8005c2e:	1b5b      	subs	r3, r3, r5
 8005c30:	d41a      	bmi.n	8005c68 <_malloc_r+0x90>
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	d90f      	bls.n	8005c56 <_malloc_r+0x7e>
 8005c36:	600b      	str	r3, [r1, #0]
 8005c38:	50cd      	str	r5, [r1, r3]
 8005c3a:	18cc      	adds	r4, r1, r3
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f001 fe4b 	bl	80078d8 <__malloc_unlock>
 8005c42:	f104 000b 	add.w	r0, r4, #11
 8005c46:	1d23      	adds	r3, r4, #4
 8005c48:	f020 0007 	bic.w	r0, r0, #7
 8005c4c:	1ac3      	subs	r3, r0, r3
 8005c4e:	d01b      	beq.n	8005c88 <_malloc_r+0xb0>
 8005c50:	425a      	negs	r2, r3
 8005c52:	50e2      	str	r2, [r4, r3]
 8005c54:	bd70      	pop	{r4, r5, r6, pc}
 8005c56:	428c      	cmp	r4, r1
 8005c58:	bf0d      	iteet	eq
 8005c5a:	6863      	ldreq	r3, [r4, #4]
 8005c5c:	684b      	ldrne	r3, [r1, #4]
 8005c5e:	6063      	strne	r3, [r4, #4]
 8005c60:	6013      	streq	r3, [r2, #0]
 8005c62:	bf18      	it	ne
 8005c64:	460c      	movne	r4, r1
 8005c66:	e7e9      	b.n	8005c3c <_malloc_r+0x64>
 8005c68:	460c      	mov	r4, r1
 8005c6a:	6849      	ldr	r1, [r1, #4]
 8005c6c:	e7ca      	b.n	8005c04 <_malloc_r+0x2c>
 8005c6e:	1cc4      	adds	r4, r0, #3
 8005c70:	f024 0403 	bic.w	r4, r4, #3
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	d005      	beq.n	8005c84 <_malloc_r+0xac>
 8005c78:	1a21      	subs	r1, r4, r0
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f000 fcda 	bl	8006634 <_sbrk_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d0cd      	beq.n	8005c20 <_malloc_r+0x48>
 8005c84:	6025      	str	r5, [r4, #0]
 8005c86:	e7d9      	b.n	8005c3c <_malloc_r+0x64>
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000dec 	.word	0x20000dec
 8005c90:	20000df0 	.word	0x20000df0

08005c94 <__cvt>:
 8005c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	ec55 4b10 	vmov	r4, r5, d0
 8005c9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005c9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	460e      	mov	r6, r1
 8005ca6:	4691      	mov	r9, r2
 8005ca8:	4619      	mov	r1, r3
 8005caa:	bfb8      	it	lt
 8005cac:	4622      	movlt	r2, r4
 8005cae:	462b      	mov	r3, r5
 8005cb0:	f027 0720 	bic.w	r7, r7, #32
 8005cb4:	bfbb      	ittet	lt
 8005cb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cba:	461d      	movlt	r5, r3
 8005cbc:	2300      	movge	r3, #0
 8005cbe:	232d      	movlt	r3, #45	; 0x2d
 8005cc0:	bfb8      	it	lt
 8005cc2:	4614      	movlt	r4, r2
 8005cc4:	2f46      	cmp	r7, #70	; 0x46
 8005cc6:	700b      	strb	r3, [r1, #0]
 8005cc8:	d004      	beq.n	8005cd4 <__cvt+0x40>
 8005cca:	2f45      	cmp	r7, #69	; 0x45
 8005ccc:	d100      	bne.n	8005cd0 <__cvt+0x3c>
 8005cce:	3601      	adds	r6, #1
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	e000      	b.n	8005cd6 <__cvt+0x42>
 8005cd4:	2103      	movs	r1, #3
 8005cd6:	ab03      	add	r3, sp, #12
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	ab02      	add	r3, sp, #8
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	4632      	mov	r2, r6
 8005ce0:	4653      	mov	r3, sl
 8005ce2:	ec45 4b10 	vmov	d0, r4, r5
 8005ce6:	f000 fe2f 	bl	8006948 <_dtoa_r>
 8005cea:	2f47      	cmp	r7, #71	; 0x47
 8005cec:	4680      	mov	r8, r0
 8005cee:	d102      	bne.n	8005cf6 <__cvt+0x62>
 8005cf0:	f019 0f01 	tst.w	r9, #1
 8005cf4:	d026      	beq.n	8005d44 <__cvt+0xb0>
 8005cf6:	2f46      	cmp	r7, #70	; 0x46
 8005cf8:	eb08 0906 	add.w	r9, r8, r6
 8005cfc:	d111      	bne.n	8005d22 <__cvt+0x8e>
 8005cfe:	f898 3000 	ldrb.w	r3, [r8]
 8005d02:	2b30      	cmp	r3, #48	; 0x30
 8005d04:	d10a      	bne.n	8005d1c <__cvt+0x88>
 8005d06:	2200      	movs	r2, #0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	f7fa fed7 	bl	8000ac0 <__aeabi_dcmpeq>
 8005d12:	b918      	cbnz	r0, 8005d1c <__cvt+0x88>
 8005d14:	f1c6 0601 	rsb	r6, r6, #1
 8005d18:	f8ca 6000 	str.w	r6, [sl]
 8005d1c:	f8da 3000 	ldr.w	r3, [sl]
 8005d20:	4499      	add	r9, r3
 8005d22:	2200      	movs	r2, #0
 8005d24:	2300      	movs	r3, #0
 8005d26:	4620      	mov	r0, r4
 8005d28:	4629      	mov	r1, r5
 8005d2a:	f7fa fec9 	bl	8000ac0 <__aeabi_dcmpeq>
 8005d2e:	b938      	cbnz	r0, 8005d40 <__cvt+0xac>
 8005d30:	2230      	movs	r2, #48	; 0x30
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	4599      	cmp	r9, r3
 8005d36:	d905      	bls.n	8005d44 <__cvt+0xb0>
 8005d38:	1c59      	adds	r1, r3, #1
 8005d3a:	9103      	str	r1, [sp, #12]
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e7f8      	b.n	8005d32 <__cvt+0x9e>
 8005d40:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d48:	eba3 0308 	sub.w	r3, r3, r8
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	b004      	add	sp, #16
 8005d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005d56 <__exponent>:
 8005d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	bfb8      	it	lt
 8005d5e:	4249      	neglt	r1, r1
 8005d60:	f803 2b02 	strb.w	r2, [r3], #2
 8005d64:	bfb4      	ite	lt
 8005d66:	222d      	movlt	r2, #45	; 0x2d
 8005d68:	222b      	movge	r2, #43	; 0x2b
 8005d6a:	2909      	cmp	r1, #9
 8005d6c:	7042      	strb	r2, [r0, #1]
 8005d6e:	dd20      	ble.n	8005db2 <__exponent+0x5c>
 8005d70:	f10d 0207 	add.w	r2, sp, #7
 8005d74:	4617      	mov	r7, r2
 8005d76:	260a      	movs	r6, #10
 8005d78:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d7c:	fb06 1115 	mls	r1, r6, r5, r1
 8005d80:	3130      	adds	r1, #48	; 0x30
 8005d82:	2d09      	cmp	r5, #9
 8005d84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d88:	f102 34ff 	add.w	r4, r2, #4294967295
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	dc09      	bgt.n	8005da4 <__exponent+0x4e>
 8005d90:	3130      	adds	r1, #48	; 0x30
 8005d92:	3a02      	subs	r2, #2
 8005d94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d98:	42ba      	cmp	r2, r7
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	d304      	bcc.n	8005da8 <__exponent+0x52>
 8005d9e:	1a20      	subs	r0, r4, r0
 8005da0:	b003      	add	sp, #12
 8005da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da4:	4622      	mov	r2, r4
 8005da6:	e7e7      	b.n	8005d78 <__exponent+0x22>
 8005da8:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005dac:	f803 1b01 	strb.w	r1, [r3], #1
 8005db0:	e7f2      	b.n	8005d98 <__exponent+0x42>
 8005db2:	2230      	movs	r2, #48	; 0x30
 8005db4:	461c      	mov	r4, r3
 8005db6:	4411      	add	r1, r2
 8005db8:	f804 2b02 	strb.w	r2, [r4], #2
 8005dbc:	7059      	strb	r1, [r3, #1]
 8005dbe:	e7ee      	b.n	8005d9e <__exponent+0x48>

08005dc0 <_printf_float>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	b08d      	sub	sp, #52	; 0x34
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005dcc:	4616      	mov	r6, r2
 8005dce:	461f      	mov	r7, r3
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	f001 fd03 	bl	80077dc <_localeconv_r>
 8005dd6:	6803      	ldr	r3, [r0, #0]
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fa f9f8 	bl	80001d0 <strlen>
 8005de0:	2300      	movs	r3, #0
 8005de2:	930a      	str	r3, [sp, #40]	; 0x28
 8005de4:	f8d8 3000 	ldr.w	r3, [r8]
 8005de8:	9005      	str	r0, [sp, #20]
 8005dea:	3307      	adds	r3, #7
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	f103 0208 	add.w	r2, r3, #8
 8005df4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005df8:	f8d4 b000 	ldr.w	fp, [r4]
 8005dfc:	f8c8 2000 	str.w	r2, [r8]
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e08:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e0c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e10:	9307      	str	r3, [sp, #28]
 8005e12:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e16:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1a:	4ba5      	ldr	r3, [pc, #660]	; (80060b0 <_printf_float+0x2f0>)
 8005e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e20:	f7fa fe80 	bl	8000b24 <__aeabi_dcmpun>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f040 81fb 	bne.w	8006220 <_printf_float+0x460>
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	4ba0      	ldr	r3, [pc, #640]	; (80060b0 <_printf_float+0x2f0>)
 8005e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e34:	f7fa fe58 	bl	8000ae8 <__aeabi_dcmple>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	f040 81f1 	bne.w	8006220 <_printf_float+0x460>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2300      	movs	r3, #0
 8005e42:	4640      	mov	r0, r8
 8005e44:	4649      	mov	r1, r9
 8005e46:	f7fa fe45 	bl	8000ad4 <__aeabi_dcmplt>
 8005e4a:	b110      	cbz	r0, 8005e52 <_printf_float+0x92>
 8005e4c:	232d      	movs	r3, #45	; 0x2d
 8005e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e52:	4b98      	ldr	r3, [pc, #608]	; (80060b4 <_printf_float+0x2f4>)
 8005e54:	4a98      	ldr	r2, [pc, #608]	; (80060b8 <_printf_float+0x2f8>)
 8005e56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005e5a:	bf8c      	ite	hi
 8005e5c:	4690      	movhi	r8, r2
 8005e5e:	4698      	movls	r8, r3
 8005e60:	2303      	movs	r3, #3
 8005e62:	f02b 0204 	bic.w	r2, fp, #4
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	6022      	str	r2, [r4, #0]
 8005e6a:	f04f 0900 	mov.w	r9, #0
 8005e6e:	9700      	str	r7, [sp, #0]
 8005e70:	4633      	mov	r3, r6
 8005e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 f9e2 	bl	8006240 <_printf_common>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	f040 8093 	bne.w	8005fa8 <_printf_float+0x1e8>
 8005e82:	f04f 30ff 	mov.w	r0, #4294967295
 8005e86:	b00d      	add	sp, #52	; 0x34
 8005e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8c:	6861      	ldr	r1, [r4, #4]
 8005e8e:	1c4b      	adds	r3, r1, #1
 8005e90:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005e94:	d13f      	bne.n	8005f16 <_printf_float+0x156>
 8005e96:	2306      	movs	r3, #6
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	9303      	str	r3, [sp, #12]
 8005e9e:	ab0a      	add	r3, sp, #40	; 0x28
 8005ea0:	9302      	str	r3, [sp, #8]
 8005ea2:	ab09      	add	r3, sp, #36	; 0x24
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	ec49 8b10 	vmov	d0, r8, r9
 8005eaa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005eae:	6022      	str	r2, [r4, #0]
 8005eb0:	f8cd a004 	str.w	sl, [sp, #4]
 8005eb4:	6861      	ldr	r1, [r4, #4]
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f7ff feec 	bl	8005c94 <__cvt>
 8005ebc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005ec0:	2b47      	cmp	r3, #71	; 0x47
 8005ec2:	4680      	mov	r8, r0
 8005ec4:	d109      	bne.n	8005eda <_printf_float+0x11a>
 8005ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec8:	1cd8      	adds	r0, r3, #3
 8005eca:	db02      	blt.n	8005ed2 <_printf_float+0x112>
 8005ecc:	6862      	ldr	r2, [r4, #4]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	dd57      	ble.n	8005f82 <_printf_float+0x1c2>
 8005ed2:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ed6:	fa5f fa8a 	uxtb.w	sl, sl
 8005eda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee0:	d834      	bhi.n	8005f4c <_printf_float+0x18c>
 8005ee2:	3901      	subs	r1, #1
 8005ee4:	4652      	mov	r2, sl
 8005ee6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005eea:	9109      	str	r1, [sp, #36]	; 0x24
 8005eec:	f7ff ff33 	bl	8005d56 <__exponent>
 8005ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ef2:	1883      	adds	r3, r0, r2
 8005ef4:	2a01      	cmp	r2, #1
 8005ef6:	4681      	mov	r9, r0
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	dc02      	bgt.n	8005f02 <_printf_float+0x142>
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	07d1      	lsls	r1, r2, #31
 8005f00:	d501      	bpl.n	8005f06 <_printf_float+0x146>
 8005f02:	3301      	adds	r3, #1
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0af      	beq.n	8005e6e <_printf_float+0xae>
 8005f0e:	232d      	movs	r3, #45	; 0x2d
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f14:	e7ab      	b.n	8005e6e <_printf_float+0xae>
 8005f16:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005f1a:	d002      	beq.n	8005f22 <_printf_float+0x162>
 8005f1c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005f20:	d1bb      	bne.n	8005e9a <_printf_float+0xda>
 8005f22:	b189      	cbz	r1, 8005f48 <_printf_float+0x188>
 8005f24:	2300      	movs	r3, #0
 8005f26:	9303      	str	r3, [sp, #12]
 8005f28:	ab0a      	add	r3, sp, #40	; 0x28
 8005f2a:	9302      	str	r3, [sp, #8]
 8005f2c:	ab09      	add	r3, sp, #36	; 0x24
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	ec49 8b10 	vmov	d0, r8, r9
 8005f34:	6022      	str	r2, [r4, #0]
 8005f36:	f8cd a004 	str.w	sl, [sp, #4]
 8005f3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7ff fea8 	bl	8005c94 <__cvt>
 8005f44:	4680      	mov	r8, r0
 8005f46:	e7be      	b.n	8005ec6 <_printf_float+0x106>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e7a5      	b.n	8005e98 <_printf_float+0xd8>
 8005f4c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005f50:	d119      	bne.n	8005f86 <_printf_float+0x1c6>
 8005f52:	2900      	cmp	r1, #0
 8005f54:	6863      	ldr	r3, [r4, #4]
 8005f56:	dd0c      	ble.n	8005f72 <_printf_float+0x1b2>
 8005f58:	6121      	str	r1, [r4, #16]
 8005f5a:	b913      	cbnz	r3, 8005f62 <_printf_float+0x1a2>
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	07d2      	lsls	r2, r2, #31
 8005f60:	d502      	bpl.n	8005f68 <_printf_float+0x1a8>
 8005f62:	3301      	adds	r3, #1
 8005f64:	440b      	add	r3, r1
 8005f66:	6123      	str	r3, [r4, #16]
 8005f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f6c:	f04f 0900 	mov.w	r9, #0
 8005f70:	e7c9      	b.n	8005f06 <_printf_float+0x146>
 8005f72:	b913      	cbnz	r3, 8005f7a <_printf_float+0x1ba>
 8005f74:	6822      	ldr	r2, [r4, #0]
 8005f76:	07d0      	lsls	r0, r2, #31
 8005f78:	d501      	bpl.n	8005f7e <_printf_float+0x1be>
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	e7f3      	b.n	8005f66 <_printf_float+0x1a6>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7f1      	b.n	8005f66 <_printf_float+0x1a6>
 8005f82:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	db05      	blt.n	8005f9a <_printf_float+0x1da>
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	07d1      	lsls	r1, r2, #31
 8005f94:	d5e8      	bpl.n	8005f68 <_printf_float+0x1a8>
 8005f96:	3301      	adds	r3, #1
 8005f98:	e7e5      	b.n	8005f66 <_printf_float+0x1a6>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bfd4      	ite	le
 8005f9e:	f1c3 0302 	rsble	r3, r3, #2
 8005fa2:	2301      	movgt	r3, #1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	e7de      	b.n	8005f66 <_printf_float+0x1a6>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	055a      	lsls	r2, r3, #21
 8005fac:	d407      	bmi.n	8005fbe <_printf_float+0x1fe>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d12b      	bne.n	8006014 <_printf_float+0x254>
 8005fbc:	e761      	b.n	8005e82 <_printf_float+0xc2>
 8005fbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005fc2:	f240 80e2 	bls.w	800618a <_printf_float+0x3ca>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fce:	f7fa fd77 	bl	8000ac0 <__aeabi_dcmpeq>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d03c      	beq.n	8006050 <_printf_float+0x290>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4a38      	ldr	r2, [pc, #224]	; (80060bc <_printf_float+0x2fc>)
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f43f af4e 	beq.w	8005e82 <_printf_float+0xc2>
 8005fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fea:	429a      	cmp	r2, r3
 8005fec:	db02      	blt.n	8005ff4 <_printf_float+0x234>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	07d8      	lsls	r0, r3, #31
 8005ff2:	d50f      	bpl.n	8006014 <_printf_float+0x254>
 8005ff4:	9b05      	ldr	r3, [sp, #20]
 8005ff6:	9a04      	ldr	r2, [sp, #16]
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f af3f 	beq.w	8005e82 <_printf_float+0xc2>
 8006004:	f04f 0800 	mov.w	r8, #0
 8006008:	f104 091a 	add.w	r9, r4, #26
 800600c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600e:	3b01      	subs	r3, #1
 8006010:	4598      	cmp	r8, r3
 8006012:	db12      	blt.n	800603a <_printf_float+0x27a>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	079b      	lsls	r3, r3, #30
 8006018:	d509      	bpl.n	800602e <_printf_float+0x26e>
 800601a:	f04f 0800 	mov.w	r8, #0
 800601e:	f104 0919 	add.w	r9, r4, #25
 8006022:	68e3      	ldr	r3, [r4, #12]
 8006024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	4598      	cmp	r8, r3
 800602a:	f2c0 80ee 	blt.w	800620a <_printf_float+0x44a>
 800602e:	68e0      	ldr	r0, [r4, #12]
 8006030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006032:	4298      	cmp	r0, r3
 8006034:	bfb8      	it	lt
 8006036:	4618      	movlt	r0, r3
 8006038:	e725      	b.n	8005e86 <_printf_float+0xc6>
 800603a:	2301      	movs	r3, #1
 800603c:	464a      	mov	r2, r9
 800603e:	4631      	mov	r1, r6
 8006040:	4628      	mov	r0, r5
 8006042:	47b8      	blx	r7
 8006044:	3001      	adds	r0, #1
 8006046:	f43f af1c 	beq.w	8005e82 <_printf_float+0xc2>
 800604a:	f108 0801 	add.w	r8, r8, #1
 800604e:	e7dd      	b.n	800600c <_printf_float+0x24c>
 8006050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	dc34      	bgt.n	80060c0 <_printf_float+0x300>
 8006056:	2301      	movs	r3, #1
 8006058:	4a18      	ldr	r2, [pc, #96]	; (80060bc <_printf_float+0x2fc>)
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f af0e 	beq.w	8005e82 <_printf_float+0xc2>
 8006066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006068:	b923      	cbnz	r3, 8006074 <_printf_float+0x2b4>
 800606a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606c:	b913      	cbnz	r3, 8006074 <_printf_float+0x2b4>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	07d9      	lsls	r1, r3, #31
 8006072:	d5cf      	bpl.n	8006014 <_printf_float+0x254>
 8006074:	9b05      	ldr	r3, [sp, #20]
 8006076:	9a04      	ldr	r2, [sp, #16]
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	f43f aeff 	beq.w	8005e82 <_printf_float+0xc2>
 8006084:	f04f 0900 	mov.w	r9, #0
 8006088:	f104 0a1a 	add.w	sl, r4, #26
 800608c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800608e:	425b      	negs	r3, r3
 8006090:	4599      	cmp	r9, r3
 8006092:	db01      	blt.n	8006098 <_printf_float+0x2d8>
 8006094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006096:	e78b      	b.n	8005fb0 <_printf_float+0x1f0>
 8006098:	2301      	movs	r3, #1
 800609a:	4652      	mov	r2, sl
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f aeed 	beq.w	8005e82 <_printf_float+0xc2>
 80060a8:	f109 0901 	add.w	r9, r9, #1
 80060ac:	e7ee      	b.n	800608c <_printf_float+0x2cc>
 80060ae:	bf00      	nop
 80060b0:	7fefffff 	.word	0x7fefffff
 80060b4:	080092d8 	.word	0x080092d8
 80060b8:	080092dc 	.word	0x080092dc
 80060bc:	080092e8 	.word	0x080092e8
 80060c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060c4:	429a      	cmp	r2, r3
 80060c6:	bfa8      	it	ge
 80060c8:	461a      	movge	r2, r3
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	4691      	mov	r9, r2
 80060ce:	dc38      	bgt.n	8006142 <_printf_float+0x382>
 80060d0:	f104 031a 	add.w	r3, r4, #26
 80060d4:	f04f 0b00 	mov.w	fp, #0
 80060d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060dc:	9306      	str	r3, [sp, #24]
 80060de:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80060e2:	ebaa 0309 	sub.w	r3, sl, r9
 80060e6:	459b      	cmp	fp, r3
 80060e8:	db33      	blt.n	8006152 <_printf_float+0x392>
 80060ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ee:	429a      	cmp	r2, r3
 80060f0:	db3a      	blt.n	8006168 <_printf_float+0x3a8>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	07da      	lsls	r2, r3, #31
 80060f6:	d437      	bmi.n	8006168 <_printf_float+0x3a8>
 80060f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060fc:	eba3 020a 	sub.w	r2, r3, sl
 8006100:	eba3 0901 	sub.w	r9, r3, r1
 8006104:	4591      	cmp	r9, r2
 8006106:	bfa8      	it	ge
 8006108:	4691      	movge	r9, r2
 800610a:	f1b9 0f00 	cmp.w	r9, #0
 800610e:	dc33      	bgt.n	8006178 <_printf_float+0x3b8>
 8006110:	f04f 0800 	mov.w	r8, #0
 8006114:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006118:	f104 0a1a 	add.w	sl, r4, #26
 800611c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800611e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	eba3 0309 	sub.w	r3, r3, r9
 8006126:	4598      	cmp	r8, r3
 8006128:	f6bf af74 	bge.w	8006014 <_printf_float+0x254>
 800612c:	2301      	movs	r3, #1
 800612e:	4652      	mov	r2, sl
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f aea3 	beq.w	8005e82 <_printf_float+0xc2>
 800613c:	f108 0801 	add.w	r8, r8, #1
 8006140:	e7ec      	b.n	800611c <_printf_float+0x35c>
 8006142:	4613      	mov	r3, r2
 8006144:	4631      	mov	r1, r6
 8006146:	4642      	mov	r2, r8
 8006148:	4628      	mov	r0, r5
 800614a:	47b8      	blx	r7
 800614c:	3001      	adds	r0, #1
 800614e:	d1bf      	bne.n	80060d0 <_printf_float+0x310>
 8006150:	e697      	b.n	8005e82 <_printf_float+0xc2>
 8006152:	2301      	movs	r3, #1
 8006154:	9a06      	ldr	r2, [sp, #24]
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f ae90 	beq.w	8005e82 <_printf_float+0xc2>
 8006162:	f10b 0b01 	add.w	fp, fp, #1
 8006166:	e7ba      	b.n	80060de <_printf_float+0x31e>
 8006168:	9b05      	ldr	r3, [sp, #20]
 800616a:	9a04      	ldr	r2, [sp, #16]
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	d1c0      	bne.n	80060f8 <_printf_float+0x338>
 8006176:	e684      	b.n	8005e82 <_printf_float+0xc2>
 8006178:	464b      	mov	r3, r9
 800617a:	eb08 020a 	add.w	r2, r8, sl
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	d1c3      	bne.n	8006110 <_printf_float+0x350>
 8006188:	e67b      	b.n	8005e82 <_printf_float+0xc2>
 800618a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800618c:	2a01      	cmp	r2, #1
 800618e:	dc01      	bgt.n	8006194 <_printf_float+0x3d4>
 8006190:	07db      	lsls	r3, r3, #31
 8006192:	d537      	bpl.n	8006204 <_printf_float+0x444>
 8006194:	2301      	movs	r3, #1
 8006196:	4642      	mov	r2, r8
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f ae6f 	beq.w	8005e82 <_printf_float+0xc2>
 80061a4:	9b05      	ldr	r3, [sp, #20]
 80061a6:	9a04      	ldr	r2, [sp, #16]
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f ae67 	beq.w	8005e82 <_printf_float+0xc2>
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061bc:	f7fa fc80 	bl	8000ac0 <__aeabi_dcmpeq>
 80061c0:	b158      	cbz	r0, 80061da <_printf_float+0x41a>
 80061c2:	f04f 0800 	mov.w	r8, #0
 80061c6:	f104 0a1a 	add.w	sl, r4, #26
 80061ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061cc:	3b01      	subs	r3, #1
 80061ce:	4598      	cmp	r8, r3
 80061d0:	db0d      	blt.n	80061ee <_printf_float+0x42e>
 80061d2:	464b      	mov	r3, r9
 80061d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061d8:	e6eb      	b.n	8005fb2 <_printf_float+0x1f2>
 80061da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061dc:	f108 0201 	add.w	r2, r8, #1
 80061e0:	3b01      	subs	r3, #1
 80061e2:	4631      	mov	r1, r6
 80061e4:	4628      	mov	r0, r5
 80061e6:	47b8      	blx	r7
 80061e8:	3001      	adds	r0, #1
 80061ea:	d1f2      	bne.n	80061d2 <_printf_float+0x412>
 80061ec:	e649      	b.n	8005e82 <_printf_float+0xc2>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4652      	mov	r2, sl
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae42 	beq.w	8005e82 <_printf_float+0xc2>
 80061fe:	f108 0801 	add.w	r8, r8, #1
 8006202:	e7e2      	b.n	80061ca <_printf_float+0x40a>
 8006204:	2301      	movs	r3, #1
 8006206:	4642      	mov	r2, r8
 8006208:	e7eb      	b.n	80061e2 <_printf_float+0x422>
 800620a:	2301      	movs	r3, #1
 800620c:	464a      	mov	r2, r9
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae34 	beq.w	8005e82 <_printf_float+0xc2>
 800621a:	f108 0801 	add.w	r8, r8, #1
 800621e:	e700      	b.n	8006022 <_printf_float+0x262>
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	f7fa fc7c 	bl	8000b24 <__aeabi_dcmpun>
 800622c:	2800      	cmp	r0, #0
 800622e:	f43f ae2d 	beq.w	8005e8c <_printf_float+0xcc>
 8006232:	4b01      	ldr	r3, [pc, #4]	; (8006238 <_printf_float+0x478>)
 8006234:	4a01      	ldr	r2, [pc, #4]	; (800623c <_printf_float+0x47c>)
 8006236:	e60e      	b.n	8005e56 <_printf_float+0x96>
 8006238:	080092e0 	.word	0x080092e0
 800623c:	080092e4 	.word	0x080092e4

08006240 <_printf_common>:
 8006240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	4691      	mov	r9, r2
 8006246:	461f      	mov	r7, r3
 8006248:	688a      	ldr	r2, [r1, #8]
 800624a:	690b      	ldr	r3, [r1, #16]
 800624c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006250:	4293      	cmp	r3, r2
 8006252:	bfb8      	it	lt
 8006254:	4613      	movlt	r3, r2
 8006256:	f8c9 3000 	str.w	r3, [r9]
 800625a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800625e:	4606      	mov	r6, r0
 8006260:	460c      	mov	r4, r1
 8006262:	b112      	cbz	r2, 800626a <_printf_common+0x2a>
 8006264:	3301      	adds	r3, #1
 8006266:	f8c9 3000 	str.w	r3, [r9]
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	0699      	lsls	r1, r3, #26
 800626e:	bf42      	ittt	mi
 8006270:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006274:	3302      	addmi	r3, #2
 8006276:	f8c9 3000 	strmi.w	r3, [r9]
 800627a:	6825      	ldr	r5, [r4, #0]
 800627c:	f015 0506 	ands.w	r5, r5, #6
 8006280:	d107      	bne.n	8006292 <_printf_common+0x52>
 8006282:	f104 0a19 	add.w	sl, r4, #25
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	f8d9 2000 	ldr.w	r2, [r9]
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	429d      	cmp	r5, r3
 8006290:	db29      	blt.n	80062e6 <_printf_common+0xa6>
 8006292:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	3300      	adds	r3, #0
 800629a:	bf18      	it	ne
 800629c:	2301      	movne	r3, #1
 800629e:	0692      	lsls	r2, r2, #26
 80062a0:	d42e      	bmi.n	8006300 <_printf_common+0xc0>
 80062a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062a6:	4639      	mov	r1, r7
 80062a8:	4630      	mov	r0, r6
 80062aa:	47c0      	blx	r8
 80062ac:	3001      	adds	r0, #1
 80062ae:	d021      	beq.n	80062f4 <_printf_common+0xb4>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	68e5      	ldr	r5, [r4, #12]
 80062b4:	f8d9 2000 	ldr.w	r2, [r9]
 80062b8:	f003 0306 	and.w	r3, r3, #6
 80062bc:	2b04      	cmp	r3, #4
 80062be:	bf08      	it	eq
 80062c0:	1aad      	subeq	r5, r5, r2
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	6922      	ldr	r2, [r4, #16]
 80062c6:	bf0c      	ite	eq
 80062c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062cc:	2500      	movne	r5, #0
 80062ce:	4293      	cmp	r3, r2
 80062d0:	bfc4      	itt	gt
 80062d2:	1a9b      	subgt	r3, r3, r2
 80062d4:	18ed      	addgt	r5, r5, r3
 80062d6:	f04f 0900 	mov.w	r9, #0
 80062da:	341a      	adds	r4, #26
 80062dc:	454d      	cmp	r5, r9
 80062de:	d11b      	bne.n	8006318 <_printf_common+0xd8>
 80062e0:	2000      	movs	r0, #0
 80062e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e6:	2301      	movs	r3, #1
 80062e8:	4652      	mov	r2, sl
 80062ea:	4639      	mov	r1, r7
 80062ec:	4630      	mov	r0, r6
 80062ee:	47c0      	blx	r8
 80062f0:	3001      	adds	r0, #1
 80062f2:	d103      	bne.n	80062fc <_printf_common+0xbc>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	3501      	adds	r5, #1
 80062fe:	e7c2      	b.n	8006286 <_printf_common+0x46>
 8006300:	18e1      	adds	r1, r4, r3
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	2030      	movs	r0, #48	; 0x30
 8006306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800630a:	4422      	add	r2, r4
 800630c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006314:	3302      	adds	r3, #2
 8006316:	e7c4      	b.n	80062a2 <_printf_common+0x62>
 8006318:	2301      	movs	r3, #1
 800631a:	4622      	mov	r2, r4
 800631c:	4639      	mov	r1, r7
 800631e:	4630      	mov	r0, r6
 8006320:	47c0      	blx	r8
 8006322:	3001      	adds	r0, #1
 8006324:	d0e6      	beq.n	80062f4 <_printf_common+0xb4>
 8006326:	f109 0901 	add.w	r9, r9, #1
 800632a:	e7d7      	b.n	80062dc <_printf_common+0x9c>

0800632c <_printf_i>:
 800632c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006330:	4617      	mov	r7, r2
 8006332:	7e0a      	ldrb	r2, [r1, #24]
 8006334:	b085      	sub	sp, #20
 8006336:	2a6e      	cmp	r2, #110	; 0x6e
 8006338:	4698      	mov	r8, r3
 800633a:	4606      	mov	r6, r0
 800633c:	460c      	mov	r4, r1
 800633e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006340:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006344:	f000 80bc 	beq.w	80064c0 <_printf_i+0x194>
 8006348:	d81a      	bhi.n	8006380 <_printf_i+0x54>
 800634a:	2a63      	cmp	r2, #99	; 0x63
 800634c:	d02e      	beq.n	80063ac <_printf_i+0x80>
 800634e:	d80a      	bhi.n	8006366 <_printf_i+0x3a>
 8006350:	2a00      	cmp	r2, #0
 8006352:	f000 80c8 	beq.w	80064e6 <_printf_i+0x1ba>
 8006356:	2a58      	cmp	r2, #88	; 0x58
 8006358:	f000 808a 	beq.w	8006470 <_printf_i+0x144>
 800635c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006360:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006364:	e02a      	b.n	80063bc <_printf_i+0x90>
 8006366:	2a64      	cmp	r2, #100	; 0x64
 8006368:	d001      	beq.n	800636e <_printf_i+0x42>
 800636a:	2a69      	cmp	r2, #105	; 0x69
 800636c:	d1f6      	bne.n	800635c <_printf_i+0x30>
 800636e:	6821      	ldr	r1, [r4, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006376:	d023      	beq.n	80063c0 <_printf_i+0x94>
 8006378:	1d11      	adds	r1, r2, #4
 800637a:	6019      	str	r1, [r3, #0]
 800637c:	6813      	ldr	r3, [r2, #0]
 800637e:	e027      	b.n	80063d0 <_printf_i+0xa4>
 8006380:	2a73      	cmp	r2, #115	; 0x73
 8006382:	f000 80b4 	beq.w	80064ee <_printf_i+0x1c2>
 8006386:	d808      	bhi.n	800639a <_printf_i+0x6e>
 8006388:	2a6f      	cmp	r2, #111	; 0x6f
 800638a:	d02a      	beq.n	80063e2 <_printf_i+0xb6>
 800638c:	2a70      	cmp	r2, #112	; 0x70
 800638e:	d1e5      	bne.n	800635c <_printf_i+0x30>
 8006390:	680a      	ldr	r2, [r1, #0]
 8006392:	f042 0220 	orr.w	r2, r2, #32
 8006396:	600a      	str	r2, [r1, #0]
 8006398:	e003      	b.n	80063a2 <_printf_i+0x76>
 800639a:	2a75      	cmp	r2, #117	; 0x75
 800639c:	d021      	beq.n	80063e2 <_printf_i+0xb6>
 800639e:	2a78      	cmp	r2, #120	; 0x78
 80063a0:	d1dc      	bne.n	800635c <_printf_i+0x30>
 80063a2:	2278      	movs	r2, #120	; 0x78
 80063a4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80063a8:	496e      	ldr	r1, [pc, #440]	; (8006564 <_printf_i+0x238>)
 80063aa:	e064      	b.n	8006476 <_printf_i+0x14a>
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80063b2:	1d11      	adds	r1, r2, #4
 80063b4:	6019      	str	r1, [r3, #0]
 80063b6:	6813      	ldr	r3, [r2, #0]
 80063b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063bc:	2301      	movs	r3, #1
 80063be:	e0a3      	b.n	8006508 <_printf_i+0x1dc>
 80063c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80063c4:	f102 0104 	add.w	r1, r2, #4
 80063c8:	6019      	str	r1, [r3, #0]
 80063ca:	d0d7      	beq.n	800637c <_printf_i+0x50>
 80063cc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da03      	bge.n	80063dc <_printf_i+0xb0>
 80063d4:	222d      	movs	r2, #45	; 0x2d
 80063d6:	425b      	negs	r3, r3
 80063d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063dc:	4962      	ldr	r1, [pc, #392]	; (8006568 <_printf_i+0x23c>)
 80063de:	220a      	movs	r2, #10
 80063e0:	e017      	b.n	8006412 <_printf_i+0xe6>
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	6819      	ldr	r1, [r3, #0]
 80063e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80063ea:	d003      	beq.n	80063f4 <_printf_i+0xc8>
 80063ec:	1d08      	adds	r0, r1, #4
 80063ee:	6018      	str	r0, [r3, #0]
 80063f0:	680b      	ldr	r3, [r1, #0]
 80063f2:	e006      	b.n	8006402 <_printf_i+0xd6>
 80063f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063f8:	f101 0004 	add.w	r0, r1, #4
 80063fc:	6018      	str	r0, [r3, #0]
 80063fe:	d0f7      	beq.n	80063f0 <_printf_i+0xc4>
 8006400:	880b      	ldrh	r3, [r1, #0]
 8006402:	4959      	ldr	r1, [pc, #356]	; (8006568 <_printf_i+0x23c>)
 8006404:	2a6f      	cmp	r2, #111	; 0x6f
 8006406:	bf14      	ite	ne
 8006408:	220a      	movne	r2, #10
 800640a:	2208      	moveq	r2, #8
 800640c:	2000      	movs	r0, #0
 800640e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006412:	6865      	ldr	r5, [r4, #4]
 8006414:	60a5      	str	r5, [r4, #8]
 8006416:	2d00      	cmp	r5, #0
 8006418:	f2c0 809c 	blt.w	8006554 <_printf_i+0x228>
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	f020 0004 	bic.w	r0, r0, #4
 8006422:	6020      	str	r0, [r4, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d13f      	bne.n	80064a8 <_printf_i+0x17c>
 8006428:	2d00      	cmp	r5, #0
 800642a:	f040 8095 	bne.w	8006558 <_printf_i+0x22c>
 800642e:	4675      	mov	r5, lr
 8006430:	2a08      	cmp	r2, #8
 8006432:	d10b      	bne.n	800644c <_printf_i+0x120>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	07da      	lsls	r2, r3, #31
 8006438:	d508      	bpl.n	800644c <_printf_i+0x120>
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	6862      	ldr	r2, [r4, #4]
 800643e:	429a      	cmp	r2, r3
 8006440:	bfde      	ittt	le
 8006442:	2330      	movle	r3, #48	; 0x30
 8006444:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006448:	f105 35ff 	addle.w	r5, r5, #4294967295
 800644c:	ebae 0305 	sub.w	r3, lr, r5
 8006450:	6123      	str	r3, [r4, #16]
 8006452:	f8cd 8000 	str.w	r8, [sp]
 8006456:	463b      	mov	r3, r7
 8006458:	aa03      	add	r2, sp, #12
 800645a:	4621      	mov	r1, r4
 800645c:	4630      	mov	r0, r6
 800645e:	f7ff feef 	bl	8006240 <_printf_common>
 8006462:	3001      	adds	r0, #1
 8006464:	d155      	bne.n	8006512 <_printf_i+0x1e6>
 8006466:	f04f 30ff 	mov.w	r0, #4294967295
 800646a:	b005      	add	sp, #20
 800646c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006470:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006474:	493c      	ldr	r1, [pc, #240]	; (8006568 <_printf_i+0x23c>)
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800647e:	f100 0504 	add.w	r5, r0, #4
 8006482:	601d      	str	r5, [r3, #0]
 8006484:	d001      	beq.n	800648a <_printf_i+0x15e>
 8006486:	6803      	ldr	r3, [r0, #0]
 8006488:	e002      	b.n	8006490 <_printf_i+0x164>
 800648a:	0655      	lsls	r5, r2, #25
 800648c:	d5fb      	bpl.n	8006486 <_printf_i+0x15a>
 800648e:	8803      	ldrh	r3, [r0, #0]
 8006490:	07d0      	lsls	r0, r2, #31
 8006492:	bf44      	itt	mi
 8006494:	f042 0220 	orrmi.w	r2, r2, #32
 8006498:	6022      	strmi	r2, [r4, #0]
 800649a:	b91b      	cbnz	r3, 80064a4 <_printf_i+0x178>
 800649c:	6822      	ldr	r2, [r4, #0]
 800649e:	f022 0220 	bic.w	r2, r2, #32
 80064a2:	6022      	str	r2, [r4, #0]
 80064a4:	2210      	movs	r2, #16
 80064a6:	e7b1      	b.n	800640c <_printf_i+0xe0>
 80064a8:	4675      	mov	r5, lr
 80064aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80064ae:	fb02 3310 	mls	r3, r2, r0, r3
 80064b2:	5ccb      	ldrb	r3, [r1, r3]
 80064b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064b8:	4603      	mov	r3, r0
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1f5      	bne.n	80064aa <_printf_i+0x17e>
 80064be:	e7b7      	b.n	8006430 <_printf_i+0x104>
 80064c0:	6808      	ldr	r0, [r1, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	6949      	ldr	r1, [r1, #20]
 80064c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80064ca:	d004      	beq.n	80064d6 <_printf_i+0x1aa>
 80064cc:	1d10      	adds	r0, r2, #4
 80064ce:	6018      	str	r0, [r3, #0]
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	6019      	str	r1, [r3, #0]
 80064d4:	e007      	b.n	80064e6 <_printf_i+0x1ba>
 80064d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064da:	f102 0004 	add.w	r0, r2, #4
 80064de:	6018      	str	r0, [r3, #0]
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	d0f6      	beq.n	80064d2 <_printf_i+0x1a6>
 80064e4:	8019      	strh	r1, [r3, #0]
 80064e6:	2300      	movs	r3, #0
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	4675      	mov	r5, lr
 80064ec:	e7b1      	b.n	8006452 <_printf_i+0x126>
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	1d11      	adds	r1, r2, #4
 80064f2:	6019      	str	r1, [r3, #0]
 80064f4:	6815      	ldr	r5, [r2, #0]
 80064f6:	6862      	ldr	r2, [r4, #4]
 80064f8:	2100      	movs	r1, #0
 80064fa:	4628      	mov	r0, r5
 80064fc:	f7f9 fe70 	bl	80001e0 <memchr>
 8006500:	b108      	cbz	r0, 8006506 <_printf_i+0x1da>
 8006502:	1b40      	subs	r0, r0, r5
 8006504:	6060      	str	r0, [r4, #4]
 8006506:	6863      	ldr	r3, [r4, #4]
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	2300      	movs	r3, #0
 800650c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006510:	e79f      	b.n	8006452 <_printf_i+0x126>
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	462a      	mov	r2, r5
 8006516:	4639      	mov	r1, r7
 8006518:	4630      	mov	r0, r6
 800651a:	47c0      	blx	r8
 800651c:	3001      	adds	r0, #1
 800651e:	d0a2      	beq.n	8006466 <_printf_i+0x13a>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	079b      	lsls	r3, r3, #30
 8006524:	d507      	bpl.n	8006536 <_printf_i+0x20a>
 8006526:	2500      	movs	r5, #0
 8006528:	f104 0919 	add.w	r9, r4, #25
 800652c:	68e3      	ldr	r3, [r4, #12]
 800652e:	9a03      	ldr	r2, [sp, #12]
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	429d      	cmp	r5, r3
 8006534:	db05      	blt.n	8006542 <_printf_i+0x216>
 8006536:	68e0      	ldr	r0, [r4, #12]
 8006538:	9b03      	ldr	r3, [sp, #12]
 800653a:	4298      	cmp	r0, r3
 800653c:	bfb8      	it	lt
 800653e:	4618      	movlt	r0, r3
 8006540:	e793      	b.n	800646a <_printf_i+0x13e>
 8006542:	2301      	movs	r3, #1
 8006544:	464a      	mov	r2, r9
 8006546:	4639      	mov	r1, r7
 8006548:	4630      	mov	r0, r6
 800654a:	47c0      	blx	r8
 800654c:	3001      	adds	r0, #1
 800654e:	d08a      	beq.n	8006466 <_printf_i+0x13a>
 8006550:	3501      	adds	r5, #1
 8006552:	e7eb      	b.n	800652c <_printf_i+0x200>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1a7      	bne.n	80064a8 <_printf_i+0x17c>
 8006558:	780b      	ldrb	r3, [r1, #0]
 800655a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800655e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006562:	e765      	b.n	8006430 <_printf_i+0x104>
 8006564:	080092fb 	.word	0x080092fb
 8006568:	080092ea 	.word	0x080092ea

0800656c <_puts_r>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	460e      	mov	r6, r1
 8006570:	4605      	mov	r5, r0
 8006572:	b118      	cbz	r0, 800657c <_puts_r+0x10>
 8006574:	6983      	ldr	r3, [r0, #24]
 8006576:	b90b      	cbnz	r3, 800657c <_puts_r+0x10>
 8006578:	f001 f8a6 	bl	80076c8 <__sinit>
 800657c:	69ab      	ldr	r3, [r5, #24]
 800657e:	68ac      	ldr	r4, [r5, #8]
 8006580:	b913      	cbnz	r3, 8006588 <_puts_r+0x1c>
 8006582:	4628      	mov	r0, r5
 8006584:	f001 f8a0 	bl	80076c8 <__sinit>
 8006588:	4b23      	ldr	r3, [pc, #140]	; (8006618 <_puts_r+0xac>)
 800658a:	429c      	cmp	r4, r3
 800658c:	d117      	bne.n	80065be <_puts_r+0x52>
 800658e:	686c      	ldr	r4, [r5, #4]
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	071b      	lsls	r3, r3, #28
 8006594:	d51d      	bpl.n	80065d2 <_puts_r+0x66>
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	b1db      	cbz	r3, 80065d2 <_puts_r+0x66>
 800659a:	3e01      	subs	r6, #1
 800659c:	68a3      	ldr	r3, [r4, #8]
 800659e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065a2:	3b01      	subs	r3, #1
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	b9e9      	cbnz	r1, 80065e4 <_puts_r+0x78>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da2e      	bge.n	800660a <_puts_r+0x9e>
 80065ac:	4622      	mov	r2, r4
 80065ae:	210a      	movs	r1, #10
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f87b 	bl	80066ac <__swbuf_r>
 80065b6:	3001      	adds	r0, #1
 80065b8:	d011      	beq.n	80065de <_puts_r+0x72>
 80065ba:	200a      	movs	r0, #10
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <_puts_r+0xb0>)
 80065c0:	429c      	cmp	r4, r3
 80065c2:	d101      	bne.n	80065c8 <_puts_r+0x5c>
 80065c4:	68ac      	ldr	r4, [r5, #8]
 80065c6:	e7e3      	b.n	8006590 <_puts_r+0x24>
 80065c8:	4b15      	ldr	r3, [pc, #84]	; (8006620 <_puts_r+0xb4>)
 80065ca:	429c      	cmp	r4, r3
 80065cc:	bf08      	it	eq
 80065ce:	68ec      	ldreq	r4, [r5, #12]
 80065d0:	e7de      	b.n	8006590 <_puts_r+0x24>
 80065d2:	4621      	mov	r1, r4
 80065d4:	4628      	mov	r0, r5
 80065d6:	f000 f8bb 	bl	8006750 <__swsetup_r>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d0dd      	beq.n	800659a <_puts_r+0x2e>
 80065de:	f04f 30ff 	mov.w	r0, #4294967295
 80065e2:	bd70      	pop	{r4, r5, r6, pc}
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da04      	bge.n	80065f2 <_puts_r+0x86>
 80065e8:	69a2      	ldr	r2, [r4, #24]
 80065ea:	4293      	cmp	r3, r2
 80065ec:	db06      	blt.n	80065fc <_puts_r+0x90>
 80065ee:	290a      	cmp	r1, #10
 80065f0:	d004      	beq.n	80065fc <_puts_r+0x90>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	6022      	str	r2, [r4, #0]
 80065f8:	7019      	strb	r1, [r3, #0]
 80065fa:	e7cf      	b.n	800659c <_puts_r+0x30>
 80065fc:	4622      	mov	r2, r4
 80065fe:	4628      	mov	r0, r5
 8006600:	f000 f854 	bl	80066ac <__swbuf_r>
 8006604:	3001      	adds	r0, #1
 8006606:	d1c9      	bne.n	800659c <_puts_r+0x30>
 8006608:	e7e9      	b.n	80065de <_puts_r+0x72>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	200a      	movs	r0, #10
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	6022      	str	r2, [r4, #0]
 8006612:	7018      	strb	r0, [r3, #0]
 8006614:	bd70      	pop	{r4, r5, r6, pc}
 8006616:	bf00      	nop
 8006618:	0800933c 	.word	0x0800933c
 800661c:	0800935c 	.word	0x0800935c
 8006620:	0800931c 	.word	0x0800931c

08006624 <puts>:
 8006624:	4b02      	ldr	r3, [pc, #8]	; (8006630 <puts+0xc>)
 8006626:	4601      	mov	r1, r0
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	f7ff bf9f 	b.w	800656c <_puts_r>
 800662e:	bf00      	nop
 8006630:	2000000c 	.word	0x2000000c

08006634 <_sbrk_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4c06      	ldr	r4, [pc, #24]	; (8006650 <_sbrk_r+0x1c>)
 8006638:	2300      	movs	r3, #0
 800663a:	4605      	mov	r5, r0
 800663c:	4608      	mov	r0, r1
 800663e:	6023      	str	r3, [r4, #0]
 8006640:	f7fe fe1e 	bl	8005280 <_sbrk>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_sbrk_r+0x1a>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	b103      	cbz	r3, 800664e <_sbrk_r+0x1a>
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20002bb0 	.word	0x20002bb0

08006654 <siprintf>:
 8006654:	b40e      	push	{r1, r2, r3}
 8006656:	b500      	push	{lr}
 8006658:	b09c      	sub	sp, #112	; 0x70
 800665a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800665e:	ab1d      	add	r3, sp, #116	; 0x74
 8006660:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006664:	9002      	str	r0, [sp, #8]
 8006666:	9006      	str	r0, [sp, #24]
 8006668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800666c:	480a      	ldr	r0, [pc, #40]	; (8006698 <siprintf+0x44>)
 800666e:	9104      	str	r1, [sp, #16]
 8006670:	9107      	str	r1, [sp, #28]
 8006672:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006676:	f853 2b04 	ldr.w	r2, [r3], #4
 800667a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800667e:	6800      	ldr	r0, [r0, #0]
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	a902      	add	r1, sp, #8
 8006684:	f001 fc64 	bl	8007f50 <_svfiprintf_r>
 8006688:	9b02      	ldr	r3, [sp, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	b01c      	add	sp, #112	; 0x70
 8006690:	f85d eb04 	ldr.w	lr, [sp], #4
 8006694:	b003      	add	sp, #12
 8006696:	4770      	bx	lr
 8006698:	2000000c 	.word	0x2000000c

0800669c <strcpy>:
 800669c:	4603      	mov	r3, r0
 800669e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066a2:	f803 2b01 	strb.w	r2, [r3], #1
 80066a6:	2a00      	cmp	r2, #0
 80066a8:	d1f9      	bne.n	800669e <strcpy+0x2>
 80066aa:	4770      	bx	lr

080066ac <__swbuf_r>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	460e      	mov	r6, r1
 80066b0:	4614      	mov	r4, r2
 80066b2:	4605      	mov	r5, r0
 80066b4:	b118      	cbz	r0, 80066be <__swbuf_r+0x12>
 80066b6:	6983      	ldr	r3, [r0, #24]
 80066b8:	b90b      	cbnz	r3, 80066be <__swbuf_r+0x12>
 80066ba:	f001 f805 	bl	80076c8 <__sinit>
 80066be:	4b21      	ldr	r3, [pc, #132]	; (8006744 <__swbuf_r+0x98>)
 80066c0:	429c      	cmp	r4, r3
 80066c2:	d12a      	bne.n	800671a <__swbuf_r+0x6e>
 80066c4:	686c      	ldr	r4, [r5, #4]
 80066c6:	69a3      	ldr	r3, [r4, #24]
 80066c8:	60a3      	str	r3, [r4, #8]
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	071a      	lsls	r2, r3, #28
 80066ce:	d52e      	bpl.n	800672e <__swbuf_r+0x82>
 80066d0:	6923      	ldr	r3, [r4, #16]
 80066d2:	b363      	cbz	r3, 800672e <__swbuf_r+0x82>
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	6820      	ldr	r0, [r4, #0]
 80066d8:	1ac0      	subs	r0, r0, r3
 80066da:	6963      	ldr	r3, [r4, #20]
 80066dc:	b2f6      	uxtb	r6, r6
 80066de:	4298      	cmp	r0, r3
 80066e0:	4637      	mov	r7, r6
 80066e2:	db04      	blt.n	80066ee <__swbuf_r+0x42>
 80066e4:	4621      	mov	r1, r4
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 ff84 	bl	80075f4 <_fflush_r>
 80066ec:	bb28      	cbnz	r0, 800673a <__swbuf_r+0x8e>
 80066ee:	68a3      	ldr	r3, [r4, #8]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	60a3      	str	r3, [r4, #8]
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	701e      	strb	r6, [r3, #0]
 80066fc:	6963      	ldr	r3, [r4, #20]
 80066fe:	3001      	adds	r0, #1
 8006700:	4298      	cmp	r0, r3
 8006702:	d004      	beq.n	800670e <__swbuf_r+0x62>
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	07db      	lsls	r3, r3, #31
 8006708:	d519      	bpl.n	800673e <__swbuf_r+0x92>
 800670a:	2e0a      	cmp	r6, #10
 800670c:	d117      	bne.n	800673e <__swbuf_r+0x92>
 800670e:	4621      	mov	r1, r4
 8006710:	4628      	mov	r0, r5
 8006712:	f000 ff6f 	bl	80075f4 <_fflush_r>
 8006716:	b190      	cbz	r0, 800673e <__swbuf_r+0x92>
 8006718:	e00f      	b.n	800673a <__swbuf_r+0x8e>
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <__swbuf_r+0x9c>)
 800671c:	429c      	cmp	r4, r3
 800671e:	d101      	bne.n	8006724 <__swbuf_r+0x78>
 8006720:	68ac      	ldr	r4, [r5, #8]
 8006722:	e7d0      	b.n	80066c6 <__swbuf_r+0x1a>
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <__swbuf_r+0xa0>)
 8006726:	429c      	cmp	r4, r3
 8006728:	bf08      	it	eq
 800672a:	68ec      	ldreq	r4, [r5, #12]
 800672c:	e7cb      	b.n	80066c6 <__swbuf_r+0x1a>
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f80d 	bl	8006750 <__swsetup_r>
 8006736:	2800      	cmp	r0, #0
 8006738:	d0cc      	beq.n	80066d4 <__swbuf_r+0x28>
 800673a:	f04f 37ff 	mov.w	r7, #4294967295
 800673e:	4638      	mov	r0, r7
 8006740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006742:	bf00      	nop
 8006744:	0800933c 	.word	0x0800933c
 8006748:	0800935c 	.word	0x0800935c
 800674c:	0800931c 	.word	0x0800931c

08006750 <__swsetup_r>:
 8006750:	4b32      	ldr	r3, [pc, #200]	; (800681c <__swsetup_r+0xcc>)
 8006752:	b570      	push	{r4, r5, r6, lr}
 8006754:	681d      	ldr	r5, [r3, #0]
 8006756:	4606      	mov	r6, r0
 8006758:	460c      	mov	r4, r1
 800675a:	b125      	cbz	r5, 8006766 <__swsetup_r+0x16>
 800675c:	69ab      	ldr	r3, [r5, #24]
 800675e:	b913      	cbnz	r3, 8006766 <__swsetup_r+0x16>
 8006760:	4628      	mov	r0, r5
 8006762:	f000 ffb1 	bl	80076c8 <__sinit>
 8006766:	4b2e      	ldr	r3, [pc, #184]	; (8006820 <__swsetup_r+0xd0>)
 8006768:	429c      	cmp	r4, r3
 800676a:	d10f      	bne.n	800678c <__swsetup_r+0x3c>
 800676c:	686c      	ldr	r4, [r5, #4]
 800676e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006772:	b29a      	uxth	r2, r3
 8006774:	0715      	lsls	r5, r2, #28
 8006776:	d42c      	bmi.n	80067d2 <__swsetup_r+0x82>
 8006778:	06d0      	lsls	r0, r2, #27
 800677a:	d411      	bmi.n	80067a0 <__swsetup_r+0x50>
 800677c:	2209      	movs	r2, #9
 800677e:	6032      	str	r2, [r6, #0]
 8006780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	f04f 30ff 	mov.w	r0, #4294967295
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	4b25      	ldr	r3, [pc, #148]	; (8006824 <__swsetup_r+0xd4>)
 800678e:	429c      	cmp	r4, r3
 8006790:	d101      	bne.n	8006796 <__swsetup_r+0x46>
 8006792:	68ac      	ldr	r4, [r5, #8]
 8006794:	e7eb      	b.n	800676e <__swsetup_r+0x1e>
 8006796:	4b24      	ldr	r3, [pc, #144]	; (8006828 <__swsetup_r+0xd8>)
 8006798:	429c      	cmp	r4, r3
 800679a:	bf08      	it	eq
 800679c:	68ec      	ldreq	r4, [r5, #12]
 800679e:	e7e6      	b.n	800676e <__swsetup_r+0x1e>
 80067a0:	0751      	lsls	r1, r2, #29
 80067a2:	d512      	bpl.n	80067ca <__swsetup_r+0x7a>
 80067a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067a6:	b141      	cbz	r1, 80067ba <__swsetup_r+0x6a>
 80067a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067ac:	4299      	cmp	r1, r3
 80067ae:	d002      	beq.n	80067b6 <__swsetup_r+0x66>
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7ff f9c3 	bl	8005b3c <_free_r>
 80067b6:	2300      	movs	r3, #0
 80067b8:	6363      	str	r3, [r4, #52]	; 0x34
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067c0:	81a3      	strh	r3, [r4, #12]
 80067c2:	2300      	movs	r3, #0
 80067c4:	6063      	str	r3, [r4, #4]
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f043 0308 	orr.w	r3, r3, #8
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	b94b      	cbnz	r3, 80067ea <__swsetup_r+0x9a>
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e0:	d003      	beq.n	80067ea <__swsetup_r+0x9a>
 80067e2:	4621      	mov	r1, r4
 80067e4:	4630      	mov	r0, r6
 80067e6:	f001 f82b 	bl	8007840 <__smakebuf_r>
 80067ea:	89a2      	ldrh	r2, [r4, #12]
 80067ec:	f012 0301 	ands.w	r3, r2, #1
 80067f0:	d00c      	beq.n	800680c <__swsetup_r+0xbc>
 80067f2:	2300      	movs	r3, #0
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	6963      	ldr	r3, [r4, #20]
 80067f8:	425b      	negs	r3, r3
 80067fa:	61a3      	str	r3, [r4, #24]
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	b953      	cbnz	r3, 8006816 <__swsetup_r+0xc6>
 8006800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006804:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006808:	d1ba      	bne.n	8006780 <__swsetup_r+0x30>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	0792      	lsls	r2, r2, #30
 800680e:	bf58      	it	pl
 8006810:	6963      	ldrpl	r3, [r4, #20]
 8006812:	60a3      	str	r3, [r4, #8]
 8006814:	e7f2      	b.n	80067fc <__swsetup_r+0xac>
 8006816:	2000      	movs	r0, #0
 8006818:	e7f7      	b.n	800680a <__swsetup_r+0xba>
 800681a:	bf00      	nop
 800681c:	2000000c 	.word	0x2000000c
 8006820:	0800933c 	.word	0x0800933c
 8006824:	0800935c 	.word	0x0800935c
 8006828:	0800931c 	.word	0x0800931c

0800682c <quorem>:
 800682c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	6903      	ldr	r3, [r0, #16]
 8006832:	690c      	ldr	r4, [r1, #16]
 8006834:	429c      	cmp	r4, r3
 8006836:	4680      	mov	r8, r0
 8006838:	f300 8082 	bgt.w	8006940 <quorem+0x114>
 800683c:	3c01      	subs	r4, #1
 800683e:	f101 0714 	add.w	r7, r1, #20
 8006842:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006846:	f100 0614 	add.w	r6, r0, #20
 800684a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800684e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006852:	eb06 030e 	add.w	r3, r6, lr
 8006856:	3501      	adds	r5, #1
 8006858:	eb07 090e 	add.w	r9, r7, lr
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	fbb0 f5f5 	udiv	r5, r0, r5
 8006862:	b395      	cbz	r5, 80068ca <quorem+0x9e>
 8006864:	f04f 0a00 	mov.w	sl, #0
 8006868:	4638      	mov	r0, r7
 800686a:	46b4      	mov	ip, r6
 800686c:	46d3      	mov	fp, sl
 800686e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006872:	b293      	uxth	r3, r2
 8006874:	fb05 a303 	mla	r3, r5, r3, sl
 8006878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800687c:	b29b      	uxth	r3, r3
 800687e:	ebab 0303 	sub.w	r3, fp, r3
 8006882:	0c12      	lsrs	r2, r2, #16
 8006884:	f8bc b000 	ldrh.w	fp, [ip]
 8006888:	fb05 a202 	mla	r2, r5, r2, sl
 800688c:	fa13 f38b 	uxtah	r3, r3, fp
 8006890:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006894:	fa1f fb82 	uxth.w	fp, r2
 8006898:	f8dc 2000 	ldr.w	r2, [ip]
 800689c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80068a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068aa:	4581      	cmp	r9, r0
 80068ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80068b0:	f84c 3b04 	str.w	r3, [ip], #4
 80068b4:	d2db      	bcs.n	800686e <quorem+0x42>
 80068b6:	f856 300e 	ldr.w	r3, [r6, lr]
 80068ba:	b933      	cbnz	r3, 80068ca <quorem+0x9e>
 80068bc:	9b01      	ldr	r3, [sp, #4]
 80068be:	3b04      	subs	r3, #4
 80068c0:	429e      	cmp	r6, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	d330      	bcc.n	8006928 <quorem+0xfc>
 80068c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80068ca:	4640      	mov	r0, r8
 80068cc:	f001 fa0f 	bl	8007cee <__mcmp>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	db25      	blt.n	8006920 <quorem+0xf4>
 80068d4:	3501      	adds	r5, #1
 80068d6:	4630      	mov	r0, r6
 80068d8:	f04f 0e00 	mov.w	lr, #0
 80068dc:	f857 2b04 	ldr.w	r2, [r7], #4
 80068e0:	f8d0 c000 	ldr.w	ip, [r0]
 80068e4:	b293      	uxth	r3, r2
 80068e6:	ebae 0303 	sub.w	r3, lr, r3
 80068ea:	0c12      	lsrs	r2, r2, #16
 80068ec:	fa13 f38c 	uxtah	r3, r3, ip
 80068f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80068f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068fe:	45b9      	cmp	r9, r7
 8006900:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006904:	f840 3b04 	str.w	r3, [r0], #4
 8006908:	d2e8      	bcs.n	80068dc <quorem+0xb0>
 800690a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800690e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006912:	b92a      	cbnz	r2, 8006920 <quorem+0xf4>
 8006914:	3b04      	subs	r3, #4
 8006916:	429e      	cmp	r6, r3
 8006918:	461a      	mov	r2, r3
 800691a:	d30b      	bcc.n	8006934 <quorem+0x108>
 800691c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006920:	4628      	mov	r0, r5
 8006922:	b003      	add	sp, #12
 8006924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	3b04      	subs	r3, #4
 800692c:	2a00      	cmp	r2, #0
 800692e:	d1ca      	bne.n	80068c6 <quorem+0x9a>
 8006930:	3c01      	subs	r4, #1
 8006932:	e7c5      	b.n	80068c0 <quorem+0x94>
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	3b04      	subs	r3, #4
 8006938:	2a00      	cmp	r2, #0
 800693a:	d1ef      	bne.n	800691c <quorem+0xf0>
 800693c:	3c01      	subs	r4, #1
 800693e:	e7ea      	b.n	8006916 <quorem+0xea>
 8006940:	2000      	movs	r0, #0
 8006942:	e7ee      	b.n	8006922 <quorem+0xf6>
 8006944:	0000      	movs	r0, r0
	...

08006948 <_dtoa_r>:
 8006948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	ec57 6b10 	vmov	r6, r7, d0
 8006950:	b097      	sub	sp, #92	; 0x5c
 8006952:	e9cd 6700 	strd	r6, r7, [sp]
 8006956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006958:	9107      	str	r1, [sp, #28]
 800695a:	4604      	mov	r4, r0
 800695c:	920a      	str	r2, [sp, #40]	; 0x28
 800695e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006960:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006962:	b93e      	cbnz	r6, 8006974 <_dtoa_r+0x2c>
 8006964:	2010      	movs	r0, #16
 8006966:	f7ff f8d9 	bl	8005b1c <malloc>
 800696a:	6260      	str	r0, [r4, #36]	; 0x24
 800696c:	6046      	str	r6, [r0, #4]
 800696e:	6086      	str	r6, [r0, #8]
 8006970:	6006      	str	r6, [r0, #0]
 8006972:	60c6      	str	r6, [r0, #12]
 8006974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006976:	6819      	ldr	r1, [r3, #0]
 8006978:	b151      	cbz	r1, 8006990 <_dtoa_r+0x48>
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	604a      	str	r2, [r1, #4]
 800697e:	2301      	movs	r3, #1
 8006980:	4093      	lsls	r3, r2
 8006982:	608b      	str	r3, [r1, #8]
 8006984:	4620      	mov	r0, r4
 8006986:	f000 ffdc 	bl	8007942 <_Bfree>
 800698a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	bfbf      	itttt	lt
 8006996:	2301      	movlt	r3, #1
 8006998:	602b      	strlt	r3, [r5, #0]
 800699a:	9b01      	ldrlt	r3, [sp, #4]
 800699c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069a0:	bfb2      	itee	lt
 80069a2:	9301      	strlt	r3, [sp, #4]
 80069a4:	2300      	movge	r3, #0
 80069a6:	602b      	strge	r3, [r5, #0]
 80069a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80069ac:	4ba8      	ldr	r3, [pc, #672]	; (8006c50 <_dtoa_r+0x308>)
 80069ae:	ea33 0308 	bics.w	r3, r3, r8
 80069b2:	d11b      	bne.n	80069ec <_dtoa_r+0xa4>
 80069b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	9b00      	ldr	r3, [sp, #0]
 80069be:	b923      	cbnz	r3, 80069ca <_dtoa_r+0x82>
 80069c0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f000 8578 	beq.w	80074ba <_dtoa_r+0xb72>
 80069ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069cc:	b953      	cbnz	r3, 80069e4 <_dtoa_r+0x9c>
 80069ce:	4ba1      	ldr	r3, [pc, #644]	; (8006c54 <_dtoa_r+0x30c>)
 80069d0:	e021      	b.n	8006a16 <_dtoa_r+0xce>
 80069d2:	4ba1      	ldr	r3, [pc, #644]	; (8006c58 <_dtoa_r+0x310>)
 80069d4:	9302      	str	r3, [sp, #8]
 80069d6:	3308      	adds	r3, #8
 80069d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	9802      	ldr	r0, [sp, #8]
 80069de:	b017      	add	sp, #92	; 0x5c
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	4b9b      	ldr	r3, [pc, #620]	; (8006c54 <_dtoa_r+0x30c>)
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	3303      	adds	r3, #3
 80069ea:	e7f5      	b.n	80069d8 <_dtoa_r+0x90>
 80069ec:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2300      	movs	r3, #0
 80069f4:	4630      	mov	r0, r6
 80069f6:	4639      	mov	r1, r7
 80069f8:	f7fa f862 	bl	8000ac0 <__aeabi_dcmpeq>
 80069fc:	4681      	mov	r9, r0
 80069fe:	b160      	cbz	r0, 8006a1a <_dtoa_r+0xd2>
 8006a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a02:	2301      	movs	r3, #1
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8553 	beq.w	80074b4 <_dtoa_r+0xb6c>
 8006a0e:	4b93      	ldr	r3, [pc, #588]	; (8006c5c <_dtoa_r+0x314>)
 8006a10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	9302      	str	r3, [sp, #8]
 8006a18:	e7e0      	b.n	80069dc <_dtoa_r+0x94>
 8006a1a:	aa14      	add	r2, sp, #80	; 0x50
 8006a1c:	a915      	add	r1, sp, #84	; 0x54
 8006a1e:	ec47 6b10 	vmov	d0, r6, r7
 8006a22:	4620      	mov	r0, r4
 8006a24:	f001 f9db 	bl	8007dde <__d2b>
 8006a28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	d07e      	beq.n	8006b30 <_dtoa_r+0x1e8>
 8006a32:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006a40:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a44:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4b85      	ldr	r3, [pc, #532]	; (8006c60 <_dtoa_r+0x318>)
 8006a4c:	f7f9 fc1c 	bl	8000288 <__aeabi_dsub>
 8006a50:	a379      	add	r3, pc, #484	; (adr r3, 8006c38 <_dtoa_r+0x2f0>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fdcb 	bl	80005f0 <__aeabi_dmul>
 8006a5a:	a379      	add	r3, pc, #484	; (adr r3, 8006c40 <_dtoa_r+0x2f8>)
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f7f9 fc14 	bl	800028c <__adddf3>
 8006a64:	4606      	mov	r6, r0
 8006a66:	4628      	mov	r0, r5
 8006a68:	460f      	mov	r7, r1
 8006a6a:	f7f9 fd5b 	bl	8000524 <__aeabi_i2d>
 8006a6e:	a376      	add	r3, pc, #472	; (adr r3, 8006c48 <_dtoa_r+0x300>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fdbc 	bl	80005f0 <__aeabi_dmul>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7f9 fc04 	bl	800028c <__adddf3>
 8006a84:	4606      	mov	r6, r0
 8006a86:	460f      	mov	r7, r1
 8006a88:	f7fa f862 	bl	8000b50 <__aeabi_d2iz>
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4683      	mov	fp, r0
 8006a90:	2300      	movs	r3, #0
 8006a92:	4630      	mov	r0, r6
 8006a94:	4639      	mov	r1, r7
 8006a96:	f7fa f81d 	bl	8000ad4 <__aeabi_dcmplt>
 8006a9a:	b158      	cbz	r0, 8006ab4 <_dtoa_r+0x16c>
 8006a9c:	4658      	mov	r0, fp
 8006a9e:	f7f9 fd41 	bl	8000524 <__aeabi_i2d>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7fa f809 	bl	8000ac0 <__aeabi_dcmpeq>
 8006aae:	b908      	cbnz	r0, 8006ab4 <_dtoa_r+0x16c>
 8006ab0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ab4:	f1bb 0f16 	cmp.w	fp, #22
 8006ab8:	d859      	bhi.n	8006b6e <_dtoa_r+0x226>
 8006aba:	496a      	ldr	r1, [pc, #424]	; (8006c64 <_dtoa_r+0x31c>)
 8006abc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac8:	f7fa f822 	bl	8000b10 <__aeabi_dcmpgt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d050      	beq.n	8006b72 <_dtoa_r+0x22a>
 8006ad0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ada:	1b5d      	subs	r5, r3, r5
 8006adc:	1e6b      	subs	r3, r5, #1
 8006ade:	9306      	str	r3, [sp, #24]
 8006ae0:	bf45      	ittet	mi
 8006ae2:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ae6:	9305      	strmi	r3, [sp, #20]
 8006ae8:	2300      	movpl	r3, #0
 8006aea:	2300      	movmi	r3, #0
 8006aec:	bf4c      	ite	mi
 8006aee:	9306      	strmi	r3, [sp, #24]
 8006af0:	9305      	strpl	r3, [sp, #20]
 8006af2:	f1bb 0f00 	cmp.w	fp, #0
 8006af6:	db3e      	blt.n	8006b76 <_dtoa_r+0x22e>
 8006af8:	9b06      	ldr	r3, [sp, #24]
 8006afa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006afe:	445b      	add	r3, fp
 8006b00:	9306      	str	r3, [sp, #24]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9308      	str	r3, [sp, #32]
 8006b06:	9b07      	ldr	r3, [sp, #28]
 8006b08:	2b09      	cmp	r3, #9
 8006b0a:	f200 80af 	bhi.w	8006c6c <_dtoa_r+0x324>
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	bfc4      	itt	gt
 8006b12:	3b04      	subgt	r3, #4
 8006b14:	9307      	strgt	r3, [sp, #28]
 8006b16:	9b07      	ldr	r3, [sp, #28]
 8006b18:	f1a3 0302 	sub.w	r3, r3, #2
 8006b1c:	bfcc      	ite	gt
 8006b1e:	2600      	movgt	r6, #0
 8006b20:	2601      	movle	r6, #1
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	f200 80ae 	bhi.w	8006c84 <_dtoa_r+0x33c>
 8006b28:	e8df f003 	tbb	[pc, r3]
 8006b2c:	772f8482 	.word	0x772f8482
 8006b30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006b34:	441d      	add	r5, r3
 8006b36:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	dd11      	ble.n	8006b62 <_dtoa_r+0x21a>
 8006b3e:	9a00      	ldr	r2, [sp, #0]
 8006b40:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006b44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006b48:	fa22 f000 	lsr.w	r0, r2, r0
 8006b4c:	fa08 f303 	lsl.w	r3, r8, r3
 8006b50:	4318      	orrs	r0, r3
 8006b52:	f7f9 fcd7 	bl	8000504 <__aeabi_ui2d>
 8006b56:	2301      	movs	r3, #1
 8006b58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006b5c:	3d01      	subs	r5, #1
 8006b5e:	9312      	str	r3, [sp, #72]	; 0x48
 8006b60:	e772      	b.n	8006a48 <_dtoa_r+0x100>
 8006b62:	f1c3 0020 	rsb	r0, r3, #32
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	fa03 f000 	lsl.w	r0, r3, r0
 8006b6c:	e7f1      	b.n	8006b52 <_dtoa_r+0x20a>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e7b1      	b.n	8006ad6 <_dtoa_r+0x18e>
 8006b72:	900e      	str	r0, [sp, #56]	; 0x38
 8006b74:	e7b0      	b.n	8006ad8 <_dtoa_r+0x190>
 8006b76:	9b05      	ldr	r3, [sp, #20]
 8006b78:	eba3 030b 	sub.w	r3, r3, fp
 8006b7c:	9305      	str	r3, [sp, #20]
 8006b7e:	f1cb 0300 	rsb	r3, fp, #0
 8006b82:	9308      	str	r3, [sp, #32]
 8006b84:	2300      	movs	r3, #0
 8006b86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b88:	e7bd      	b.n	8006b06 <_dtoa_r+0x1be>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dd7a      	ble.n	8006c8a <_dtoa_r+0x342>
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	9303      	str	r3, [sp, #12]
 8006b98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	606a      	str	r2, [r5, #4]
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	f101 0214 	add.w	r2, r1, #20
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d975      	bls.n	8006c94 <_dtoa_r+0x34c>
 8006ba8:	6869      	ldr	r1, [r5, #4]
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 fe95 	bl	80078da <_Balloc>
 8006bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb2:	6028      	str	r0, [r5, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	9302      	str	r3, [sp, #8]
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	2b0e      	cmp	r3, #14
 8006bbc:	f200 80e5 	bhi.w	8006d8a <_dtoa_r+0x442>
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	f000 80e2 	beq.w	8006d8a <_dtoa_r+0x442>
 8006bc6:	ed9d 7b00 	vldr	d7, [sp]
 8006bca:	f1bb 0f00 	cmp.w	fp, #0
 8006bce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006bd2:	dd74      	ble.n	8006cbe <_dtoa_r+0x376>
 8006bd4:	4a23      	ldr	r2, [pc, #140]	; (8006c64 <_dtoa_r+0x31c>)
 8006bd6:	f00b 030f 	and.w	r3, fp, #15
 8006bda:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006bde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006be2:	06f0      	lsls	r0, r6, #27
 8006be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006be8:	d559      	bpl.n	8006c9e <_dtoa_r+0x356>
 8006bea:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <_dtoa_r+0x320>)
 8006bec:	ec51 0b17 	vmov	r0, r1, d7
 8006bf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bf4:	f7f9 fe26 	bl	8000844 <__aeabi_ddiv>
 8006bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8006bfc:	f006 060f 	and.w	r6, r6, #15
 8006c00:	2503      	movs	r5, #3
 8006c02:	4f19      	ldr	r7, [pc, #100]	; (8006c68 <_dtoa_r+0x320>)
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	d14c      	bne.n	8006ca2 <_dtoa_r+0x35a>
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c10:	f7f9 fe18 	bl	8000844 <__aeabi_ddiv>
 8006c14:	e9cd 0100 	strd	r0, r1, [sp]
 8006c18:	e06a      	b.n	8006cf0 <_dtoa_r+0x3a8>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c20:	445b      	add	r3, fp
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	3301      	adds	r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	bfb8      	it	lt
 8006c2c:	2301      	movlt	r3, #1
 8006c2e:	e7b3      	b.n	8006b98 <_dtoa_r+0x250>
 8006c30:	2300      	movs	r3, #0
 8006c32:	e7ab      	b.n	8006b8c <_dtoa_r+0x244>
 8006c34:	2300      	movs	r3, #0
 8006c36:	e7f1      	b.n	8006c1c <_dtoa_r+0x2d4>
 8006c38:	636f4361 	.word	0x636f4361
 8006c3c:	3fd287a7 	.word	0x3fd287a7
 8006c40:	8b60c8b3 	.word	0x8b60c8b3
 8006c44:	3fc68a28 	.word	0x3fc68a28
 8006c48:	509f79fb 	.word	0x509f79fb
 8006c4c:	3fd34413 	.word	0x3fd34413
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	08009315 	.word	0x08009315
 8006c58:	0800930c 	.word	0x0800930c
 8006c5c:	080092e9 	.word	0x080092e9
 8006c60:	3ff80000 	.word	0x3ff80000
 8006c64:	080093a8 	.word	0x080093a8
 8006c68:	08009380 	.word	0x08009380
 8006c6c:	2601      	movs	r6, #1
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	9609      	str	r6, [sp, #36]	; 0x24
 8006c74:	f04f 33ff 	mov.w	r3, #4294967295
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	9303      	str	r3, [sp, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2312      	movs	r3, #18
 8006c80:	920a      	str	r2, [sp, #40]	; 0x28
 8006c82:	e789      	b.n	8006b98 <_dtoa_r+0x250>
 8006c84:	2301      	movs	r3, #1
 8006c86:	9309      	str	r3, [sp, #36]	; 0x24
 8006c88:	e7f4      	b.n	8006c74 <_dtoa_r+0x32c>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	9303      	str	r3, [sp, #12]
 8006c90:	461a      	mov	r2, r3
 8006c92:	e7f5      	b.n	8006c80 <_dtoa_r+0x338>
 8006c94:	686a      	ldr	r2, [r5, #4]
 8006c96:	3201      	adds	r2, #1
 8006c98:	606a      	str	r2, [r5, #4]
 8006c9a:	0049      	lsls	r1, r1, #1
 8006c9c:	e780      	b.n	8006ba0 <_dtoa_r+0x258>
 8006c9e:	2502      	movs	r5, #2
 8006ca0:	e7af      	b.n	8006c02 <_dtoa_r+0x2ba>
 8006ca2:	07f1      	lsls	r1, r6, #31
 8006ca4:	d508      	bpl.n	8006cb8 <_dtoa_r+0x370>
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	4649      	mov	r1, r9
 8006caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cae:	f7f9 fc9f 	bl	80005f0 <__aeabi_dmul>
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	4689      	mov	r9, r1
 8006cb8:	1076      	asrs	r6, r6, #1
 8006cba:	3708      	adds	r7, #8
 8006cbc:	e7a2      	b.n	8006c04 <_dtoa_r+0x2bc>
 8006cbe:	f000 809d 	beq.w	8006dfc <_dtoa_r+0x4b4>
 8006cc2:	f1cb 0600 	rsb	r6, fp, #0
 8006cc6:	4b9f      	ldr	r3, [pc, #636]	; (8006f44 <_dtoa_r+0x5fc>)
 8006cc8:	4f9f      	ldr	r7, [pc, #636]	; (8006f48 <_dtoa_r+0x600>)
 8006cca:	f006 020f 	and.w	r2, r6, #15
 8006cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cda:	f7f9 fc89 	bl	80005f0 <__aeabi_dmul>
 8006cde:	e9cd 0100 	strd	r0, r1, [sp]
 8006ce2:	1136      	asrs	r6, r6, #4
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2502      	movs	r5, #2
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	d17c      	bne.n	8006de6 <_dtoa_r+0x49e>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d191      	bne.n	8006c14 <_dtoa_r+0x2cc>
 8006cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8084 	beq.w	8006e00 <_dtoa_r+0x4b8>
 8006cf8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4b93      	ldr	r3, [pc, #588]	; (8006f4c <_dtoa_r+0x604>)
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 fee6 	bl	8000ad4 <__aeabi_dcmplt>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d079      	beq.n	8006e00 <_dtoa_r+0x4b8>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d076      	beq.n	8006e00 <_dtoa_r+0x4b8>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dd34      	ble.n	8006d82 <_dtoa_r+0x43a>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4b8d      	ldr	r3, [pc, #564]	; (8006f50 <_dtoa_r+0x608>)
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4649      	mov	r1, r9
 8006d20:	f7f9 fc66 	bl	80005f0 <__aeabi_dmul>
 8006d24:	e9cd 0100 	strd	r0, r1, [sp]
 8006d28:	9e04      	ldr	r6, [sp, #16]
 8006d2a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006d2e:	3501      	adds	r5, #1
 8006d30:	4628      	mov	r0, r5
 8006d32:	f7f9 fbf7 	bl	8000524 <__aeabi_i2d>
 8006d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d3a:	f7f9 fc59 	bl	80005f0 <__aeabi_dmul>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4b84      	ldr	r3, [pc, #528]	; (8006f54 <_dtoa_r+0x60c>)
 8006d42:	f7f9 faa3 	bl	800028c <__adddf3>
 8006d46:	4680      	mov	r8, r0
 8006d48:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006d4c:	2e00      	cmp	r6, #0
 8006d4e:	d15a      	bne.n	8006e06 <_dtoa_r+0x4be>
 8006d50:	2200      	movs	r2, #0
 8006d52:	4b81      	ldr	r3, [pc, #516]	; (8006f58 <_dtoa_r+0x610>)
 8006d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d58:	f7f9 fa96 	bl	8000288 <__aeabi_dsub>
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	e9cd 0100 	strd	r0, r1, [sp]
 8006d64:	f7f9 fed4 	bl	8000b10 <__aeabi_dcmpgt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f040 829b 	bne.w	80072a4 <_dtoa_r+0x95c>
 8006d6e:	4642      	mov	r2, r8
 8006d70:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d78:	f7f9 feac 	bl	8000ad4 <__aeabi_dcmplt>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f040 828f 	bne.w	80072a0 <_dtoa_r+0x958>
 8006d82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d86:	e9cd 2300 	strd	r2, r3, [sp]
 8006d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f2c0 8150 	blt.w	8007032 <_dtoa_r+0x6ea>
 8006d92:	f1bb 0f0e 	cmp.w	fp, #14
 8006d96:	f300 814c 	bgt.w	8007032 <_dtoa_r+0x6ea>
 8006d9a:	4b6a      	ldr	r3, [pc, #424]	; (8006f44 <_dtoa_r+0x5fc>)
 8006d9c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f280 80da 	bge.w	8006f60 <_dtoa_r+0x618>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f300 80d6 	bgt.w	8006f60 <_dtoa_r+0x618>
 8006db4:	f040 8273 	bne.w	800729e <_dtoa_r+0x956>
 8006db8:	2200      	movs	r2, #0
 8006dba:	4b67      	ldr	r3, [pc, #412]	; (8006f58 <_dtoa_r+0x610>)
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	f7f9 fc16 	bl	80005f0 <__aeabi_dmul>
 8006dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dc8:	f7f9 fe98 	bl	8000afc <__aeabi_dcmpge>
 8006dcc:	9e03      	ldr	r6, [sp, #12]
 8006dce:	4637      	mov	r7, r6
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f040 824a 	bne.w	800726a <_dtoa_r+0x922>
 8006dd6:	9b02      	ldr	r3, [sp, #8]
 8006dd8:	9a02      	ldr	r2, [sp, #8]
 8006dda:	1c5d      	adds	r5, r3, #1
 8006ddc:	2331      	movs	r3, #49	; 0x31
 8006dde:	7013      	strb	r3, [r2, #0]
 8006de0:	f10b 0b01 	add.w	fp, fp, #1
 8006de4:	e245      	b.n	8007272 <_dtoa_r+0x92a>
 8006de6:	07f2      	lsls	r2, r6, #31
 8006de8:	d505      	bpl.n	8006df6 <_dtoa_r+0x4ae>
 8006dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dee:	f7f9 fbff 	bl	80005f0 <__aeabi_dmul>
 8006df2:	3501      	adds	r5, #1
 8006df4:	2301      	movs	r3, #1
 8006df6:	1076      	asrs	r6, r6, #1
 8006df8:	3708      	adds	r7, #8
 8006dfa:	e775      	b.n	8006ce8 <_dtoa_r+0x3a0>
 8006dfc:	2502      	movs	r5, #2
 8006dfe:	e777      	b.n	8006cf0 <_dtoa_r+0x3a8>
 8006e00:	465f      	mov	r7, fp
 8006e02:	9e03      	ldr	r6, [sp, #12]
 8006e04:	e794      	b.n	8006d30 <_dtoa_r+0x3e8>
 8006e06:	9a02      	ldr	r2, [sp, #8]
 8006e08:	4b4e      	ldr	r3, [pc, #312]	; (8006f44 <_dtoa_r+0x5fc>)
 8006e0a:	4432      	add	r2, r6
 8006e0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e10:	1e71      	subs	r1, r6, #1
 8006e12:	2a00      	cmp	r2, #0
 8006e14:	d048      	beq.n	8006ea8 <_dtoa_r+0x560>
 8006e16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	2000      	movs	r0, #0
 8006e20:	494e      	ldr	r1, [pc, #312]	; (8006f5c <_dtoa_r+0x614>)
 8006e22:	f7f9 fd0f 	bl	8000844 <__aeabi_ddiv>
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	f7f9 fa2d 	bl	8000288 <__aeabi_dsub>
 8006e2e:	9d02      	ldr	r5, [sp, #8]
 8006e30:	4680      	mov	r8, r0
 8006e32:	4689      	mov	r9, r1
 8006e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e38:	f7f9 fe8a 	bl	8000b50 <__aeabi_d2iz>
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	f7f9 fb71 	bl	8000524 <__aeabi_i2d>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e4a:	f7f9 fa1d 	bl	8000288 <__aeabi_dsub>
 8006e4e:	3630      	adds	r6, #48	; 0x30
 8006e50:	f805 6b01 	strb.w	r6, [r5], #1
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	e9cd 0100 	strd	r0, r1, [sp]
 8006e5c:	f7f9 fe3a 	bl	8000ad4 <__aeabi_dcmplt>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d165      	bne.n	8006f30 <_dtoa_r+0x5e8>
 8006e64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e68:	2000      	movs	r0, #0
 8006e6a:	4938      	ldr	r1, [pc, #224]	; (8006f4c <_dtoa_r+0x604>)
 8006e6c:	f7f9 fa0c 	bl	8000288 <__aeabi_dsub>
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	f7f9 fe2e 	bl	8000ad4 <__aeabi_dcmplt>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f040 80ba 	bne.w	8006ff2 <_dtoa_r+0x6aa>
 8006e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e80:	429d      	cmp	r5, r3
 8006e82:	f43f af7e 	beq.w	8006d82 <_dtoa_r+0x43a>
 8006e86:	2200      	movs	r2, #0
 8006e88:	4b31      	ldr	r3, [pc, #196]	; (8006f50 <_dtoa_r+0x608>)
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 fbaf 	bl	80005f0 <__aeabi_dmul>
 8006e92:	2200      	movs	r2, #0
 8006e94:	4680      	mov	r8, r0
 8006e96:	4689      	mov	r9, r1
 8006e98:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <_dtoa_r+0x608>)
 8006e9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e9e:	f7f9 fba7 	bl	80005f0 <__aeabi_dmul>
 8006ea2:	e9cd 0100 	strd	r0, r1, [sp]
 8006ea6:	e7c5      	b.n	8006e34 <_dtoa_r+0x4ec>
 8006ea8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb4:	f7f9 fb9c 	bl	80005f0 <__aeabi_dmul>
 8006eb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ebc:	9d02      	ldr	r5, [sp, #8]
 8006ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ec2:	f7f9 fe45 	bl	8000b50 <__aeabi_d2iz>
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	f7f9 fb2c 	bl	8000524 <__aeabi_i2d>
 8006ecc:	3630      	adds	r6, #48	; 0x30
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ed6:	f7f9 f9d7 	bl	8000288 <__aeabi_dsub>
 8006eda:	f805 6b01 	strb.w	r6, [r5], #1
 8006ede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	4689      	mov	r9, r1
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	d125      	bne.n	8006f38 <_dtoa_r+0x5f0>
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <_dtoa_r+0x614>)
 8006eee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ef2:	f7f9 f9cb 	bl	800028c <__adddf3>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4640      	mov	r0, r8
 8006efc:	4649      	mov	r1, r9
 8006efe:	f7f9 fe07 	bl	8000b10 <__aeabi_dcmpgt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d175      	bne.n	8006ff2 <_dtoa_r+0x6aa>
 8006f06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	4913      	ldr	r1, [pc, #76]	; (8006f5c <_dtoa_r+0x614>)
 8006f0e:	f7f9 f9bb 	bl	8000288 <__aeabi_dsub>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4640      	mov	r0, r8
 8006f18:	4649      	mov	r1, r9
 8006f1a:	f7f9 fddb 	bl	8000ad4 <__aeabi_dcmplt>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f af2f 	beq.w	8006d82 <_dtoa_r+0x43a>
 8006f24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006f2e:	d001      	beq.n	8006f34 <_dtoa_r+0x5ec>
 8006f30:	46bb      	mov	fp, r7
 8006f32:	e04d      	b.n	8006fd0 <_dtoa_r+0x688>
 8006f34:	4615      	mov	r5, r2
 8006f36:	e7f5      	b.n	8006f24 <_dtoa_r+0x5dc>
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <_dtoa_r+0x608>)
 8006f3a:	f7f9 fb59 	bl	80005f0 <__aeabi_dmul>
 8006f3e:	e9cd 0100 	strd	r0, r1, [sp]
 8006f42:	e7bc      	b.n	8006ebe <_dtoa_r+0x576>
 8006f44:	080093a8 	.word	0x080093a8
 8006f48:	08009380 	.word	0x08009380
 8006f4c:	3ff00000 	.word	0x3ff00000
 8006f50:	40240000 	.word	0x40240000
 8006f54:	401c0000 	.word	0x401c0000
 8006f58:	40140000 	.word	0x40140000
 8006f5c:	3fe00000 	.word	0x3fe00000
 8006f60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f64:	9d02      	ldr	r5, [sp, #8]
 8006f66:	4642      	mov	r2, r8
 8006f68:	464b      	mov	r3, r9
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	4639      	mov	r1, r7
 8006f6e:	f7f9 fc69 	bl	8000844 <__aeabi_ddiv>
 8006f72:	f7f9 fded 	bl	8000b50 <__aeabi_d2iz>
 8006f76:	9000      	str	r0, [sp, #0]
 8006f78:	f7f9 fad4 	bl	8000524 <__aeabi_i2d>
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	464b      	mov	r3, r9
 8006f80:	f7f9 fb36 	bl	80005f0 <__aeabi_dmul>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	f7f9 f97c 	bl	8000288 <__aeabi_dsub>
 8006f90:	9e00      	ldr	r6, [sp, #0]
 8006f92:	9f03      	ldr	r7, [sp, #12]
 8006f94:	3630      	adds	r6, #48	; 0x30
 8006f96:	f805 6b01 	strb.w	r6, [r5], #1
 8006f9a:	9e02      	ldr	r6, [sp, #8]
 8006f9c:	1bae      	subs	r6, r5, r6
 8006f9e:	42b7      	cmp	r7, r6
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	d138      	bne.n	8007018 <_dtoa_r+0x6d0>
 8006fa6:	f7f9 f971 	bl	800028c <__adddf3>
 8006faa:	4606      	mov	r6, r0
 8006fac:	460f      	mov	r7, r1
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	f7f9 fd8d 	bl	8000ad4 <__aeabi_dcmplt>
 8006fba:	b9c8      	cbnz	r0, 8006ff0 <_dtoa_r+0x6a8>
 8006fbc:	4632      	mov	r2, r6
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	f7f9 fd7c 	bl	8000ac0 <__aeabi_dcmpeq>
 8006fc8:	b110      	cbz	r0, 8006fd0 <_dtoa_r+0x688>
 8006fca:	9b00      	ldr	r3, [sp, #0]
 8006fcc:	07db      	lsls	r3, r3, #31
 8006fce:	d40f      	bmi.n	8006ff0 <_dtoa_r+0x6a8>
 8006fd0:	4651      	mov	r1, sl
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 fcb5 	bl	8007942 <_Bfree>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fdc:	702b      	strb	r3, [r5, #0]
 8006fde:	f10b 0301 	add.w	r3, fp, #1
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f43f acf8 	beq.w	80069dc <_dtoa_r+0x94>
 8006fec:	601d      	str	r5, [r3, #0]
 8006fee:	e4f5      	b.n	80069dc <_dtoa_r+0x94>
 8006ff0:	465f      	mov	r7, fp
 8006ff2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ff6:	2a39      	cmp	r2, #57	; 0x39
 8006ff8:	f105 33ff 	add.w	r3, r5, #4294967295
 8006ffc:	d106      	bne.n	800700c <_dtoa_r+0x6c4>
 8006ffe:	9a02      	ldr	r2, [sp, #8]
 8007000:	429a      	cmp	r2, r3
 8007002:	d107      	bne.n	8007014 <_dtoa_r+0x6cc>
 8007004:	2330      	movs	r3, #48	; 0x30
 8007006:	7013      	strb	r3, [r2, #0]
 8007008:	3701      	adds	r7, #1
 800700a:	4613      	mov	r3, r2
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	3201      	adds	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e78d      	b.n	8006f30 <_dtoa_r+0x5e8>
 8007014:	461d      	mov	r5, r3
 8007016:	e7ec      	b.n	8006ff2 <_dtoa_r+0x6aa>
 8007018:	2200      	movs	r2, #0
 800701a:	4ba4      	ldr	r3, [pc, #656]	; (80072ac <_dtoa_r+0x964>)
 800701c:	f7f9 fae8 	bl	80005f0 <__aeabi_dmul>
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4606      	mov	r6, r0
 8007026:	460f      	mov	r7, r1
 8007028:	f7f9 fd4a 	bl	8000ac0 <__aeabi_dcmpeq>
 800702c:	2800      	cmp	r0, #0
 800702e:	d09a      	beq.n	8006f66 <_dtoa_r+0x61e>
 8007030:	e7ce      	b.n	8006fd0 <_dtoa_r+0x688>
 8007032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007034:	2a00      	cmp	r2, #0
 8007036:	f000 80cd 	beq.w	80071d4 <_dtoa_r+0x88c>
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	2a01      	cmp	r2, #1
 800703e:	f300 80af 	bgt.w	80071a0 <_dtoa_r+0x858>
 8007042:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007044:	2a00      	cmp	r2, #0
 8007046:	f000 80a7 	beq.w	8007198 <_dtoa_r+0x850>
 800704a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800704e:	9e08      	ldr	r6, [sp, #32]
 8007050:	9d05      	ldr	r5, [sp, #20]
 8007052:	9a05      	ldr	r2, [sp, #20]
 8007054:	441a      	add	r2, r3
 8007056:	9205      	str	r2, [sp, #20]
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	2101      	movs	r1, #1
 800705c:	441a      	add	r2, r3
 800705e:	4620      	mov	r0, r4
 8007060:	9206      	str	r2, [sp, #24]
 8007062:	f000 fd0e 	bl	8007a82 <__i2b>
 8007066:	4607      	mov	r7, r0
 8007068:	2d00      	cmp	r5, #0
 800706a:	dd0c      	ble.n	8007086 <_dtoa_r+0x73e>
 800706c:	9b06      	ldr	r3, [sp, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	dd09      	ble.n	8007086 <_dtoa_r+0x73e>
 8007072:	42ab      	cmp	r3, r5
 8007074:	9a05      	ldr	r2, [sp, #20]
 8007076:	bfa8      	it	ge
 8007078:	462b      	movge	r3, r5
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	9205      	str	r2, [sp, #20]
 800707e:	9a06      	ldr	r2, [sp, #24]
 8007080:	1aed      	subs	r5, r5, r3
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	9306      	str	r3, [sp, #24]
 8007086:	9b08      	ldr	r3, [sp, #32]
 8007088:	b1f3      	cbz	r3, 80070c8 <_dtoa_r+0x780>
 800708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80a5 	beq.w	80071dc <_dtoa_r+0x894>
 8007092:	2e00      	cmp	r6, #0
 8007094:	dd10      	ble.n	80070b8 <_dtoa_r+0x770>
 8007096:	4639      	mov	r1, r7
 8007098:	4632      	mov	r2, r6
 800709a:	4620      	mov	r0, r4
 800709c:	f000 fd88 	bl	8007bb0 <__pow5mult>
 80070a0:	4652      	mov	r2, sl
 80070a2:	4601      	mov	r1, r0
 80070a4:	4607      	mov	r7, r0
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fcf4 	bl	8007a94 <__multiply>
 80070ac:	4651      	mov	r1, sl
 80070ae:	4680      	mov	r8, r0
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fc46 	bl	8007942 <_Bfree>
 80070b6:	46c2      	mov	sl, r8
 80070b8:	9b08      	ldr	r3, [sp, #32]
 80070ba:	1b9a      	subs	r2, r3, r6
 80070bc:	d004      	beq.n	80070c8 <_dtoa_r+0x780>
 80070be:	4651      	mov	r1, sl
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fd75 	bl	8007bb0 <__pow5mult>
 80070c6:	4682      	mov	sl, r0
 80070c8:	2101      	movs	r1, #1
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fcd9 	bl	8007a82 <__i2b>
 80070d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	f340 8083 	ble.w	80071e0 <_dtoa_r+0x898>
 80070da:	461a      	mov	r2, r3
 80070dc:	4601      	mov	r1, r0
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 fd66 	bl	8007bb0 <__pow5mult>
 80070e4:	9b07      	ldr	r3, [sp, #28]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	4606      	mov	r6, r0
 80070ea:	dd7c      	ble.n	80071e6 <_dtoa_r+0x89e>
 80070ec:	f04f 0800 	mov.w	r8, #0
 80070f0:	6933      	ldr	r3, [r6, #16]
 80070f2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070f6:	6918      	ldr	r0, [r3, #16]
 80070f8:	f000 fc75 	bl	80079e6 <__hi0bits>
 80070fc:	f1c0 0020 	rsb	r0, r0, #32
 8007100:	9b06      	ldr	r3, [sp, #24]
 8007102:	4418      	add	r0, r3
 8007104:	f010 001f 	ands.w	r0, r0, #31
 8007108:	f000 8096 	beq.w	8007238 <_dtoa_r+0x8f0>
 800710c:	f1c0 0320 	rsb	r3, r0, #32
 8007110:	2b04      	cmp	r3, #4
 8007112:	f340 8087 	ble.w	8007224 <_dtoa_r+0x8dc>
 8007116:	9b05      	ldr	r3, [sp, #20]
 8007118:	f1c0 001c 	rsb	r0, r0, #28
 800711c:	4403      	add	r3, r0
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	9b06      	ldr	r3, [sp, #24]
 8007122:	4405      	add	r5, r0
 8007124:	4403      	add	r3, r0
 8007126:	9306      	str	r3, [sp, #24]
 8007128:	9b05      	ldr	r3, [sp, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	dd05      	ble.n	800713a <_dtoa_r+0x7f2>
 800712e:	4651      	mov	r1, sl
 8007130:	461a      	mov	r2, r3
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fd8a 	bl	8007c4c <__lshift>
 8007138:	4682      	mov	sl, r0
 800713a:	9b06      	ldr	r3, [sp, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	dd05      	ble.n	800714c <_dtoa_r+0x804>
 8007140:	4631      	mov	r1, r6
 8007142:	461a      	mov	r2, r3
 8007144:	4620      	mov	r0, r4
 8007146:	f000 fd81 	bl	8007c4c <__lshift>
 800714a:	4606      	mov	r6, r0
 800714c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714e:	2b00      	cmp	r3, #0
 8007150:	d074      	beq.n	800723c <_dtoa_r+0x8f4>
 8007152:	4631      	mov	r1, r6
 8007154:	4650      	mov	r0, sl
 8007156:	f000 fdca 	bl	8007cee <__mcmp>
 800715a:	2800      	cmp	r0, #0
 800715c:	da6e      	bge.n	800723c <_dtoa_r+0x8f4>
 800715e:	2300      	movs	r3, #0
 8007160:	4651      	mov	r1, sl
 8007162:	220a      	movs	r2, #10
 8007164:	4620      	mov	r0, r4
 8007166:	f000 fc03 	bl	8007970 <__multadd>
 800716a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007170:	4682      	mov	sl, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 81a8 	beq.w	80074c8 <_dtoa_r+0xb80>
 8007178:	2300      	movs	r3, #0
 800717a:	4639      	mov	r1, r7
 800717c:	220a      	movs	r2, #10
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fbf6 	bl	8007970 <__multadd>
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	4607      	mov	r7, r0
 800718a:	f300 80c8 	bgt.w	800731e <_dtoa_r+0x9d6>
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	2b02      	cmp	r3, #2
 8007192:	f340 80c4 	ble.w	800731e <_dtoa_r+0x9d6>
 8007196:	e059      	b.n	800724c <_dtoa_r+0x904>
 8007198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800719a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800719e:	e756      	b.n	800704e <_dtoa_r+0x706>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	1e5e      	subs	r6, r3, #1
 80071a4:	9b08      	ldr	r3, [sp, #32]
 80071a6:	42b3      	cmp	r3, r6
 80071a8:	bfbf      	itttt	lt
 80071aa:	9b08      	ldrlt	r3, [sp, #32]
 80071ac:	9608      	strlt	r6, [sp, #32]
 80071ae:	1af2      	sublt	r2, r6, r3
 80071b0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80071b2:	bfb6      	itet	lt
 80071b4:	189b      	addlt	r3, r3, r2
 80071b6:	1b9e      	subge	r6, r3, r6
 80071b8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80071ba:	9b03      	ldr	r3, [sp, #12]
 80071bc:	bfb8      	it	lt
 80071be:	2600      	movlt	r6, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfb9      	ittee	lt
 80071c4:	9b05      	ldrlt	r3, [sp, #20]
 80071c6:	9a03      	ldrlt	r2, [sp, #12]
 80071c8:	9d05      	ldrge	r5, [sp, #20]
 80071ca:	9b03      	ldrge	r3, [sp, #12]
 80071cc:	bfbc      	itt	lt
 80071ce:	1a9d      	sublt	r5, r3, r2
 80071d0:	2300      	movlt	r3, #0
 80071d2:	e73e      	b.n	8007052 <_dtoa_r+0x70a>
 80071d4:	9e08      	ldr	r6, [sp, #32]
 80071d6:	9d05      	ldr	r5, [sp, #20]
 80071d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80071da:	e745      	b.n	8007068 <_dtoa_r+0x720>
 80071dc:	9a08      	ldr	r2, [sp, #32]
 80071de:	e76e      	b.n	80070be <_dtoa_r+0x776>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	dc19      	bgt.n	800721a <_dtoa_r+0x8d2>
 80071e6:	9b00      	ldr	r3, [sp, #0]
 80071e8:	b9bb      	cbnz	r3, 800721a <_dtoa_r+0x8d2>
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f0:	b99b      	cbnz	r3, 800721a <_dtoa_r+0x8d2>
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f8:	0d1b      	lsrs	r3, r3, #20
 80071fa:	051b      	lsls	r3, r3, #20
 80071fc:	b183      	cbz	r3, 8007220 <_dtoa_r+0x8d8>
 80071fe:	9b05      	ldr	r3, [sp, #20]
 8007200:	3301      	adds	r3, #1
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	9b06      	ldr	r3, [sp, #24]
 8007206:	3301      	adds	r3, #1
 8007208:	9306      	str	r3, [sp, #24]
 800720a:	f04f 0801 	mov.w	r8, #1
 800720e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007210:	2b00      	cmp	r3, #0
 8007212:	f47f af6d 	bne.w	80070f0 <_dtoa_r+0x7a8>
 8007216:	2001      	movs	r0, #1
 8007218:	e772      	b.n	8007100 <_dtoa_r+0x7b8>
 800721a:	f04f 0800 	mov.w	r8, #0
 800721e:	e7f6      	b.n	800720e <_dtoa_r+0x8c6>
 8007220:	4698      	mov	r8, r3
 8007222:	e7f4      	b.n	800720e <_dtoa_r+0x8c6>
 8007224:	d080      	beq.n	8007128 <_dtoa_r+0x7e0>
 8007226:	9a05      	ldr	r2, [sp, #20]
 8007228:	331c      	adds	r3, #28
 800722a:	441a      	add	r2, r3
 800722c:	9205      	str	r2, [sp, #20]
 800722e:	9a06      	ldr	r2, [sp, #24]
 8007230:	441a      	add	r2, r3
 8007232:	441d      	add	r5, r3
 8007234:	4613      	mov	r3, r2
 8007236:	e776      	b.n	8007126 <_dtoa_r+0x7de>
 8007238:	4603      	mov	r3, r0
 800723a:	e7f4      	b.n	8007226 <_dtoa_r+0x8de>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	dc36      	bgt.n	80072b0 <_dtoa_r+0x968>
 8007242:	9b07      	ldr	r3, [sp, #28]
 8007244:	2b02      	cmp	r3, #2
 8007246:	dd33      	ble.n	80072b0 <_dtoa_r+0x968>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	9b04      	ldr	r3, [sp, #16]
 800724e:	b963      	cbnz	r3, 800726a <_dtoa_r+0x922>
 8007250:	4631      	mov	r1, r6
 8007252:	2205      	movs	r2, #5
 8007254:	4620      	mov	r0, r4
 8007256:	f000 fb8b 	bl	8007970 <__multadd>
 800725a:	4601      	mov	r1, r0
 800725c:	4606      	mov	r6, r0
 800725e:	4650      	mov	r0, sl
 8007260:	f000 fd45 	bl	8007cee <__mcmp>
 8007264:	2800      	cmp	r0, #0
 8007266:	f73f adb6 	bgt.w	8006dd6 <_dtoa_r+0x48e>
 800726a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726c:	9d02      	ldr	r5, [sp, #8]
 800726e:	ea6f 0b03 	mvn.w	fp, r3
 8007272:	2300      	movs	r3, #0
 8007274:	9303      	str	r3, [sp, #12]
 8007276:	4631      	mov	r1, r6
 8007278:	4620      	mov	r0, r4
 800727a:	f000 fb62 	bl	8007942 <_Bfree>
 800727e:	2f00      	cmp	r7, #0
 8007280:	f43f aea6 	beq.w	8006fd0 <_dtoa_r+0x688>
 8007284:	9b03      	ldr	r3, [sp, #12]
 8007286:	b12b      	cbz	r3, 8007294 <_dtoa_r+0x94c>
 8007288:	42bb      	cmp	r3, r7
 800728a:	d003      	beq.n	8007294 <_dtoa_r+0x94c>
 800728c:	4619      	mov	r1, r3
 800728e:	4620      	mov	r0, r4
 8007290:	f000 fb57 	bl	8007942 <_Bfree>
 8007294:	4639      	mov	r1, r7
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fb53 	bl	8007942 <_Bfree>
 800729c:	e698      	b.n	8006fd0 <_dtoa_r+0x688>
 800729e:	2600      	movs	r6, #0
 80072a0:	4637      	mov	r7, r6
 80072a2:	e7e2      	b.n	800726a <_dtoa_r+0x922>
 80072a4:	46bb      	mov	fp, r7
 80072a6:	4637      	mov	r7, r6
 80072a8:	e595      	b.n	8006dd6 <_dtoa_r+0x48e>
 80072aa:	bf00      	nop
 80072ac:	40240000 	.word	0x40240000
 80072b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b2:	bb93      	cbnz	r3, 800731a <_dtoa_r+0x9d2>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	9d02      	ldr	r5, [sp, #8]
 80072ba:	4631      	mov	r1, r6
 80072bc:	4650      	mov	r0, sl
 80072be:	f7ff fab5 	bl	800682c <quorem>
 80072c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072c6:	f805 9b01 	strb.w	r9, [r5], #1
 80072ca:	9b02      	ldr	r3, [sp, #8]
 80072cc:	9a04      	ldr	r2, [sp, #16]
 80072ce:	1aeb      	subs	r3, r5, r3
 80072d0:	429a      	cmp	r2, r3
 80072d2:	f300 80dc 	bgt.w	800748e <_dtoa_r+0xb46>
 80072d6:	9b02      	ldr	r3, [sp, #8]
 80072d8:	2a01      	cmp	r2, #1
 80072da:	bfac      	ite	ge
 80072dc:	189b      	addge	r3, r3, r2
 80072de:	3301      	addlt	r3, #1
 80072e0:	4698      	mov	r8, r3
 80072e2:	2300      	movs	r3, #0
 80072e4:	9303      	str	r3, [sp, #12]
 80072e6:	4651      	mov	r1, sl
 80072e8:	2201      	movs	r2, #1
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fcae 	bl	8007c4c <__lshift>
 80072f0:	4631      	mov	r1, r6
 80072f2:	4682      	mov	sl, r0
 80072f4:	f000 fcfb 	bl	8007cee <__mcmp>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	f300 808d 	bgt.w	8007418 <_dtoa_r+0xad0>
 80072fe:	d103      	bne.n	8007308 <_dtoa_r+0x9c0>
 8007300:	f019 0f01 	tst.w	r9, #1
 8007304:	f040 8088 	bne.w	8007418 <_dtoa_r+0xad0>
 8007308:	4645      	mov	r5, r8
 800730a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800730e:	2b30      	cmp	r3, #48	; 0x30
 8007310:	f105 32ff 	add.w	r2, r5, #4294967295
 8007314:	d1af      	bne.n	8007276 <_dtoa_r+0x92e>
 8007316:	4615      	mov	r5, r2
 8007318:	e7f7      	b.n	800730a <_dtoa_r+0x9c2>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	9304      	str	r3, [sp, #16]
 800731e:	2d00      	cmp	r5, #0
 8007320:	dd05      	ble.n	800732e <_dtoa_r+0x9e6>
 8007322:	4639      	mov	r1, r7
 8007324:	462a      	mov	r2, r5
 8007326:	4620      	mov	r0, r4
 8007328:	f000 fc90 	bl	8007c4c <__lshift>
 800732c:	4607      	mov	r7, r0
 800732e:	f1b8 0f00 	cmp.w	r8, #0
 8007332:	d04c      	beq.n	80073ce <_dtoa_r+0xa86>
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	4620      	mov	r0, r4
 8007338:	f000 facf 	bl	80078da <_Balloc>
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	3202      	adds	r2, #2
 8007340:	4605      	mov	r5, r0
 8007342:	0092      	lsls	r2, r2, #2
 8007344:	f107 010c 	add.w	r1, r7, #12
 8007348:	300c      	adds	r0, #12
 800734a:	f000 fab9 	bl	80078c0 <memcpy>
 800734e:	2201      	movs	r2, #1
 8007350:	4629      	mov	r1, r5
 8007352:	4620      	mov	r0, r4
 8007354:	f000 fc7a 	bl	8007c4c <__lshift>
 8007358:	9b00      	ldr	r3, [sp, #0]
 800735a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800735e:	9703      	str	r7, [sp, #12]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	4607      	mov	r7, r0
 8007366:	9305      	str	r3, [sp, #20]
 8007368:	4631      	mov	r1, r6
 800736a:	4650      	mov	r0, sl
 800736c:	f7ff fa5e 	bl	800682c <quorem>
 8007370:	9903      	ldr	r1, [sp, #12]
 8007372:	4605      	mov	r5, r0
 8007374:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007378:	4650      	mov	r0, sl
 800737a:	f000 fcb8 	bl	8007cee <__mcmp>
 800737e:	463a      	mov	r2, r7
 8007380:	9000      	str	r0, [sp, #0]
 8007382:	4631      	mov	r1, r6
 8007384:	4620      	mov	r0, r4
 8007386:	f000 fccc 	bl	8007d22 <__mdiff>
 800738a:	68c3      	ldr	r3, [r0, #12]
 800738c:	4602      	mov	r2, r0
 800738e:	bb03      	cbnz	r3, 80073d2 <_dtoa_r+0xa8a>
 8007390:	4601      	mov	r1, r0
 8007392:	9006      	str	r0, [sp, #24]
 8007394:	4650      	mov	r0, sl
 8007396:	f000 fcaa 	bl	8007cee <__mcmp>
 800739a:	9a06      	ldr	r2, [sp, #24]
 800739c:	4603      	mov	r3, r0
 800739e:	4611      	mov	r1, r2
 80073a0:	4620      	mov	r0, r4
 80073a2:	9306      	str	r3, [sp, #24]
 80073a4:	f000 facd 	bl	8007942 <_Bfree>
 80073a8:	9b06      	ldr	r3, [sp, #24]
 80073aa:	b9a3      	cbnz	r3, 80073d6 <_dtoa_r+0xa8e>
 80073ac:	9a07      	ldr	r2, [sp, #28]
 80073ae:	b992      	cbnz	r2, 80073d6 <_dtoa_r+0xa8e>
 80073b0:	9a05      	ldr	r2, [sp, #20]
 80073b2:	b982      	cbnz	r2, 80073d6 <_dtoa_r+0xa8e>
 80073b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073b8:	d029      	beq.n	800740e <_dtoa_r+0xac6>
 80073ba:	9b00      	ldr	r3, [sp, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dd01      	ble.n	80073c4 <_dtoa_r+0xa7c>
 80073c0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80073c4:	f108 0501 	add.w	r5, r8, #1
 80073c8:	f888 9000 	strb.w	r9, [r8]
 80073cc:	e753      	b.n	8007276 <_dtoa_r+0x92e>
 80073ce:	4638      	mov	r0, r7
 80073d0:	e7c2      	b.n	8007358 <_dtoa_r+0xa10>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e7e3      	b.n	800739e <_dtoa_r+0xa56>
 80073d6:	9a00      	ldr	r2, [sp, #0]
 80073d8:	2a00      	cmp	r2, #0
 80073da:	db04      	blt.n	80073e6 <_dtoa_r+0xa9e>
 80073dc:	d125      	bne.n	800742a <_dtoa_r+0xae2>
 80073de:	9a07      	ldr	r2, [sp, #28]
 80073e0:	bb1a      	cbnz	r2, 800742a <_dtoa_r+0xae2>
 80073e2:	9a05      	ldr	r2, [sp, #20]
 80073e4:	bb0a      	cbnz	r2, 800742a <_dtoa_r+0xae2>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	ddec      	ble.n	80073c4 <_dtoa_r+0xa7c>
 80073ea:	4651      	mov	r1, sl
 80073ec:	2201      	movs	r2, #1
 80073ee:	4620      	mov	r0, r4
 80073f0:	f000 fc2c 	bl	8007c4c <__lshift>
 80073f4:	4631      	mov	r1, r6
 80073f6:	4682      	mov	sl, r0
 80073f8:	f000 fc79 	bl	8007cee <__mcmp>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	dc03      	bgt.n	8007408 <_dtoa_r+0xac0>
 8007400:	d1e0      	bne.n	80073c4 <_dtoa_r+0xa7c>
 8007402:	f019 0f01 	tst.w	r9, #1
 8007406:	d0dd      	beq.n	80073c4 <_dtoa_r+0xa7c>
 8007408:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800740c:	d1d8      	bne.n	80073c0 <_dtoa_r+0xa78>
 800740e:	2339      	movs	r3, #57	; 0x39
 8007410:	f888 3000 	strb.w	r3, [r8]
 8007414:	f108 0801 	add.w	r8, r8, #1
 8007418:	4645      	mov	r5, r8
 800741a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800741e:	2b39      	cmp	r3, #57	; 0x39
 8007420:	f105 32ff 	add.w	r2, r5, #4294967295
 8007424:	d03b      	beq.n	800749e <_dtoa_r+0xb56>
 8007426:	3301      	adds	r3, #1
 8007428:	e040      	b.n	80074ac <_dtoa_r+0xb64>
 800742a:	2b00      	cmp	r3, #0
 800742c:	f108 0501 	add.w	r5, r8, #1
 8007430:	dd05      	ble.n	800743e <_dtoa_r+0xaf6>
 8007432:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007436:	d0ea      	beq.n	800740e <_dtoa_r+0xac6>
 8007438:	f109 0901 	add.w	r9, r9, #1
 800743c:	e7c4      	b.n	80073c8 <_dtoa_r+0xa80>
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	9a04      	ldr	r2, [sp, #16]
 8007442:	f805 9c01 	strb.w	r9, [r5, #-1]
 8007446:	1aeb      	subs	r3, r5, r3
 8007448:	4293      	cmp	r3, r2
 800744a:	46a8      	mov	r8, r5
 800744c:	f43f af4b 	beq.w	80072e6 <_dtoa_r+0x99e>
 8007450:	4651      	mov	r1, sl
 8007452:	2300      	movs	r3, #0
 8007454:	220a      	movs	r2, #10
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fa8a 	bl	8007970 <__multadd>
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	9903      	ldr	r1, [sp, #12]
 8007460:	42bb      	cmp	r3, r7
 8007462:	4682      	mov	sl, r0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	f04f 020a 	mov.w	r2, #10
 800746c:	4620      	mov	r0, r4
 800746e:	d104      	bne.n	800747a <_dtoa_r+0xb32>
 8007470:	f000 fa7e 	bl	8007970 <__multadd>
 8007474:	9003      	str	r0, [sp, #12]
 8007476:	4607      	mov	r7, r0
 8007478:	e776      	b.n	8007368 <_dtoa_r+0xa20>
 800747a:	f000 fa79 	bl	8007970 <__multadd>
 800747e:	2300      	movs	r3, #0
 8007480:	9003      	str	r0, [sp, #12]
 8007482:	220a      	movs	r2, #10
 8007484:	4639      	mov	r1, r7
 8007486:	4620      	mov	r0, r4
 8007488:	f000 fa72 	bl	8007970 <__multadd>
 800748c:	e7f3      	b.n	8007476 <_dtoa_r+0xb2e>
 800748e:	4651      	mov	r1, sl
 8007490:	2300      	movs	r3, #0
 8007492:	220a      	movs	r2, #10
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fa6b 	bl	8007970 <__multadd>
 800749a:	4682      	mov	sl, r0
 800749c:	e70d      	b.n	80072ba <_dtoa_r+0x972>
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d105      	bne.n	80074b0 <_dtoa_r+0xb68>
 80074a4:	9a02      	ldr	r2, [sp, #8]
 80074a6:	f10b 0b01 	add.w	fp, fp, #1
 80074aa:	2331      	movs	r3, #49	; 0x31
 80074ac:	7013      	strb	r3, [r2, #0]
 80074ae:	e6e2      	b.n	8007276 <_dtoa_r+0x92e>
 80074b0:	4615      	mov	r5, r2
 80074b2:	e7b2      	b.n	800741a <_dtoa_r+0xad2>
 80074b4:	4b09      	ldr	r3, [pc, #36]	; (80074dc <_dtoa_r+0xb94>)
 80074b6:	f7ff baae 	b.w	8006a16 <_dtoa_r+0xce>
 80074ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f47f aa88 	bne.w	80069d2 <_dtoa_r+0x8a>
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <_dtoa_r+0xb98>)
 80074c4:	f7ff baa7 	b.w	8006a16 <_dtoa_r+0xce>
 80074c8:	9b04      	ldr	r3, [sp, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f73f aef4 	bgt.w	80072b8 <_dtoa_r+0x970>
 80074d0:	9b07      	ldr	r3, [sp, #28]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	f77f aef0 	ble.w	80072b8 <_dtoa_r+0x970>
 80074d8:	e6b8      	b.n	800724c <_dtoa_r+0x904>
 80074da:	bf00      	nop
 80074dc:	080092e8 	.word	0x080092e8
 80074e0:	0800930c 	.word	0x0800930c

080074e4 <__sflush_r>:
 80074e4:	898a      	ldrh	r2, [r1, #12]
 80074e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ea:	4605      	mov	r5, r0
 80074ec:	0710      	lsls	r0, r2, #28
 80074ee:	460c      	mov	r4, r1
 80074f0:	d45a      	bmi.n	80075a8 <__sflush_r+0xc4>
 80074f2:	684b      	ldr	r3, [r1, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dc05      	bgt.n	8007504 <__sflush_r+0x20>
 80074f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	dc02      	bgt.n	8007504 <__sflush_r+0x20>
 80074fe:	2000      	movs	r0, #0
 8007500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007506:	2e00      	cmp	r6, #0
 8007508:	d0f9      	beq.n	80074fe <__sflush_r+0x1a>
 800750a:	2300      	movs	r3, #0
 800750c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007510:	682f      	ldr	r7, [r5, #0]
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	d033      	beq.n	800757e <__sflush_r+0x9a>
 8007516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	075a      	lsls	r2, r3, #29
 800751c:	d505      	bpl.n	800752a <__sflush_r+0x46>
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	1ac0      	subs	r0, r0, r3
 8007522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007524:	b10b      	cbz	r3, 800752a <__sflush_r+0x46>
 8007526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007528:	1ac0      	subs	r0, r0, r3
 800752a:	2300      	movs	r3, #0
 800752c:	4602      	mov	r2, r0
 800752e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007530:	6a21      	ldr	r1, [r4, #32]
 8007532:	4628      	mov	r0, r5
 8007534:	47b0      	blx	r6
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	d106      	bne.n	800754a <__sflush_r+0x66>
 800753c:	6829      	ldr	r1, [r5, #0]
 800753e:	291d      	cmp	r1, #29
 8007540:	d84b      	bhi.n	80075da <__sflush_r+0xf6>
 8007542:	4a2b      	ldr	r2, [pc, #172]	; (80075f0 <__sflush_r+0x10c>)
 8007544:	40ca      	lsrs	r2, r1
 8007546:	07d6      	lsls	r6, r2, #31
 8007548:	d547      	bpl.n	80075da <__sflush_r+0xf6>
 800754a:	2200      	movs	r2, #0
 800754c:	6062      	str	r2, [r4, #4]
 800754e:	04d9      	lsls	r1, r3, #19
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	6022      	str	r2, [r4, #0]
 8007554:	d504      	bpl.n	8007560 <__sflush_r+0x7c>
 8007556:	1c42      	adds	r2, r0, #1
 8007558:	d101      	bne.n	800755e <__sflush_r+0x7a>
 800755a:	682b      	ldr	r3, [r5, #0]
 800755c:	b903      	cbnz	r3, 8007560 <__sflush_r+0x7c>
 800755e:	6560      	str	r0, [r4, #84]	; 0x54
 8007560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007562:	602f      	str	r7, [r5, #0]
 8007564:	2900      	cmp	r1, #0
 8007566:	d0ca      	beq.n	80074fe <__sflush_r+0x1a>
 8007568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800756c:	4299      	cmp	r1, r3
 800756e:	d002      	beq.n	8007576 <__sflush_r+0x92>
 8007570:	4628      	mov	r0, r5
 8007572:	f7fe fae3 	bl	8005b3c <_free_r>
 8007576:	2000      	movs	r0, #0
 8007578:	6360      	str	r0, [r4, #52]	; 0x34
 800757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757e:	6a21      	ldr	r1, [r4, #32]
 8007580:	2301      	movs	r3, #1
 8007582:	4628      	mov	r0, r5
 8007584:	47b0      	blx	r6
 8007586:	1c41      	adds	r1, r0, #1
 8007588:	d1c6      	bne.n	8007518 <__sflush_r+0x34>
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0c3      	beq.n	8007518 <__sflush_r+0x34>
 8007590:	2b1d      	cmp	r3, #29
 8007592:	d001      	beq.n	8007598 <__sflush_r+0xb4>
 8007594:	2b16      	cmp	r3, #22
 8007596:	d101      	bne.n	800759c <__sflush_r+0xb8>
 8007598:	602f      	str	r7, [r5, #0]
 800759a:	e7b0      	b.n	80074fe <__sflush_r+0x1a>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	690f      	ldr	r7, [r1, #16]
 80075aa:	2f00      	cmp	r7, #0
 80075ac:	d0a7      	beq.n	80074fe <__sflush_r+0x1a>
 80075ae:	0793      	lsls	r3, r2, #30
 80075b0:	680e      	ldr	r6, [r1, #0]
 80075b2:	bf08      	it	eq
 80075b4:	694b      	ldreq	r3, [r1, #20]
 80075b6:	600f      	str	r7, [r1, #0]
 80075b8:	bf18      	it	ne
 80075ba:	2300      	movne	r3, #0
 80075bc:	eba6 0807 	sub.w	r8, r6, r7
 80075c0:	608b      	str	r3, [r1, #8]
 80075c2:	f1b8 0f00 	cmp.w	r8, #0
 80075c6:	dd9a      	ble.n	80074fe <__sflush_r+0x1a>
 80075c8:	4643      	mov	r3, r8
 80075ca:	463a      	mov	r2, r7
 80075cc:	6a21      	ldr	r1, [r4, #32]
 80075ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b0      	blx	r6
 80075d4:	2800      	cmp	r0, #0
 80075d6:	dc07      	bgt.n	80075e8 <__sflush_r+0x104>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e8:	4407      	add	r7, r0
 80075ea:	eba8 0800 	sub.w	r8, r8, r0
 80075ee:	e7e8      	b.n	80075c2 <__sflush_r+0xde>
 80075f0:	20400001 	.word	0x20400001

080075f4 <_fflush_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	690b      	ldr	r3, [r1, #16]
 80075f8:	4605      	mov	r5, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	b1db      	cbz	r3, 8007636 <_fflush_r+0x42>
 80075fe:	b118      	cbz	r0, 8007608 <_fflush_r+0x14>
 8007600:	6983      	ldr	r3, [r0, #24]
 8007602:	b90b      	cbnz	r3, 8007608 <_fflush_r+0x14>
 8007604:	f000 f860 	bl	80076c8 <__sinit>
 8007608:	4b0c      	ldr	r3, [pc, #48]	; (800763c <_fflush_r+0x48>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d109      	bne.n	8007622 <_fflush_r+0x2e>
 800760e:	686c      	ldr	r4, [r5, #4]
 8007610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007614:	b17b      	cbz	r3, 8007636 <_fflush_r+0x42>
 8007616:	4621      	mov	r1, r4
 8007618:	4628      	mov	r0, r5
 800761a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800761e:	f7ff bf61 	b.w	80074e4 <__sflush_r>
 8007622:	4b07      	ldr	r3, [pc, #28]	; (8007640 <_fflush_r+0x4c>)
 8007624:	429c      	cmp	r4, r3
 8007626:	d101      	bne.n	800762c <_fflush_r+0x38>
 8007628:	68ac      	ldr	r4, [r5, #8]
 800762a:	e7f1      	b.n	8007610 <_fflush_r+0x1c>
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <_fflush_r+0x50>)
 800762e:	429c      	cmp	r4, r3
 8007630:	bf08      	it	eq
 8007632:	68ec      	ldreq	r4, [r5, #12]
 8007634:	e7ec      	b.n	8007610 <_fflush_r+0x1c>
 8007636:	2000      	movs	r0, #0
 8007638:	bd38      	pop	{r3, r4, r5, pc}
 800763a:	bf00      	nop
 800763c:	0800933c 	.word	0x0800933c
 8007640:	0800935c 	.word	0x0800935c
 8007644:	0800931c 	.word	0x0800931c

08007648 <_cleanup_r>:
 8007648:	4901      	ldr	r1, [pc, #4]	; (8007650 <_cleanup_r+0x8>)
 800764a:	f000 b8a9 	b.w	80077a0 <_fwalk_reent>
 800764e:	bf00      	nop
 8007650:	080075f5 	.word	0x080075f5

08007654 <std.isra.0>:
 8007654:	2300      	movs	r3, #0
 8007656:	b510      	push	{r4, lr}
 8007658:	4604      	mov	r4, r0
 800765a:	6003      	str	r3, [r0, #0]
 800765c:	6043      	str	r3, [r0, #4]
 800765e:	6083      	str	r3, [r0, #8]
 8007660:	8181      	strh	r1, [r0, #12]
 8007662:	6643      	str	r3, [r0, #100]	; 0x64
 8007664:	81c2      	strh	r2, [r0, #14]
 8007666:	6103      	str	r3, [r0, #16]
 8007668:	6143      	str	r3, [r0, #20]
 800766a:	6183      	str	r3, [r0, #24]
 800766c:	4619      	mov	r1, r3
 800766e:	2208      	movs	r2, #8
 8007670:	305c      	adds	r0, #92	; 0x5c
 8007672:	f7fe fa5b 	bl	8005b2c <memset>
 8007676:	4b05      	ldr	r3, [pc, #20]	; (800768c <std.isra.0+0x38>)
 8007678:	6263      	str	r3, [r4, #36]	; 0x24
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <std.isra.0+0x3c>)
 800767c:	62a3      	str	r3, [r4, #40]	; 0x28
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <std.isra.0+0x40>)
 8007680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <std.isra.0+0x44>)
 8007684:	6224      	str	r4, [r4, #32]
 8007686:	6323      	str	r3, [r4, #48]	; 0x30
 8007688:	bd10      	pop	{r4, pc}
 800768a:	bf00      	nop
 800768c:	08008139 	.word	0x08008139
 8007690:	0800815b 	.word	0x0800815b
 8007694:	08008193 	.word	0x08008193
 8007698:	080081b7 	.word	0x080081b7

0800769c <__sfmoreglue>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	1e4a      	subs	r2, r1, #1
 80076a0:	2568      	movs	r5, #104	; 0x68
 80076a2:	4355      	muls	r5, r2
 80076a4:	460e      	mov	r6, r1
 80076a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076aa:	f7fe fa95 	bl	8005bd8 <_malloc_r>
 80076ae:	4604      	mov	r4, r0
 80076b0:	b140      	cbz	r0, 80076c4 <__sfmoreglue+0x28>
 80076b2:	2100      	movs	r1, #0
 80076b4:	e880 0042 	stmia.w	r0, {r1, r6}
 80076b8:	300c      	adds	r0, #12
 80076ba:	60a0      	str	r0, [r4, #8]
 80076bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076c0:	f7fe fa34 	bl	8005b2c <memset>
 80076c4:	4620      	mov	r0, r4
 80076c6:	bd70      	pop	{r4, r5, r6, pc}

080076c8 <__sinit>:
 80076c8:	6983      	ldr	r3, [r0, #24]
 80076ca:	b510      	push	{r4, lr}
 80076cc:	4604      	mov	r4, r0
 80076ce:	bb33      	cbnz	r3, 800771e <__sinit+0x56>
 80076d0:	6483      	str	r3, [r0, #72]	; 0x48
 80076d2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80076d4:	6503      	str	r3, [r0, #80]	; 0x50
 80076d6:	4b12      	ldr	r3, [pc, #72]	; (8007720 <__sinit+0x58>)
 80076d8:	4a12      	ldr	r2, [pc, #72]	; (8007724 <__sinit+0x5c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6282      	str	r2, [r0, #40]	; 0x28
 80076de:	4298      	cmp	r0, r3
 80076e0:	bf04      	itt	eq
 80076e2:	2301      	moveq	r3, #1
 80076e4:	6183      	streq	r3, [r0, #24]
 80076e6:	f000 f81f 	bl	8007728 <__sfp>
 80076ea:	6060      	str	r0, [r4, #4]
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 f81b 	bl	8007728 <__sfp>
 80076f2:	60a0      	str	r0, [r4, #8]
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 f817 	bl	8007728 <__sfp>
 80076fa:	2200      	movs	r2, #0
 80076fc:	60e0      	str	r0, [r4, #12]
 80076fe:	2104      	movs	r1, #4
 8007700:	6860      	ldr	r0, [r4, #4]
 8007702:	f7ff ffa7 	bl	8007654 <std.isra.0>
 8007706:	2201      	movs	r2, #1
 8007708:	2109      	movs	r1, #9
 800770a:	68a0      	ldr	r0, [r4, #8]
 800770c:	f7ff ffa2 	bl	8007654 <std.isra.0>
 8007710:	2202      	movs	r2, #2
 8007712:	2112      	movs	r1, #18
 8007714:	68e0      	ldr	r0, [r4, #12]
 8007716:	f7ff ff9d 	bl	8007654 <std.isra.0>
 800771a:	2301      	movs	r3, #1
 800771c:	61a3      	str	r3, [r4, #24]
 800771e:	bd10      	pop	{r4, pc}
 8007720:	080092d4 	.word	0x080092d4
 8007724:	08007649 	.word	0x08007649

08007728 <__sfp>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	4b1c      	ldr	r3, [pc, #112]	; (800779c <__sfp+0x74>)
 800772c:	681e      	ldr	r6, [r3, #0]
 800772e:	69b3      	ldr	r3, [r6, #24]
 8007730:	4607      	mov	r7, r0
 8007732:	b913      	cbnz	r3, 800773a <__sfp+0x12>
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff ffc7 	bl	80076c8 <__sinit>
 800773a:	3648      	adds	r6, #72	; 0x48
 800773c:	68b4      	ldr	r4, [r6, #8]
 800773e:	6873      	ldr	r3, [r6, #4]
 8007740:	3b01      	subs	r3, #1
 8007742:	d503      	bpl.n	800774c <__sfp+0x24>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	b133      	cbz	r3, 8007756 <__sfp+0x2e>
 8007748:	6836      	ldr	r6, [r6, #0]
 800774a:	e7f7      	b.n	800773c <__sfp+0x14>
 800774c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007750:	b16d      	cbz	r5, 800776e <__sfp+0x46>
 8007752:	3468      	adds	r4, #104	; 0x68
 8007754:	e7f4      	b.n	8007740 <__sfp+0x18>
 8007756:	2104      	movs	r1, #4
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff ff9f 	bl	800769c <__sfmoreglue>
 800775e:	6030      	str	r0, [r6, #0]
 8007760:	2800      	cmp	r0, #0
 8007762:	d1f1      	bne.n	8007748 <__sfp+0x20>
 8007764:	230c      	movs	r3, #12
 8007766:	603b      	str	r3, [r7, #0]
 8007768:	4604      	mov	r4, r0
 800776a:	4620      	mov	r0, r4
 800776c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800776e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007772:	81e3      	strh	r3, [r4, #14]
 8007774:	2301      	movs	r3, #1
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	6665      	str	r5, [r4, #100]	; 0x64
 800777a:	6025      	str	r5, [r4, #0]
 800777c:	60a5      	str	r5, [r4, #8]
 800777e:	6065      	str	r5, [r4, #4]
 8007780:	6125      	str	r5, [r4, #16]
 8007782:	6165      	str	r5, [r4, #20]
 8007784:	61a5      	str	r5, [r4, #24]
 8007786:	2208      	movs	r2, #8
 8007788:	4629      	mov	r1, r5
 800778a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800778e:	f7fe f9cd 	bl	8005b2c <memset>
 8007792:	6365      	str	r5, [r4, #52]	; 0x34
 8007794:	63a5      	str	r5, [r4, #56]	; 0x38
 8007796:	64a5      	str	r5, [r4, #72]	; 0x48
 8007798:	64e5      	str	r5, [r4, #76]	; 0x4c
 800779a:	e7e6      	b.n	800776a <__sfp+0x42>
 800779c:	080092d4 	.word	0x080092d4

080077a0 <_fwalk_reent>:
 80077a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	4680      	mov	r8, r0
 80077a6:	4689      	mov	r9, r1
 80077a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077ac:	2600      	movs	r6, #0
 80077ae:	b914      	cbnz	r4, 80077b6 <_fwalk_reent+0x16>
 80077b0:	4630      	mov	r0, r6
 80077b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b6:	68a5      	ldr	r5, [r4, #8]
 80077b8:	6867      	ldr	r7, [r4, #4]
 80077ba:	3f01      	subs	r7, #1
 80077bc:	d501      	bpl.n	80077c2 <_fwalk_reent+0x22>
 80077be:	6824      	ldr	r4, [r4, #0]
 80077c0:	e7f5      	b.n	80077ae <_fwalk_reent+0xe>
 80077c2:	89ab      	ldrh	r3, [r5, #12]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d907      	bls.n	80077d8 <_fwalk_reent+0x38>
 80077c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077cc:	3301      	adds	r3, #1
 80077ce:	d003      	beq.n	80077d8 <_fwalk_reent+0x38>
 80077d0:	4629      	mov	r1, r5
 80077d2:	4640      	mov	r0, r8
 80077d4:	47c8      	blx	r9
 80077d6:	4306      	orrs	r6, r0
 80077d8:	3568      	adds	r5, #104	; 0x68
 80077da:	e7ee      	b.n	80077ba <_fwalk_reent+0x1a>

080077dc <_localeconv_r>:
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <_localeconv_r+0x14>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6a18      	ldr	r0, [r3, #32]
 80077e2:	4b04      	ldr	r3, [pc, #16]	; (80077f4 <_localeconv_r+0x18>)
 80077e4:	2800      	cmp	r0, #0
 80077e6:	bf08      	it	eq
 80077e8:	4618      	moveq	r0, r3
 80077ea:	30f0      	adds	r0, #240	; 0xf0
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	2000000c 	.word	0x2000000c
 80077f4:	20000070 	.word	0x20000070

080077f8 <__swhatbuf_r>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	460e      	mov	r6, r1
 80077fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007800:	2900      	cmp	r1, #0
 8007802:	b090      	sub	sp, #64	; 0x40
 8007804:	4614      	mov	r4, r2
 8007806:	461d      	mov	r5, r3
 8007808:	da07      	bge.n	800781a <__swhatbuf_r+0x22>
 800780a:	2300      	movs	r3, #0
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	89b3      	ldrh	r3, [r6, #12]
 8007810:	061a      	lsls	r2, r3, #24
 8007812:	d410      	bmi.n	8007836 <__swhatbuf_r+0x3e>
 8007814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007818:	e00e      	b.n	8007838 <__swhatbuf_r+0x40>
 800781a:	aa01      	add	r2, sp, #4
 800781c:	f000 fcf2 	bl	8008204 <_fstat_r>
 8007820:	2800      	cmp	r0, #0
 8007822:	dbf2      	blt.n	800780a <__swhatbuf_r+0x12>
 8007824:	9a02      	ldr	r2, [sp, #8]
 8007826:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800782a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800782e:	425a      	negs	r2, r3
 8007830:	415a      	adcs	r2, r3
 8007832:	602a      	str	r2, [r5, #0]
 8007834:	e7ee      	b.n	8007814 <__swhatbuf_r+0x1c>
 8007836:	2340      	movs	r3, #64	; 0x40
 8007838:	2000      	movs	r0, #0
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	b010      	add	sp, #64	; 0x40
 800783e:	bd70      	pop	{r4, r5, r6, pc}

08007840 <__smakebuf_r>:
 8007840:	898b      	ldrh	r3, [r1, #12]
 8007842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007844:	079d      	lsls	r5, r3, #30
 8007846:	4606      	mov	r6, r0
 8007848:	460c      	mov	r4, r1
 800784a:	d507      	bpl.n	800785c <__smakebuf_r+0x1c>
 800784c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	2301      	movs	r3, #1
 8007856:	6163      	str	r3, [r4, #20]
 8007858:	b002      	add	sp, #8
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	ab01      	add	r3, sp, #4
 800785e:	466a      	mov	r2, sp
 8007860:	f7ff ffca 	bl	80077f8 <__swhatbuf_r>
 8007864:	9900      	ldr	r1, [sp, #0]
 8007866:	4605      	mov	r5, r0
 8007868:	4630      	mov	r0, r6
 800786a:	f7fe f9b5 	bl	8005bd8 <_malloc_r>
 800786e:	b948      	cbnz	r0, 8007884 <__smakebuf_r+0x44>
 8007870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007874:	059a      	lsls	r2, r3, #22
 8007876:	d4ef      	bmi.n	8007858 <__smakebuf_r+0x18>
 8007878:	f023 0303 	bic.w	r3, r3, #3
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	81a3      	strh	r3, [r4, #12]
 8007882:	e7e3      	b.n	800784c <__smakebuf_r+0xc>
 8007884:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <__smakebuf_r+0x7c>)
 8007886:	62b3      	str	r3, [r6, #40]	; 0x28
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	6020      	str	r0, [r4, #0]
 800788c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	9b00      	ldr	r3, [sp, #0]
 8007894:	6163      	str	r3, [r4, #20]
 8007896:	9b01      	ldr	r3, [sp, #4]
 8007898:	6120      	str	r0, [r4, #16]
 800789a:	b15b      	cbz	r3, 80078b4 <__smakebuf_r+0x74>
 800789c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a0:	4630      	mov	r0, r6
 80078a2:	f000 fcc1 	bl	8008228 <_isatty_r>
 80078a6:	b128      	cbz	r0, 80078b4 <__smakebuf_r+0x74>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	431d      	orrs	r5, r3
 80078b8:	81a5      	strh	r5, [r4, #12]
 80078ba:	e7cd      	b.n	8007858 <__smakebuf_r+0x18>
 80078bc:	08007649 	.word	0x08007649

080078c0 <memcpy>:
 80078c0:	b510      	push	{r4, lr}
 80078c2:	1e43      	subs	r3, r0, #1
 80078c4:	440a      	add	r2, r1
 80078c6:	4291      	cmp	r1, r2
 80078c8:	d100      	bne.n	80078cc <memcpy+0xc>
 80078ca:	bd10      	pop	{r4, pc}
 80078cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078d4:	e7f7      	b.n	80078c6 <memcpy+0x6>

080078d6 <__malloc_lock>:
 80078d6:	4770      	bx	lr

080078d8 <__malloc_unlock>:
 80078d8:	4770      	bx	lr

080078da <_Balloc>:
 80078da:	b570      	push	{r4, r5, r6, lr}
 80078dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078de:	4604      	mov	r4, r0
 80078e0:	460e      	mov	r6, r1
 80078e2:	b93d      	cbnz	r5, 80078f4 <_Balloc+0x1a>
 80078e4:	2010      	movs	r0, #16
 80078e6:	f7fe f919 	bl	8005b1c <malloc>
 80078ea:	6260      	str	r0, [r4, #36]	; 0x24
 80078ec:	6045      	str	r5, [r0, #4]
 80078ee:	6085      	str	r5, [r0, #8]
 80078f0:	6005      	str	r5, [r0, #0]
 80078f2:	60c5      	str	r5, [r0, #12]
 80078f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80078f6:	68eb      	ldr	r3, [r5, #12]
 80078f8:	b183      	cbz	r3, 800791c <_Balloc+0x42>
 80078fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007902:	b9b8      	cbnz	r0, 8007934 <_Balloc+0x5a>
 8007904:	2101      	movs	r1, #1
 8007906:	fa01 f506 	lsl.w	r5, r1, r6
 800790a:	1d6a      	adds	r2, r5, #5
 800790c:	0092      	lsls	r2, r2, #2
 800790e:	4620      	mov	r0, r4
 8007910:	f000 fab4 	bl	8007e7c <_calloc_r>
 8007914:	b160      	cbz	r0, 8007930 <_Balloc+0x56>
 8007916:	6046      	str	r6, [r0, #4]
 8007918:	6085      	str	r5, [r0, #8]
 800791a:	e00e      	b.n	800793a <_Balloc+0x60>
 800791c:	2221      	movs	r2, #33	; 0x21
 800791e:	2104      	movs	r1, #4
 8007920:	4620      	mov	r0, r4
 8007922:	f000 faab 	bl	8007e7c <_calloc_r>
 8007926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007928:	60e8      	str	r0, [r5, #12]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e4      	bne.n	80078fa <_Balloc+0x20>
 8007930:	2000      	movs	r0, #0
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	6802      	ldr	r2, [r0, #0]
 8007936:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800793a:	2300      	movs	r3, #0
 800793c:	6103      	str	r3, [r0, #16]
 800793e:	60c3      	str	r3, [r0, #12]
 8007940:	bd70      	pop	{r4, r5, r6, pc}

08007942 <_Bfree>:
 8007942:	b570      	push	{r4, r5, r6, lr}
 8007944:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007946:	4606      	mov	r6, r0
 8007948:	460d      	mov	r5, r1
 800794a:	b93c      	cbnz	r4, 800795c <_Bfree+0x1a>
 800794c:	2010      	movs	r0, #16
 800794e:	f7fe f8e5 	bl	8005b1c <malloc>
 8007952:	6270      	str	r0, [r6, #36]	; 0x24
 8007954:	6044      	str	r4, [r0, #4]
 8007956:	6084      	str	r4, [r0, #8]
 8007958:	6004      	str	r4, [r0, #0]
 800795a:	60c4      	str	r4, [r0, #12]
 800795c:	b13d      	cbz	r5, 800796e <_Bfree+0x2c>
 800795e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007960:	686a      	ldr	r2, [r5, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007968:	6029      	str	r1, [r5, #0]
 800796a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800796e:	bd70      	pop	{r4, r5, r6, pc}

08007970 <__multadd>:
 8007970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007974:	690d      	ldr	r5, [r1, #16]
 8007976:	461f      	mov	r7, r3
 8007978:	4606      	mov	r6, r0
 800797a:	460c      	mov	r4, r1
 800797c:	f101 0e14 	add.w	lr, r1, #20
 8007980:	2300      	movs	r3, #0
 8007982:	f8de 0000 	ldr.w	r0, [lr]
 8007986:	b281      	uxth	r1, r0
 8007988:	fb02 7101 	mla	r1, r2, r1, r7
 800798c:	0c0f      	lsrs	r7, r1, #16
 800798e:	0c00      	lsrs	r0, r0, #16
 8007990:	fb02 7000 	mla	r0, r2, r0, r7
 8007994:	b289      	uxth	r1, r1
 8007996:	3301      	adds	r3, #1
 8007998:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800799c:	429d      	cmp	r5, r3
 800799e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80079a2:	f84e 1b04 	str.w	r1, [lr], #4
 80079a6:	dcec      	bgt.n	8007982 <__multadd+0x12>
 80079a8:	b1d7      	cbz	r7, 80079e0 <__multadd+0x70>
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	429d      	cmp	r5, r3
 80079ae:	db12      	blt.n	80079d6 <__multadd+0x66>
 80079b0:	6861      	ldr	r1, [r4, #4]
 80079b2:	4630      	mov	r0, r6
 80079b4:	3101      	adds	r1, #1
 80079b6:	f7ff ff90 	bl	80078da <_Balloc>
 80079ba:	6922      	ldr	r2, [r4, #16]
 80079bc:	3202      	adds	r2, #2
 80079be:	f104 010c 	add.w	r1, r4, #12
 80079c2:	4680      	mov	r8, r0
 80079c4:	0092      	lsls	r2, r2, #2
 80079c6:	300c      	adds	r0, #12
 80079c8:	f7ff ff7a 	bl	80078c0 <memcpy>
 80079cc:	4621      	mov	r1, r4
 80079ce:	4630      	mov	r0, r6
 80079d0:	f7ff ffb7 	bl	8007942 <_Bfree>
 80079d4:	4644      	mov	r4, r8
 80079d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079da:	3501      	adds	r5, #1
 80079dc:	615f      	str	r7, [r3, #20]
 80079de:	6125      	str	r5, [r4, #16]
 80079e0:	4620      	mov	r0, r4
 80079e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079e6 <__hi0bits>:
 80079e6:	0c02      	lsrs	r2, r0, #16
 80079e8:	0412      	lsls	r2, r2, #16
 80079ea:	4603      	mov	r3, r0
 80079ec:	b9b2      	cbnz	r2, 8007a1c <__hi0bits+0x36>
 80079ee:	0403      	lsls	r3, r0, #16
 80079f0:	2010      	movs	r0, #16
 80079f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80079f6:	bf04      	itt	eq
 80079f8:	021b      	lsleq	r3, r3, #8
 80079fa:	3008      	addeq	r0, #8
 80079fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a00:	bf04      	itt	eq
 8007a02:	011b      	lsleq	r3, r3, #4
 8007a04:	3004      	addeq	r0, #4
 8007a06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a0a:	bf04      	itt	eq
 8007a0c:	009b      	lsleq	r3, r3, #2
 8007a0e:	3002      	addeq	r0, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	db06      	blt.n	8007a22 <__hi0bits+0x3c>
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	d503      	bpl.n	8007a20 <__hi0bits+0x3a>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	4770      	bx	lr
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e7e8      	b.n	80079f2 <__hi0bits+0xc>
 8007a20:	2020      	movs	r0, #32
 8007a22:	4770      	bx	lr

08007a24 <__lo0bits>:
 8007a24:	6803      	ldr	r3, [r0, #0]
 8007a26:	f013 0207 	ands.w	r2, r3, #7
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	d00b      	beq.n	8007a46 <__lo0bits+0x22>
 8007a2e:	07da      	lsls	r2, r3, #31
 8007a30:	d423      	bmi.n	8007a7a <__lo0bits+0x56>
 8007a32:	0798      	lsls	r0, r3, #30
 8007a34:	bf49      	itett	mi
 8007a36:	085b      	lsrmi	r3, r3, #1
 8007a38:	089b      	lsrpl	r3, r3, #2
 8007a3a:	2001      	movmi	r0, #1
 8007a3c:	600b      	strmi	r3, [r1, #0]
 8007a3e:	bf5c      	itt	pl
 8007a40:	600b      	strpl	r3, [r1, #0]
 8007a42:	2002      	movpl	r0, #2
 8007a44:	4770      	bx	lr
 8007a46:	b298      	uxth	r0, r3
 8007a48:	b9a8      	cbnz	r0, 8007a76 <__lo0bits+0x52>
 8007a4a:	0c1b      	lsrs	r3, r3, #16
 8007a4c:	2010      	movs	r0, #16
 8007a4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a52:	bf04      	itt	eq
 8007a54:	0a1b      	lsreq	r3, r3, #8
 8007a56:	3008      	addeq	r0, #8
 8007a58:	071a      	lsls	r2, r3, #28
 8007a5a:	bf04      	itt	eq
 8007a5c:	091b      	lsreq	r3, r3, #4
 8007a5e:	3004      	addeq	r0, #4
 8007a60:	079a      	lsls	r2, r3, #30
 8007a62:	bf04      	itt	eq
 8007a64:	089b      	lsreq	r3, r3, #2
 8007a66:	3002      	addeq	r0, #2
 8007a68:	07da      	lsls	r2, r3, #31
 8007a6a:	d402      	bmi.n	8007a72 <__lo0bits+0x4e>
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	d006      	beq.n	8007a7e <__lo0bits+0x5a>
 8007a70:	3001      	adds	r0, #1
 8007a72:	600b      	str	r3, [r1, #0]
 8007a74:	4770      	bx	lr
 8007a76:	4610      	mov	r0, r2
 8007a78:	e7e9      	b.n	8007a4e <__lo0bits+0x2a>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	4770      	bx	lr
 8007a7e:	2020      	movs	r0, #32
 8007a80:	4770      	bx	lr

08007a82 <__i2b>:
 8007a82:	b510      	push	{r4, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	2101      	movs	r1, #1
 8007a88:	f7ff ff27 	bl	80078da <_Balloc>
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	6144      	str	r4, [r0, #20]
 8007a90:	6102      	str	r2, [r0, #16]
 8007a92:	bd10      	pop	{r4, pc}

08007a94 <__multiply>:
 8007a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	4614      	mov	r4, r2
 8007a9a:	690a      	ldr	r2, [r1, #16]
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	bfb8      	it	lt
 8007aa2:	460b      	movlt	r3, r1
 8007aa4:	4689      	mov	r9, r1
 8007aa6:	bfbc      	itt	lt
 8007aa8:	46a1      	movlt	r9, r4
 8007aaa:	461c      	movlt	r4, r3
 8007aac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ab0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ab4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007ab8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007abc:	eb07 060a 	add.w	r6, r7, sl
 8007ac0:	429e      	cmp	r6, r3
 8007ac2:	bfc8      	it	gt
 8007ac4:	3101      	addgt	r1, #1
 8007ac6:	f7ff ff08 	bl	80078da <_Balloc>
 8007aca:	f100 0514 	add.w	r5, r0, #20
 8007ace:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4543      	cmp	r3, r8
 8007ad8:	d316      	bcc.n	8007b08 <__multiply+0x74>
 8007ada:	f104 0214 	add.w	r2, r4, #20
 8007ade:	f109 0114 	add.w	r1, r9, #20
 8007ae2:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007ae6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	9c01      	ldr	r4, [sp, #4]
 8007aee:	4294      	cmp	r4, r2
 8007af0:	4613      	mov	r3, r2
 8007af2:	d80c      	bhi.n	8007b0e <__multiply+0x7a>
 8007af4:	2e00      	cmp	r6, #0
 8007af6:	dd03      	ble.n	8007b00 <__multiply+0x6c>
 8007af8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d054      	beq.n	8007baa <__multiply+0x116>
 8007b00:	6106      	str	r6, [r0, #16]
 8007b02:	b003      	add	sp, #12
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	f843 2b04 	str.w	r2, [r3], #4
 8007b0c:	e7e3      	b.n	8007ad6 <__multiply+0x42>
 8007b0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b12:	3204      	adds	r2, #4
 8007b14:	f1ba 0f00 	cmp.w	sl, #0
 8007b18:	d020      	beq.n	8007b5c <__multiply+0xc8>
 8007b1a:	46ae      	mov	lr, r5
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	f04f 0c00 	mov.w	ip, #0
 8007b22:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b26:	f8be b000 	ldrh.w	fp, [lr]
 8007b2a:	b2a3      	uxth	r3, r4
 8007b2c:	fb0a b303 	mla	r3, sl, r3, fp
 8007b30:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007b34:	f8de 4000 	ldr.w	r4, [lr]
 8007b38:	4463      	add	r3, ip
 8007b3a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007b3e:	fb0a c40b 	mla	r4, sl, fp, ip
 8007b42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b4c:	454f      	cmp	r7, r9
 8007b4e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007b52:	f84e 3b04 	str.w	r3, [lr], #4
 8007b56:	d8e4      	bhi.n	8007b22 <__multiply+0x8e>
 8007b58:	f8ce c000 	str.w	ip, [lr]
 8007b5c:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007b60:	f1b9 0f00 	cmp.w	r9, #0
 8007b64:	d01f      	beq.n	8007ba6 <__multiply+0x112>
 8007b66:	682b      	ldr	r3, [r5, #0]
 8007b68:	46ae      	mov	lr, r5
 8007b6a:	468c      	mov	ip, r1
 8007b6c:	f04f 0a00 	mov.w	sl, #0
 8007b70:	f8bc 4000 	ldrh.w	r4, [ip]
 8007b74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007b78:	fb09 b404 	mla	r4, r9, r4, fp
 8007b7c:	44a2      	add	sl, r4
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007b84:	f84e 3b04 	str.w	r3, [lr], #4
 8007b88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b8c:	f8be 4000 	ldrh.w	r4, [lr]
 8007b90:	0c1b      	lsrs	r3, r3, #16
 8007b92:	fb09 4303 	mla	r3, r9, r3, r4
 8007b96:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007b9a:	4567      	cmp	r7, ip
 8007b9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ba0:	d8e6      	bhi.n	8007b70 <__multiply+0xdc>
 8007ba2:	f8ce 3000 	str.w	r3, [lr]
 8007ba6:	3504      	adds	r5, #4
 8007ba8:	e7a0      	b.n	8007aec <__multiply+0x58>
 8007baa:	3e01      	subs	r6, #1
 8007bac:	e7a2      	b.n	8007af4 <__multiply+0x60>
	...

08007bb0 <__pow5mult>:
 8007bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb4:	4615      	mov	r5, r2
 8007bb6:	f012 0203 	ands.w	r2, r2, #3
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	d007      	beq.n	8007bd0 <__pow5mult+0x20>
 8007bc0:	3a01      	subs	r2, #1
 8007bc2:	4c21      	ldr	r4, [pc, #132]	; (8007c48 <__pow5mult+0x98>)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bca:	f7ff fed1 	bl	8007970 <__multadd>
 8007bce:	4607      	mov	r7, r0
 8007bd0:	10ad      	asrs	r5, r5, #2
 8007bd2:	d035      	beq.n	8007c40 <__pow5mult+0x90>
 8007bd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007bd6:	b93c      	cbnz	r4, 8007be8 <__pow5mult+0x38>
 8007bd8:	2010      	movs	r0, #16
 8007bda:	f7fd ff9f 	bl	8005b1c <malloc>
 8007bde:	6270      	str	r0, [r6, #36]	; 0x24
 8007be0:	6044      	str	r4, [r0, #4]
 8007be2:	6084      	str	r4, [r0, #8]
 8007be4:	6004      	str	r4, [r0, #0]
 8007be6:	60c4      	str	r4, [r0, #12]
 8007be8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bf0:	b94c      	cbnz	r4, 8007c06 <__pow5mult+0x56>
 8007bf2:	f240 2171 	movw	r1, #625	; 0x271
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f7ff ff43 	bl	8007a82 <__i2b>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c02:	4604      	mov	r4, r0
 8007c04:	6003      	str	r3, [r0, #0]
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	07eb      	lsls	r3, r5, #31
 8007c0c:	d50a      	bpl.n	8007c24 <__pow5mult+0x74>
 8007c0e:	4639      	mov	r1, r7
 8007c10:	4622      	mov	r2, r4
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ff3e 	bl	8007a94 <__multiply>
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4681      	mov	r9, r0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7ff fe90 	bl	8007942 <_Bfree>
 8007c22:	464f      	mov	r7, r9
 8007c24:	106d      	asrs	r5, r5, #1
 8007c26:	d00b      	beq.n	8007c40 <__pow5mult+0x90>
 8007c28:	6820      	ldr	r0, [r4, #0]
 8007c2a:	b938      	cbnz	r0, 8007c3c <__pow5mult+0x8c>
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff ff2f 	bl	8007a94 <__multiply>
 8007c36:	6020      	str	r0, [r4, #0]
 8007c38:	f8c0 8000 	str.w	r8, [r0]
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	e7e4      	b.n	8007c0a <__pow5mult+0x5a>
 8007c40:	4638      	mov	r0, r7
 8007c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c46:	bf00      	nop
 8007c48:	08009470 	.word	0x08009470

08007c4c <__lshift>:
 8007c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c50:	460c      	mov	r4, r1
 8007c52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	6849      	ldr	r1, [r1, #4]
 8007c5a:	eb0a 0903 	add.w	r9, sl, r3
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	4607      	mov	r7, r0
 8007c62:	4616      	mov	r6, r2
 8007c64:	f109 0501 	add.w	r5, r9, #1
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	db31      	blt.n	8007cd0 <__lshift+0x84>
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f7ff fe34 	bl	80078da <_Balloc>
 8007c72:	2200      	movs	r2, #0
 8007c74:	4680      	mov	r8, r0
 8007c76:	f100 0314 	add.w	r3, r0, #20
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4552      	cmp	r2, sl
 8007c7e:	db2a      	blt.n	8007cd6 <__lshift+0x8a>
 8007c80:	6920      	ldr	r0, [r4, #16]
 8007c82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c86:	f104 0114 	add.w	r1, r4, #20
 8007c8a:	f016 021f 	ands.w	r2, r6, #31
 8007c8e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007c92:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007c96:	d022      	beq.n	8007cde <__lshift+0x92>
 8007c98:	f1c2 0c20 	rsb	ip, r2, #32
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	680e      	ldr	r6, [r1, #0]
 8007ca0:	4096      	lsls	r6, r2
 8007ca2:	4330      	orrs	r0, r6
 8007ca4:	f843 0b04 	str.w	r0, [r3], #4
 8007ca8:	f851 0b04 	ldr.w	r0, [r1], #4
 8007cac:	458e      	cmp	lr, r1
 8007cae:	fa20 f00c 	lsr.w	r0, r0, ip
 8007cb2:	d8f4      	bhi.n	8007c9e <__lshift+0x52>
 8007cb4:	6018      	str	r0, [r3, #0]
 8007cb6:	b108      	cbz	r0, 8007cbc <__lshift+0x70>
 8007cb8:	f109 0502 	add.w	r5, r9, #2
 8007cbc:	3d01      	subs	r5, #1
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f8c8 5010 	str.w	r5, [r8, #16]
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	f7ff fe3c 	bl	8007942 <_Bfree>
 8007cca:	4640      	mov	r0, r8
 8007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd0:	3101      	adds	r1, #1
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	e7c8      	b.n	8007c68 <__lshift+0x1c>
 8007cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007cda:	3201      	adds	r2, #1
 8007cdc:	e7ce      	b.n	8007c7c <__lshift+0x30>
 8007cde:	3b04      	subs	r3, #4
 8007ce0:	f851 2b04 	ldr.w	r2, [r1], #4
 8007ce4:	f843 2f04 	str.w	r2, [r3, #4]!
 8007ce8:	458e      	cmp	lr, r1
 8007cea:	d8f9      	bhi.n	8007ce0 <__lshift+0x94>
 8007cec:	e7e6      	b.n	8007cbc <__lshift+0x70>

08007cee <__mcmp>:
 8007cee:	6903      	ldr	r3, [r0, #16]
 8007cf0:	690a      	ldr	r2, [r1, #16]
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	b530      	push	{r4, r5, lr}
 8007cf6:	d10c      	bne.n	8007d12 <__mcmp+0x24>
 8007cf8:	0092      	lsls	r2, r2, #2
 8007cfa:	3014      	adds	r0, #20
 8007cfc:	3114      	adds	r1, #20
 8007cfe:	1884      	adds	r4, r0, r2
 8007d00:	4411      	add	r1, r2
 8007d02:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d06:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d0a:	4295      	cmp	r5, r2
 8007d0c:	d003      	beq.n	8007d16 <__mcmp+0x28>
 8007d0e:	d305      	bcc.n	8007d1c <__mcmp+0x2e>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4618      	mov	r0, r3
 8007d14:	bd30      	pop	{r4, r5, pc}
 8007d16:	42a0      	cmp	r0, r4
 8007d18:	d3f3      	bcc.n	8007d02 <__mcmp+0x14>
 8007d1a:	e7fa      	b.n	8007d12 <__mcmp+0x24>
 8007d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d20:	e7f7      	b.n	8007d12 <__mcmp+0x24>

08007d22 <__mdiff>:
 8007d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d26:	460d      	mov	r5, r1
 8007d28:	4607      	mov	r7, r0
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	4614      	mov	r4, r2
 8007d30:	f7ff ffdd 	bl	8007cee <__mcmp>
 8007d34:	1e06      	subs	r6, r0, #0
 8007d36:	d108      	bne.n	8007d4a <__mdiff+0x28>
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7ff fdcd 	bl	80078da <_Balloc>
 8007d40:	2301      	movs	r3, #1
 8007d42:	6103      	str	r3, [r0, #16]
 8007d44:	6146      	str	r6, [r0, #20]
 8007d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4a:	bfa4      	itt	ge
 8007d4c:	4623      	movge	r3, r4
 8007d4e:	462c      	movge	r4, r5
 8007d50:	4638      	mov	r0, r7
 8007d52:	6861      	ldr	r1, [r4, #4]
 8007d54:	bfa6      	itte	ge
 8007d56:	461d      	movge	r5, r3
 8007d58:	2600      	movge	r6, #0
 8007d5a:	2601      	movlt	r6, #1
 8007d5c:	f7ff fdbd 	bl	80078da <_Balloc>
 8007d60:	692b      	ldr	r3, [r5, #16]
 8007d62:	60c6      	str	r6, [r0, #12]
 8007d64:	6926      	ldr	r6, [r4, #16]
 8007d66:	f105 0914 	add.w	r9, r5, #20
 8007d6a:	f104 0214 	add.w	r2, r4, #20
 8007d6e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007d72:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007d76:	f100 0514 	add.w	r5, r0, #20
 8007d7a:	f04f 0c00 	mov.w	ip, #0
 8007d7e:	f852 ab04 	ldr.w	sl, [r2], #4
 8007d82:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d86:	fa1c f18a 	uxtah	r1, ip, sl
 8007d8a:	b2a3      	uxth	r3, r4
 8007d8c:	1ac9      	subs	r1, r1, r3
 8007d8e:	0c23      	lsrs	r3, r4, #16
 8007d90:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007d94:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d98:	b289      	uxth	r1, r1
 8007d9a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d9e:	45c8      	cmp	r8, r9
 8007da0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007da4:	4696      	mov	lr, r2
 8007da6:	f845 3b04 	str.w	r3, [r5], #4
 8007daa:	d8e8      	bhi.n	8007d7e <__mdiff+0x5c>
 8007dac:	45be      	cmp	lr, r7
 8007dae:	d305      	bcc.n	8007dbc <__mdiff+0x9a>
 8007db0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007db4:	b18b      	cbz	r3, 8007dda <__mdiff+0xb8>
 8007db6:	6106      	str	r6, [r0, #16]
 8007db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dbc:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007dc0:	fa1c f381 	uxtah	r3, ip, r1
 8007dc4:	141a      	asrs	r2, r3, #16
 8007dc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dd4:	f845 3b04 	str.w	r3, [r5], #4
 8007dd8:	e7e8      	b.n	8007dac <__mdiff+0x8a>
 8007dda:	3e01      	subs	r6, #1
 8007ddc:	e7e8      	b.n	8007db0 <__mdiff+0x8e>

08007dde <__d2b>:
 8007dde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007de2:	460e      	mov	r6, r1
 8007de4:	2101      	movs	r1, #1
 8007de6:	ec59 8b10 	vmov	r8, r9, d0
 8007dea:	4615      	mov	r5, r2
 8007dec:	f7ff fd75 	bl	80078da <_Balloc>
 8007df0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007df4:	4607      	mov	r7, r0
 8007df6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dfa:	bb34      	cbnz	r4, 8007e4a <__d2b+0x6c>
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	f1b8 0f00 	cmp.w	r8, #0
 8007e02:	d027      	beq.n	8007e54 <__d2b+0x76>
 8007e04:	a802      	add	r0, sp, #8
 8007e06:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007e0a:	f7ff fe0b 	bl	8007a24 <__lo0bits>
 8007e0e:	9900      	ldr	r1, [sp, #0]
 8007e10:	b1f0      	cbz	r0, 8007e50 <__d2b+0x72>
 8007e12:	9a01      	ldr	r2, [sp, #4]
 8007e14:	f1c0 0320 	rsb	r3, r0, #32
 8007e18:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	40c2      	lsrs	r2, r0
 8007e20:	617b      	str	r3, [r7, #20]
 8007e22:	9201      	str	r2, [sp, #4]
 8007e24:	9b01      	ldr	r3, [sp, #4]
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bf14      	ite	ne
 8007e2c:	2102      	movne	r1, #2
 8007e2e:	2101      	moveq	r1, #1
 8007e30:	6139      	str	r1, [r7, #16]
 8007e32:	b1c4      	cbz	r4, 8007e66 <__d2b+0x88>
 8007e34:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e38:	4404      	add	r4, r0
 8007e3a:	6034      	str	r4, [r6, #0]
 8007e3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e40:	6028      	str	r0, [r5, #0]
 8007e42:	4638      	mov	r0, r7
 8007e44:	b003      	add	sp, #12
 8007e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e4e:	e7d5      	b.n	8007dfc <__d2b+0x1e>
 8007e50:	6179      	str	r1, [r7, #20]
 8007e52:	e7e7      	b.n	8007e24 <__d2b+0x46>
 8007e54:	a801      	add	r0, sp, #4
 8007e56:	f7ff fde5 	bl	8007a24 <__lo0bits>
 8007e5a:	9b01      	ldr	r3, [sp, #4]
 8007e5c:	617b      	str	r3, [r7, #20]
 8007e5e:	2101      	movs	r1, #1
 8007e60:	6139      	str	r1, [r7, #16]
 8007e62:	3020      	adds	r0, #32
 8007e64:	e7e5      	b.n	8007e32 <__d2b+0x54>
 8007e66:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007e6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e6e:	6030      	str	r0, [r6, #0]
 8007e70:	6918      	ldr	r0, [r3, #16]
 8007e72:	f7ff fdb8 	bl	80079e6 <__hi0bits>
 8007e76:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e7a:	e7e1      	b.n	8007e40 <__d2b+0x62>

08007e7c <_calloc_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	fb02 f401 	mul.w	r4, r2, r1
 8007e82:	4621      	mov	r1, r4
 8007e84:	f7fd fea8 	bl	8005bd8 <_malloc_r>
 8007e88:	4605      	mov	r5, r0
 8007e8a:	b118      	cbz	r0, 8007e94 <_calloc_r+0x18>
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f7fd fe4c 	bl	8005b2c <memset>
 8007e94:	4628      	mov	r0, r5
 8007e96:	bd38      	pop	{r3, r4, r5, pc}

08007e98 <__ssputs_r>:
 8007e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	688e      	ldr	r6, [r1, #8]
 8007e9e:	429e      	cmp	r6, r3
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	4691      	mov	r9, r2
 8007ea6:	4698      	mov	r8, r3
 8007ea8:	d835      	bhi.n	8007f16 <__ssputs_r+0x7e>
 8007eaa:	898a      	ldrh	r2, [r1, #12]
 8007eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eb0:	d031      	beq.n	8007f16 <__ssputs_r+0x7e>
 8007eb2:	6825      	ldr	r5, [r4, #0]
 8007eb4:	6909      	ldr	r1, [r1, #16]
 8007eb6:	1a6f      	subs	r7, r5, r1
 8007eb8:	6965      	ldr	r5, [r4, #20]
 8007eba:	2302      	movs	r3, #2
 8007ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec0:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ec4:	f108 0301 	add.w	r3, r8, #1
 8007ec8:	443b      	add	r3, r7
 8007eca:	429d      	cmp	r5, r3
 8007ecc:	bf38      	it	cc
 8007ece:	461d      	movcc	r5, r3
 8007ed0:	0553      	lsls	r3, r2, #21
 8007ed2:	d531      	bpl.n	8007f38 <__ssputs_r+0xa0>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7fd fe7f 	bl	8005bd8 <_malloc_r>
 8007eda:	4606      	mov	r6, r0
 8007edc:	b950      	cbnz	r0, 8007ef4 <__ssputs_r+0x5c>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	f8ca 3000 	str.w	r3, [sl]
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef4:	463a      	mov	r2, r7
 8007ef6:	6921      	ldr	r1, [r4, #16]
 8007ef8:	f7ff fce2 	bl	80078c0 <memcpy>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	6126      	str	r6, [r4, #16]
 8007f0a:	6165      	str	r5, [r4, #20]
 8007f0c:	443e      	add	r6, r7
 8007f0e:	1bed      	subs	r5, r5, r7
 8007f10:	6026      	str	r6, [r4, #0]
 8007f12:	60a5      	str	r5, [r4, #8]
 8007f14:	4646      	mov	r6, r8
 8007f16:	4546      	cmp	r6, r8
 8007f18:	bf28      	it	cs
 8007f1a:	4646      	movcs	r6, r8
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4649      	mov	r1, r9
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	f000 f9b5 	bl	8008290 <memmove>
 8007f26:	68a3      	ldr	r3, [r4, #8]
 8007f28:	1b9b      	subs	r3, r3, r6
 8007f2a:	60a3      	str	r3, [r4, #8]
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	441e      	add	r6, r3
 8007f30:	6026      	str	r6, [r4, #0]
 8007f32:	2000      	movs	r0, #0
 8007f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f38:	462a      	mov	r2, r5
 8007f3a:	f000 f9c3 	bl	80082c4 <_realloc_r>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1e1      	bne.n	8007f08 <__ssputs_r+0x70>
 8007f44:	6921      	ldr	r1, [r4, #16]
 8007f46:	4650      	mov	r0, sl
 8007f48:	f7fd fdf8 	bl	8005b3c <_free_r>
 8007f4c:	e7c7      	b.n	8007ede <__ssputs_r+0x46>
	...

08007f50 <_svfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	b09d      	sub	sp, #116	; 0x74
 8007f56:	4680      	mov	r8, r0
 8007f58:	9303      	str	r3, [sp, #12]
 8007f5a:	898b      	ldrh	r3, [r1, #12]
 8007f5c:	061c      	lsls	r4, r3, #24
 8007f5e:	460d      	mov	r5, r1
 8007f60:	4616      	mov	r6, r2
 8007f62:	d50f      	bpl.n	8007f84 <_svfiprintf_r+0x34>
 8007f64:	690b      	ldr	r3, [r1, #16]
 8007f66:	b96b      	cbnz	r3, 8007f84 <_svfiprintf_r+0x34>
 8007f68:	2140      	movs	r1, #64	; 0x40
 8007f6a:	f7fd fe35 	bl	8005bd8 <_malloc_r>
 8007f6e:	6028      	str	r0, [r5, #0]
 8007f70:	6128      	str	r0, [r5, #16]
 8007f72:	b928      	cbnz	r0, 8007f80 <_svfiprintf_r+0x30>
 8007f74:	230c      	movs	r3, #12
 8007f76:	f8c8 3000 	str.w	r3, [r8]
 8007f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7e:	e0c5      	b.n	800810c <_svfiprintf_r+0x1bc>
 8007f80:	2340      	movs	r3, #64	; 0x40
 8007f82:	616b      	str	r3, [r5, #20]
 8007f84:	2300      	movs	r3, #0
 8007f86:	9309      	str	r3, [sp, #36]	; 0x24
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f8e:	2330      	movs	r3, #48	; 0x30
 8007f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f94:	f04f 0b01 	mov.w	fp, #1
 8007f98:	4637      	mov	r7, r6
 8007f9a:	463c      	mov	r4, r7
 8007f9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d13c      	bne.n	800801e <_svfiprintf_r+0xce>
 8007fa4:	ebb7 0a06 	subs.w	sl, r7, r6
 8007fa8:	d00b      	beq.n	8007fc2 <_svfiprintf_r+0x72>
 8007faa:	4653      	mov	r3, sl
 8007fac:	4632      	mov	r2, r6
 8007fae:	4629      	mov	r1, r5
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	f7ff ff71 	bl	8007e98 <__ssputs_r>
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f000 80a3 	beq.w	8008102 <_svfiprintf_r+0x1b2>
 8007fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbe:	4453      	add	r3, sl
 8007fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc2:	783b      	ldrb	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 809c 	beq.w	8008102 <_svfiprintf_r+0x1b2>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd0:	9304      	str	r3, [sp, #16]
 8007fd2:	9307      	str	r3, [sp, #28]
 8007fd4:	9205      	str	r2, [sp, #20]
 8007fd6:	9306      	str	r3, [sp, #24]
 8007fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8007fde:	2205      	movs	r2, #5
 8007fe0:	7821      	ldrb	r1, [r4, #0]
 8007fe2:	4850      	ldr	r0, [pc, #320]	; (8008124 <_svfiprintf_r+0x1d4>)
 8007fe4:	f7f8 f8fc 	bl	80001e0 <memchr>
 8007fe8:	1c67      	adds	r7, r4, #1
 8007fea:	9b04      	ldr	r3, [sp, #16]
 8007fec:	b9d8      	cbnz	r0, 8008026 <_svfiprintf_r+0xd6>
 8007fee:	06d9      	lsls	r1, r3, #27
 8007ff0:	bf44      	itt	mi
 8007ff2:	2220      	movmi	r2, #32
 8007ff4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ff8:	071a      	lsls	r2, r3, #28
 8007ffa:	bf44      	itt	mi
 8007ffc:	222b      	movmi	r2, #43	; 0x2b
 8007ffe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008002:	7822      	ldrb	r2, [r4, #0]
 8008004:	2a2a      	cmp	r2, #42	; 0x2a
 8008006:	d016      	beq.n	8008036 <_svfiprintf_r+0xe6>
 8008008:	9a07      	ldr	r2, [sp, #28]
 800800a:	2100      	movs	r1, #0
 800800c:	200a      	movs	r0, #10
 800800e:	4627      	mov	r7, r4
 8008010:	3401      	adds	r4, #1
 8008012:	783b      	ldrb	r3, [r7, #0]
 8008014:	3b30      	subs	r3, #48	; 0x30
 8008016:	2b09      	cmp	r3, #9
 8008018:	d951      	bls.n	80080be <_svfiprintf_r+0x16e>
 800801a:	b1c9      	cbz	r1, 8008050 <_svfiprintf_r+0x100>
 800801c:	e011      	b.n	8008042 <_svfiprintf_r+0xf2>
 800801e:	2b25      	cmp	r3, #37	; 0x25
 8008020:	d0c0      	beq.n	8007fa4 <_svfiprintf_r+0x54>
 8008022:	4627      	mov	r7, r4
 8008024:	e7b9      	b.n	8007f9a <_svfiprintf_r+0x4a>
 8008026:	4a3f      	ldr	r2, [pc, #252]	; (8008124 <_svfiprintf_r+0x1d4>)
 8008028:	1a80      	subs	r0, r0, r2
 800802a:	fa0b f000 	lsl.w	r0, fp, r0
 800802e:	4318      	orrs	r0, r3
 8008030:	9004      	str	r0, [sp, #16]
 8008032:	463c      	mov	r4, r7
 8008034:	e7d3      	b.n	8007fde <_svfiprintf_r+0x8e>
 8008036:	9a03      	ldr	r2, [sp, #12]
 8008038:	1d11      	adds	r1, r2, #4
 800803a:	6812      	ldr	r2, [r2, #0]
 800803c:	9103      	str	r1, [sp, #12]
 800803e:	2a00      	cmp	r2, #0
 8008040:	db01      	blt.n	8008046 <_svfiprintf_r+0xf6>
 8008042:	9207      	str	r2, [sp, #28]
 8008044:	e004      	b.n	8008050 <_svfiprintf_r+0x100>
 8008046:	4252      	negs	r2, r2
 8008048:	f043 0302 	orr.w	r3, r3, #2
 800804c:	9207      	str	r2, [sp, #28]
 800804e:	9304      	str	r3, [sp, #16]
 8008050:	783b      	ldrb	r3, [r7, #0]
 8008052:	2b2e      	cmp	r3, #46	; 0x2e
 8008054:	d10e      	bne.n	8008074 <_svfiprintf_r+0x124>
 8008056:	787b      	ldrb	r3, [r7, #1]
 8008058:	2b2a      	cmp	r3, #42	; 0x2a
 800805a:	f107 0101 	add.w	r1, r7, #1
 800805e:	d132      	bne.n	80080c6 <_svfiprintf_r+0x176>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	1d1a      	adds	r2, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	9203      	str	r2, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfb8      	it	lt
 800806c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008070:	3702      	adds	r7, #2
 8008072:	9305      	str	r3, [sp, #20]
 8008074:	4c2c      	ldr	r4, [pc, #176]	; (8008128 <_svfiprintf_r+0x1d8>)
 8008076:	7839      	ldrb	r1, [r7, #0]
 8008078:	2203      	movs	r2, #3
 800807a:	4620      	mov	r0, r4
 800807c:	f7f8 f8b0 	bl	80001e0 <memchr>
 8008080:	b138      	cbz	r0, 8008092 <_svfiprintf_r+0x142>
 8008082:	2340      	movs	r3, #64	; 0x40
 8008084:	1b00      	subs	r0, r0, r4
 8008086:	fa03 f000 	lsl.w	r0, r3, r0
 800808a:	9b04      	ldr	r3, [sp, #16]
 800808c:	4303      	orrs	r3, r0
 800808e:	9304      	str	r3, [sp, #16]
 8008090:	3701      	adds	r7, #1
 8008092:	7839      	ldrb	r1, [r7, #0]
 8008094:	4825      	ldr	r0, [pc, #148]	; (800812c <_svfiprintf_r+0x1dc>)
 8008096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800809a:	2206      	movs	r2, #6
 800809c:	1c7e      	adds	r6, r7, #1
 800809e:	f7f8 f89f 	bl	80001e0 <memchr>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d035      	beq.n	8008112 <_svfiprintf_r+0x1c2>
 80080a6:	4b22      	ldr	r3, [pc, #136]	; (8008130 <_svfiprintf_r+0x1e0>)
 80080a8:	b9fb      	cbnz	r3, 80080ea <_svfiprintf_r+0x19a>
 80080aa:	9b03      	ldr	r3, [sp, #12]
 80080ac:	3307      	adds	r3, #7
 80080ae:	f023 0307 	bic.w	r3, r3, #7
 80080b2:	3308      	adds	r3, #8
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	444b      	add	r3, r9
 80080ba:	9309      	str	r3, [sp, #36]	; 0x24
 80080bc:	e76c      	b.n	8007f98 <_svfiprintf_r+0x48>
 80080be:	fb00 3202 	mla	r2, r0, r2, r3
 80080c2:	2101      	movs	r1, #1
 80080c4:	e7a3      	b.n	800800e <_svfiprintf_r+0xbe>
 80080c6:	2300      	movs	r3, #0
 80080c8:	9305      	str	r3, [sp, #20]
 80080ca:	4618      	mov	r0, r3
 80080cc:	240a      	movs	r4, #10
 80080ce:	460f      	mov	r7, r1
 80080d0:	3101      	adds	r1, #1
 80080d2:	783a      	ldrb	r2, [r7, #0]
 80080d4:	3a30      	subs	r2, #48	; 0x30
 80080d6:	2a09      	cmp	r2, #9
 80080d8:	d903      	bls.n	80080e2 <_svfiprintf_r+0x192>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0ca      	beq.n	8008074 <_svfiprintf_r+0x124>
 80080de:	9005      	str	r0, [sp, #20]
 80080e0:	e7c8      	b.n	8008074 <_svfiprintf_r+0x124>
 80080e2:	fb04 2000 	mla	r0, r4, r0, r2
 80080e6:	2301      	movs	r3, #1
 80080e8:	e7f1      	b.n	80080ce <_svfiprintf_r+0x17e>
 80080ea:	ab03      	add	r3, sp, #12
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	462a      	mov	r2, r5
 80080f0:	4b10      	ldr	r3, [pc, #64]	; (8008134 <_svfiprintf_r+0x1e4>)
 80080f2:	a904      	add	r1, sp, #16
 80080f4:	4640      	mov	r0, r8
 80080f6:	f7fd fe63 	bl	8005dc0 <_printf_float>
 80080fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80080fe:	4681      	mov	r9, r0
 8008100:	d1d9      	bne.n	80080b6 <_svfiprintf_r+0x166>
 8008102:	89ab      	ldrh	r3, [r5, #12]
 8008104:	065b      	lsls	r3, r3, #25
 8008106:	f53f af38 	bmi.w	8007f7a <_svfiprintf_r+0x2a>
 800810a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800810c:	b01d      	add	sp, #116	; 0x74
 800810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008112:	ab03      	add	r3, sp, #12
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	462a      	mov	r2, r5
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <_svfiprintf_r+0x1e4>)
 800811a:	a904      	add	r1, sp, #16
 800811c:	4640      	mov	r0, r8
 800811e:	f7fe f905 	bl	800632c <_printf_i>
 8008122:	e7ea      	b.n	80080fa <_svfiprintf_r+0x1aa>
 8008124:	0800947c 	.word	0x0800947c
 8008128:	08009482 	.word	0x08009482
 800812c:	08009486 	.word	0x08009486
 8008130:	08005dc1 	.word	0x08005dc1
 8008134:	08007e99 	.word	0x08007e99

08008138 <__sread>:
 8008138:	b510      	push	{r4, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008140:	f000 f8e6 	bl	8008310 <_read_r>
 8008144:	2800      	cmp	r0, #0
 8008146:	bfab      	itete	ge
 8008148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800814a:	89a3      	ldrhlt	r3, [r4, #12]
 800814c:	181b      	addge	r3, r3, r0
 800814e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008152:	bfac      	ite	ge
 8008154:	6563      	strge	r3, [r4, #84]	; 0x54
 8008156:	81a3      	strhlt	r3, [r4, #12]
 8008158:	bd10      	pop	{r4, pc}

0800815a <__swrite>:
 800815a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	461f      	mov	r7, r3
 8008160:	898b      	ldrh	r3, [r1, #12]
 8008162:	05db      	lsls	r3, r3, #23
 8008164:	4605      	mov	r5, r0
 8008166:	460c      	mov	r4, r1
 8008168:	4616      	mov	r6, r2
 800816a:	d505      	bpl.n	8008178 <__swrite+0x1e>
 800816c:	2302      	movs	r3, #2
 800816e:	2200      	movs	r2, #0
 8008170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008174:	f000 f868 	bl	8008248 <_lseek_r>
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800817e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008182:	81a3      	strh	r3, [r4, #12]
 8008184:	4632      	mov	r2, r6
 8008186:	463b      	mov	r3, r7
 8008188:	4628      	mov	r0, r5
 800818a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800818e:	f000 b817 	b.w	80081c0 <_write_r>

08008192 <__sseek>:
 8008192:	b510      	push	{r4, lr}
 8008194:	460c      	mov	r4, r1
 8008196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819a:	f000 f855 	bl	8008248 <_lseek_r>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	bf15      	itete	ne
 80081a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80081a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081ae:	81a3      	strheq	r3, [r4, #12]
 80081b0:	bf18      	it	ne
 80081b2:	81a3      	strhne	r3, [r4, #12]
 80081b4:	bd10      	pop	{r4, pc}

080081b6 <__sclose>:
 80081b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ba:	f000 b813 	b.w	80081e4 <_close_r>
	...

080081c0 <_write_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4c07      	ldr	r4, [pc, #28]	; (80081e0 <_write_r+0x20>)
 80081c4:	4605      	mov	r5, r0
 80081c6:	4608      	mov	r0, r1
 80081c8:	4611      	mov	r1, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	6022      	str	r2, [r4, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f7fd f848 	bl	8005264 <_write>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_write_r+0x1e>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	b103      	cbz	r3, 80081de <_write_r+0x1e>
 80081dc:	602b      	str	r3, [r5, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	20002bb0 	.word	0x20002bb0

080081e4 <_close_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4c06      	ldr	r4, [pc, #24]	; (8008200 <_close_r+0x1c>)
 80081e8:	2300      	movs	r3, #0
 80081ea:	4605      	mov	r5, r0
 80081ec:	4608      	mov	r0, r1
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	f7fd f860 	bl	80052b4 <_close>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_close_r+0x1a>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_close_r+0x1a>
 80081fc:	602b      	str	r3, [r5, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	20002bb0 	.word	0x20002bb0

08008204 <_fstat_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4c07      	ldr	r4, [pc, #28]	; (8008224 <_fstat_r+0x20>)
 8008208:	2300      	movs	r3, #0
 800820a:	4605      	mov	r5, r0
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	f7fd f852 	bl	80052ba <_fstat>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d102      	bne.n	8008220 <_fstat_r+0x1c>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	b103      	cbz	r3, 8008220 <_fstat_r+0x1c>
 800821e:	602b      	str	r3, [r5, #0]
 8008220:	bd38      	pop	{r3, r4, r5, pc}
 8008222:	bf00      	nop
 8008224:	20002bb0 	.word	0x20002bb0

08008228 <_isatty_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4c06      	ldr	r4, [pc, #24]	; (8008244 <_isatty_r+0x1c>)
 800822c:	2300      	movs	r3, #0
 800822e:	4605      	mov	r5, r0
 8008230:	4608      	mov	r0, r1
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	f7fd f846 	bl	80052c4 <_isatty>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_isatty_r+0x1a>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	b103      	cbz	r3, 8008242 <_isatty_r+0x1a>
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20002bb0 	.word	0x20002bb0

08008248 <_lseek_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4c07      	ldr	r4, [pc, #28]	; (8008268 <_lseek_r+0x20>)
 800824c:	4605      	mov	r5, r0
 800824e:	4608      	mov	r0, r1
 8008250:	4611      	mov	r1, r2
 8008252:	2200      	movs	r2, #0
 8008254:	6022      	str	r2, [r4, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	f7fd f836 	bl	80052c8 <_lseek>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d102      	bne.n	8008266 <_lseek_r+0x1e>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	b103      	cbz	r3, 8008266 <_lseek_r+0x1e>
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	20002bb0 	.word	0x20002bb0

0800826c <__ascii_mbtowc>:
 800826c:	b082      	sub	sp, #8
 800826e:	b901      	cbnz	r1, 8008272 <__ascii_mbtowc+0x6>
 8008270:	a901      	add	r1, sp, #4
 8008272:	b142      	cbz	r2, 8008286 <__ascii_mbtowc+0x1a>
 8008274:	b14b      	cbz	r3, 800828a <__ascii_mbtowc+0x1e>
 8008276:	7813      	ldrb	r3, [r2, #0]
 8008278:	600b      	str	r3, [r1, #0]
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	1c10      	adds	r0, r2, #0
 800827e:	bf18      	it	ne
 8008280:	2001      	movne	r0, #1
 8008282:	b002      	add	sp, #8
 8008284:	4770      	bx	lr
 8008286:	4610      	mov	r0, r2
 8008288:	e7fb      	b.n	8008282 <__ascii_mbtowc+0x16>
 800828a:	f06f 0001 	mvn.w	r0, #1
 800828e:	e7f8      	b.n	8008282 <__ascii_mbtowc+0x16>

08008290 <memmove>:
 8008290:	4288      	cmp	r0, r1
 8008292:	b510      	push	{r4, lr}
 8008294:	eb01 0302 	add.w	r3, r1, r2
 8008298:	d803      	bhi.n	80082a2 <memmove+0x12>
 800829a:	1e42      	subs	r2, r0, #1
 800829c:	4299      	cmp	r1, r3
 800829e:	d10c      	bne.n	80082ba <memmove+0x2a>
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	4298      	cmp	r0, r3
 80082a4:	d2f9      	bcs.n	800829a <memmove+0xa>
 80082a6:	1881      	adds	r1, r0, r2
 80082a8:	1ad2      	subs	r2, r2, r3
 80082aa:	42d3      	cmn	r3, r2
 80082ac:	d100      	bne.n	80082b0 <memmove+0x20>
 80082ae:	bd10      	pop	{r4, pc}
 80082b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80082b8:	e7f7      	b.n	80082aa <memmove+0x1a>
 80082ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80082c2:	e7eb      	b.n	800829c <memmove+0xc>

080082c4 <_realloc_r>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	4607      	mov	r7, r0
 80082c8:	4614      	mov	r4, r2
 80082ca:	460e      	mov	r6, r1
 80082cc:	b921      	cbnz	r1, 80082d8 <_realloc_r+0x14>
 80082ce:	4611      	mov	r1, r2
 80082d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082d4:	f7fd bc80 	b.w	8005bd8 <_malloc_r>
 80082d8:	b922      	cbnz	r2, 80082e4 <_realloc_r+0x20>
 80082da:	f7fd fc2f 	bl	8005b3c <_free_r>
 80082de:	4625      	mov	r5, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e4:	f000 f833 	bl	800834e <_malloc_usable_size_r>
 80082e8:	4284      	cmp	r4, r0
 80082ea:	d90f      	bls.n	800830c <_realloc_r+0x48>
 80082ec:	4621      	mov	r1, r4
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7fd fc72 	bl	8005bd8 <_malloc_r>
 80082f4:	4605      	mov	r5, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d0f2      	beq.n	80082e0 <_realloc_r+0x1c>
 80082fa:	4631      	mov	r1, r6
 80082fc:	4622      	mov	r2, r4
 80082fe:	f7ff fadf 	bl	80078c0 <memcpy>
 8008302:	4631      	mov	r1, r6
 8008304:	4638      	mov	r0, r7
 8008306:	f7fd fc19 	bl	8005b3c <_free_r>
 800830a:	e7e9      	b.n	80082e0 <_realloc_r+0x1c>
 800830c:	4635      	mov	r5, r6
 800830e:	e7e7      	b.n	80082e0 <_realloc_r+0x1c>

08008310 <_read_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4c07      	ldr	r4, [pc, #28]	; (8008330 <_read_r+0x20>)
 8008314:	4605      	mov	r5, r0
 8008316:	4608      	mov	r0, r1
 8008318:	4611      	mov	r1, r2
 800831a:	2200      	movs	r2, #0
 800831c:	6022      	str	r2, [r4, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	f7fc ff92 	bl	8005248 <_read>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_read_r+0x1e>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	b103      	cbz	r3, 800832e <_read_r+0x1e>
 800832c:	602b      	str	r3, [r5, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20002bb0 	.word	0x20002bb0

08008334 <__ascii_wctomb>:
 8008334:	b149      	cbz	r1, 800834a <__ascii_wctomb+0x16>
 8008336:	2aff      	cmp	r2, #255	; 0xff
 8008338:	bf85      	ittet	hi
 800833a:	238a      	movhi	r3, #138	; 0x8a
 800833c:	6003      	strhi	r3, [r0, #0]
 800833e:	700a      	strbls	r2, [r1, #0]
 8008340:	f04f 30ff 	movhi.w	r0, #4294967295
 8008344:	bf98      	it	ls
 8008346:	2001      	movls	r0, #1
 8008348:	4770      	bx	lr
 800834a:	4608      	mov	r0, r1
 800834c:	4770      	bx	lr

0800834e <_malloc_usable_size_r>:
 800834e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008352:	2800      	cmp	r0, #0
 8008354:	f1a0 0004 	sub.w	r0, r0, #4
 8008358:	bfbc      	itt	lt
 800835a:	580b      	ldrlt	r3, [r1, r0]
 800835c:	18c0      	addlt	r0, r0, r3
 800835e:	4770      	bx	lr

08008360 <asin>:
 8008360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008362:	ed2d 8b02 	vpush	{d8}
 8008366:	4e26      	ldr	r6, [pc, #152]	; (8008400 <asin+0xa0>)
 8008368:	b08b      	sub	sp, #44	; 0x2c
 800836a:	ec55 4b10 	vmov	r4, r5, d0
 800836e:	f000 f8ab 	bl	80084c8 <__ieee754_asin>
 8008372:	f996 3000 	ldrsb.w	r3, [r6]
 8008376:	eeb0 8a40 	vmov.f32	s16, s0
 800837a:	eef0 8a60 	vmov.f32	s17, s1
 800837e:	3301      	adds	r3, #1
 8008380:	d036      	beq.n	80083f0 <asin+0x90>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	4620      	mov	r0, r4
 8008388:	4629      	mov	r1, r5
 800838a:	f7f8 fbcb 	bl	8000b24 <__aeabi_dcmpun>
 800838e:	4607      	mov	r7, r0
 8008390:	bb70      	cbnz	r0, 80083f0 <asin+0x90>
 8008392:	ec45 4b10 	vmov	d0, r4, r5
 8008396:	f000 fdd7 	bl	8008f48 <fabs>
 800839a:	2200      	movs	r2, #0
 800839c:	4b19      	ldr	r3, [pc, #100]	; (8008404 <asin+0xa4>)
 800839e:	ec51 0b10 	vmov	r0, r1, d0
 80083a2:	f7f8 fbb5 	bl	8000b10 <__aeabi_dcmpgt>
 80083a6:	b318      	cbz	r0, 80083f0 <asin+0x90>
 80083a8:	2301      	movs	r3, #1
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	4816      	ldr	r0, [pc, #88]	; (8008408 <asin+0xa8>)
 80083ae:	4b17      	ldr	r3, [pc, #92]	; (800840c <asin+0xac>)
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	9708      	str	r7, [sp, #32]
 80083b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80083b8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80083bc:	f000 fdd0 	bl	8008f60 <nan>
 80083c0:	f996 3000 	ldrsb.w	r3, [r6]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80083ca:	d104      	bne.n	80083d6 <asin+0x76>
 80083cc:	f7fd fb7c 	bl	8005ac8 <__errno>
 80083d0:	2321      	movs	r3, #33	; 0x21
 80083d2:	6003      	str	r3, [r0, #0]
 80083d4:	e004      	b.n	80083e0 <asin+0x80>
 80083d6:	4668      	mov	r0, sp
 80083d8:	f000 fdbd 	bl	8008f56 <matherr>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d0f5      	beq.n	80083cc <asin+0x6c>
 80083e0:	9b08      	ldr	r3, [sp, #32]
 80083e2:	b11b      	cbz	r3, 80083ec <asin+0x8c>
 80083e4:	f7fd fb70 	bl	8005ac8 <__errno>
 80083e8:	9b08      	ldr	r3, [sp, #32]
 80083ea:	6003      	str	r3, [r0, #0]
 80083ec:	ed9d 8b06 	vldr	d8, [sp, #24]
 80083f0:	eeb0 0a48 	vmov.f32	s0, s16
 80083f4:	eef0 0a68 	vmov.f32	s1, s17
 80083f8:	b00b      	add	sp, #44	; 0x2c
 80083fa:	ecbd 8b02 	vpop	{d8}
 80083fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008400:	200001dc 	.word	0x200001dc
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	08009299 	.word	0x08009299
 800840c:	08009596 	.word	0x08009596

08008410 <atan2>:
 8008410:	f000 ba66 	b.w	80088e0 <__ieee754_atan2>

08008414 <sqrt>:
 8008414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008418:	ed2d 8b02 	vpush	{d8}
 800841c:	b08b      	sub	sp, #44	; 0x2c
 800841e:	ec55 4b10 	vmov	r4, r5, d0
 8008422:	f000 fb37 	bl	8008a94 <__ieee754_sqrt>
 8008426:	4b26      	ldr	r3, [pc, #152]	; (80084c0 <sqrt+0xac>)
 8008428:	eeb0 8a40 	vmov.f32	s16, s0
 800842c:	eef0 8a60 	vmov.f32	s17, s1
 8008430:	f993 6000 	ldrsb.w	r6, [r3]
 8008434:	1c73      	adds	r3, r6, #1
 8008436:	d02a      	beq.n	800848e <sqrt+0x7a>
 8008438:	4622      	mov	r2, r4
 800843a:	462b      	mov	r3, r5
 800843c:	4620      	mov	r0, r4
 800843e:	4629      	mov	r1, r5
 8008440:	f7f8 fb70 	bl	8000b24 <__aeabi_dcmpun>
 8008444:	4607      	mov	r7, r0
 8008446:	bb10      	cbnz	r0, 800848e <sqrt+0x7a>
 8008448:	f04f 0800 	mov.w	r8, #0
 800844c:	f04f 0900 	mov.w	r9, #0
 8008450:	4642      	mov	r2, r8
 8008452:	464b      	mov	r3, r9
 8008454:	4620      	mov	r0, r4
 8008456:	4629      	mov	r1, r5
 8008458:	f7f8 fb3c 	bl	8000ad4 <__aeabi_dcmplt>
 800845c:	b1b8      	cbz	r0, 800848e <sqrt+0x7a>
 800845e:	2301      	movs	r3, #1
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <sqrt+0xb0>)
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	9708      	str	r7, [sp, #32]
 8008468:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800846c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008470:	b9b6      	cbnz	r6, 80084a0 <sqrt+0x8c>
 8008472:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008476:	4668      	mov	r0, sp
 8008478:	f000 fd6d 	bl	8008f56 <matherr>
 800847c:	b1d0      	cbz	r0, 80084b4 <sqrt+0xa0>
 800847e:	9b08      	ldr	r3, [sp, #32]
 8008480:	b11b      	cbz	r3, 800848a <sqrt+0x76>
 8008482:	f7fd fb21 	bl	8005ac8 <__errno>
 8008486:	9b08      	ldr	r3, [sp, #32]
 8008488:	6003      	str	r3, [r0, #0]
 800848a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800848e:	eeb0 0a48 	vmov.f32	s0, s16
 8008492:	eef0 0a68 	vmov.f32	s1, s17
 8008496:	b00b      	add	sp, #44	; 0x2c
 8008498:	ecbd 8b02 	vpop	{d8}
 800849c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084a0:	4642      	mov	r2, r8
 80084a2:	464b      	mov	r3, r9
 80084a4:	4640      	mov	r0, r8
 80084a6:	4649      	mov	r1, r9
 80084a8:	f7f8 f9cc 	bl	8000844 <__aeabi_ddiv>
 80084ac:	2e02      	cmp	r6, #2
 80084ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084b2:	d1e0      	bne.n	8008476 <sqrt+0x62>
 80084b4:	f7fd fb08 	bl	8005ac8 <__errno>
 80084b8:	2321      	movs	r3, #33	; 0x21
 80084ba:	6003      	str	r3, [r0, #0]
 80084bc:	e7df      	b.n	800847e <sqrt+0x6a>
 80084be:	bf00      	nop
 80084c0:	200001dc 	.word	0x200001dc
 80084c4:	0800959b 	.word	0x0800959b

080084c8 <__ieee754_asin>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	ec55 4b10 	vmov	r4, r5, d0
 80084d0:	4bcb      	ldr	r3, [pc, #812]	; (8008800 <__ieee754_asin+0x338>)
 80084d2:	b085      	sub	sp, #20
 80084d4:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 80084d8:	459b      	cmp	fp, r3
 80084da:	9501      	str	r5, [sp, #4]
 80084dc:	dd32      	ble.n	8008544 <__ieee754_asin+0x7c>
 80084de:	ee10 3a10 	vmov	r3, s0
 80084e2:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 80084e6:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 80084ea:	ea5b 0303 	orrs.w	r3, fp, r3
 80084ee:	d117      	bne.n	8008520 <__ieee754_asin+0x58>
 80084f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8008798 <__ieee754_asin+0x2d0>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	ee10 0a10 	vmov	r0, s0
 80084fa:	4629      	mov	r1, r5
 80084fc:	f7f8 f878 	bl	80005f0 <__aeabi_dmul>
 8008500:	a3a7      	add	r3, pc, #668	; (adr r3, 80087a0 <__ieee754_asin+0x2d8>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	4606      	mov	r6, r0
 8008508:	460f      	mov	r7, r1
 800850a:	4620      	mov	r0, r4
 800850c:	4629      	mov	r1, r5
 800850e:	f7f8 f86f 	bl	80005f0 <__aeabi_dmul>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f7 feb7 	bl	800028c <__adddf3>
 800851e:	e00a      	b.n	8008536 <__ieee754_asin+0x6e>
 8008520:	ee10 2a10 	vmov	r2, s0
 8008524:	462b      	mov	r3, r5
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	f7f7 fead 	bl	8000288 <__aeabi_dsub>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	f7f8 f987 	bl	8000844 <__aeabi_ddiv>
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
 800853a:	ec45 4b10 	vmov	d0, r4, r5
 800853e:	b005      	add	sp, #20
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	4baf      	ldr	r3, [pc, #700]	; (8008804 <__ieee754_asin+0x33c>)
 8008546:	459b      	cmp	fp, r3
 8008548:	dc11      	bgt.n	800856e <__ieee754_asin+0xa6>
 800854a:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 800854e:	f280 80b0 	bge.w	80086b2 <__ieee754_asin+0x1ea>
 8008552:	a395      	add	r3, pc, #596	; (adr r3, 80087a8 <__ieee754_asin+0x2e0>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	ee10 0a10 	vmov	r0, s0
 800855c:	4629      	mov	r1, r5
 800855e:	f7f7 fe95 	bl	800028c <__adddf3>
 8008562:	2200      	movs	r2, #0
 8008564:	4ba8      	ldr	r3, [pc, #672]	; (8008808 <__ieee754_asin+0x340>)
 8008566:	f7f8 fad3 	bl	8000b10 <__aeabi_dcmpgt>
 800856a:	2800      	cmp	r0, #0
 800856c:	d1e5      	bne.n	800853a <__ieee754_asin+0x72>
 800856e:	ec45 4b10 	vmov	d0, r4, r5
 8008572:	f000 fce9 	bl	8008f48 <fabs>
 8008576:	2000      	movs	r0, #0
 8008578:	ec53 2b10 	vmov	r2, r3, d0
 800857c:	49a2      	ldr	r1, [pc, #648]	; (8008808 <__ieee754_asin+0x340>)
 800857e:	f7f7 fe83 	bl	8000288 <__aeabi_dsub>
 8008582:	2200      	movs	r2, #0
 8008584:	4ba1      	ldr	r3, [pc, #644]	; (800880c <__ieee754_asin+0x344>)
 8008586:	f7f8 f833 	bl	80005f0 <__aeabi_dmul>
 800858a:	a389      	add	r3, pc, #548	; (adr r3, 80087b0 <__ieee754_asin+0x2e8>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	4604      	mov	r4, r0
 8008592:	460d      	mov	r5, r1
 8008594:	f7f8 f82c 	bl	80005f0 <__aeabi_dmul>
 8008598:	a387      	add	r3, pc, #540	; (adr r3, 80087b8 <__ieee754_asin+0x2f0>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f7 fe75 	bl	800028c <__adddf3>
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	f7f8 f823 	bl	80005f0 <__aeabi_dmul>
 80085aa:	a385      	add	r3, pc, #532	; (adr r3, 80087c0 <__ieee754_asin+0x2f8>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f7f7 fe6a 	bl	8000288 <__aeabi_dsub>
 80085b4:	4622      	mov	r2, r4
 80085b6:	462b      	mov	r3, r5
 80085b8:	f7f8 f81a 	bl	80005f0 <__aeabi_dmul>
 80085bc:	a382      	add	r3, pc, #520	; (adr r3, 80087c8 <__ieee754_asin+0x300>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 fe63 	bl	800028c <__adddf3>
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	f7f8 f811 	bl	80005f0 <__aeabi_dmul>
 80085ce:	a380      	add	r3, pc, #512	; (adr r3, 80087d0 <__ieee754_asin+0x308>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f7f7 fe58 	bl	8000288 <__aeabi_dsub>
 80085d8:	4622      	mov	r2, r4
 80085da:	462b      	mov	r3, r5
 80085dc:	f7f8 f808 	bl	80005f0 <__aeabi_dmul>
 80085e0:	a37d      	add	r3, pc, #500	; (adr r3, 80087d8 <__ieee754_asin+0x310>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f7 fe51 	bl	800028c <__adddf3>
 80085ea:	4622      	mov	r2, r4
 80085ec:	462b      	mov	r3, r5
 80085ee:	f7f7 ffff 	bl	80005f0 <__aeabi_dmul>
 80085f2:	a37b      	add	r3, pc, #492	; (adr r3, 80087e0 <__ieee754_asin+0x318>)
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	4680      	mov	r8, r0
 80085fa:	4689      	mov	r9, r1
 80085fc:	4620      	mov	r0, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	f7f7 fff6 	bl	80005f0 <__aeabi_dmul>
 8008604:	a378      	add	r3, pc, #480	; (adr r3, 80087e8 <__ieee754_asin+0x320>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	f7f7 fe3d 	bl	8000288 <__aeabi_dsub>
 800860e:	4622      	mov	r2, r4
 8008610:	462b      	mov	r3, r5
 8008612:	f7f7 ffed 	bl	80005f0 <__aeabi_dmul>
 8008616:	a376      	add	r3, pc, #472	; (adr r3, 80087f0 <__ieee754_asin+0x328>)
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	f7f7 fe36 	bl	800028c <__adddf3>
 8008620:	4622      	mov	r2, r4
 8008622:	462b      	mov	r3, r5
 8008624:	f7f7 ffe4 	bl	80005f0 <__aeabi_dmul>
 8008628:	a373      	add	r3, pc, #460	; (adr r3, 80087f8 <__ieee754_asin+0x330>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 fe2b 	bl	8000288 <__aeabi_dsub>
 8008632:	4622      	mov	r2, r4
 8008634:	462b      	mov	r3, r5
 8008636:	f7f7 ffdb 	bl	80005f0 <__aeabi_dmul>
 800863a:	2200      	movs	r2, #0
 800863c:	4b72      	ldr	r3, [pc, #456]	; (8008808 <__ieee754_asin+0x340>)
 800863e:	f7f7 fe25 	bl	800028c <__adddf3>
 8008642:	ec45 4b10 	vmov	d0, r4, r5
 8008646:	460b      	mov	r3, r1
 8008648:	4602      	mov	r2, r0
 800864a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800864e:	f000 fa21 	bl	8008a94 <__ieee754_sqrt>
 8008652:	496f      	ldr	r1, [pc, #444]	; (8008810 <__ieee754_asin+0x348>)
 8008654:	458b      	cmp	fp, r1
 8008656:	ec57 6b10 	vmov	r6, r7, d0
 800865a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800865e:	f340 80d9 	ble.w	8008814 <__ieee754_asin+0x34c>
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	f7f8 f8ed 	bl	8000844 <__aeabi_ddiv>
 800866a:	4632      	mov	r2, r6
 800866c:	463b      	mov	r3, r7
 800866e:	f7f7 ffbf 	bl	80005f0 <__aeabi_dmul>
 8008672:	4632      	mov	r2, r6
 8008674:	463b      	mov	r3, r7
 8008676:	f7f7 fe09 	bl	800028c <__adddf3>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	f7f7 fe05 	bl	800028c <__adddf3>
 8008682:	a347      	add	r3, pc, #284	; (adr r3, 80087a0 <__ieee754_asin+0x2d8>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f7 fdfe 	bl	8000288 <__aeabi_dsub>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	a141      	add	r1, pc, #260	; (adr r1, 8008798 <__ieee754_asin+0x2d0>)
 8008692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008696:	f7f7 fdf7 	bl	8000288 <__aeabi_dsub>
 800869a:	9b01      	ldr	r3, [sp, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfdc      	itt	le
 80086a0:	4602      	movle	r2, r0
 80086a2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80086a6:	4604      	mov	r4, r0
 80086a8:	460d      	mov	r5, r1
 80086aa:	bfdc      	itt	le
 80086ac:	4614      	movle	r4, r2
 80086ae:	461d      	movle	r5, r3
 80086b0:	e743      	b.n	800853a <__ieee754_asin+0x72>
 80086b2:	ee10 2a10 	vmov	r2, s0
 80086b6:	ee10 0a10 	vmov	r0, s0
 80086ba:	462b      	mov	r3, r5
 80086bc:	4629      	mov	r1, r5
 80086be:	f7f7 ff97 	bl	80005f0 <__aeabi_dmul>
 80086c2:	a33b      	add	r3, pc, #236	; (adr r3, 80087b0 <__ieee754_asin+0x2e8>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	4606      	mov	r6, r0
 80086ca:	460f      	mov	r7, r1
 80086cc:	f7f7 ff90 	bl	80005f0 <__aeabi_dmul>
 80086d0:	a339      	add	r3, pc, #228	; (adr r3, 80087b8 <__ieee754_asin+0x2f0>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 fdd9 	bl	800028c <__adddf3>
 80086da:	4632      	mov	r2, r6
 80086dc:	463b      	mov	r3, r7
 80086de:	f7f7 ff87 	bl	80005f0 <__aeabi_dmul>
 80086e2:	a337      	add	r3, pc, #220	; (adr r3, 80087c0 <__ieee754_asin+0x2f8>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fdce 	bl	8000288 <__aeabi_dsub>
 80086ec:	4632      	mov	r2, r6
 80086ee:	463b      	mov	r3, r7
 80086f0:	f7f7 ff7e 	bl	80005f0 <__aeabi_dmul>
 80086f4:	a334      	add	r3, pc, #208	; (adr r3, 80087c8 <__ieee754_asin+0x300>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f7 fdc7 	bl	800028c <__adddf3>
 80086fe:	4632      	mov	r2, r6
 8008700:	463b      	mov	r3, r7
 8008702:	f7f7 ff75 	bl	80005f0 <__aeabi_dmul>
 8008706:	a332      	add	r3, pc, #200	; (adr r3, 80087d0 <__ieee754_asin+0x308>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 fdbc 	bl	8000288 <__aeabi_dsub>
 8008710:	4632      	mov	r2, r6
 8008712:	463b      	mov	r3, r7
 8008714:	f7f7 ff6c 	bl	80005f0 <__aeabi_dmul>
 8008718:	a32f      	add	r3, pc, #188	; (adr r3, 80087d8 <__ieee754_asin+0x310>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 fdb5 	bl	800028c <__adddf3>
 8008722:	4632      	mov	r2, r6
 8008724:	463b      	mov	r3, r7
 8008726:	f7f7 ff63 	bl	80005f0 <__aeabi_dmul>
 800872a:	a32d      	add	r3, pc, #180	; (adr r3, 80087e0 <__ieee754_asin+0x318>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	4680      	mov	r8, r0
 8008732:	4689      	mov	r9, r1
 8008734:	4630      	mov	r0, r6
 8008736:	4639      	mov	r1, r7
 8008738:	f7f7 ff5a 	bl	80005f0 <__aeabi_dmul>
 800873c:	a32a      	add	r3, pc, #168	; (adr r3, 80087e8 <__ieee754_asin+0x320>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	f7f7 fda1 	bl	8000288 <__aeabi_dsub>
 8008746:	4632      	mov	r2, r6
 8008748:	463b      	mov	r3, r7
 800874a:	f7f7 ff51 	bl	80005f0 <__aeabi_dmul>
 800874e:	a328      	add	r3, pc, #160	; (adr r3, 80087f0 <__ieee754_asin+0x328>)
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f7f7 fd9a 	bl	800028c <__adddf3>
 8008758:	4632      	mov	r2, r6
 800875a:	463b      	mov	r3, r7
 800875c:	f7f7 ff48 	bl	80005f0 <__aeabi_dmul>
 8008760:	a325      	add	r3, pc, #148	; (adr r3, 80087f8 <__ieee754_asin+0x330>)
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f7f7 fd8f 	bl	8000288 <__aeabi_dsub>
 800876a:	4632      	mov	r2, r6
 800876c:	463b      	mov	r3, r7
 800876e:	f7f7 ff3f 	bl	80005f0 <__aeabi_dmul>
 8008772:	2200      	movs	r2, #0
 8008774:	4b24      	ldr	r3, [pc, #144]	; (8008808 <__ieee754_asin+0x340>)
 8008776:	f7f7 fd89 	bl	800028c <__adddf3>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	f7f8 f85f 	bl	8000844 <__aeabi_ddiv>
 8008786:	4622      	mov	r2, r4
 8008788:	462b      	mov	r3, r5
 800878a:	f7f7 ff31 	bl	80005f0 <__aeabi_dmul>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4620      	mov	r0, r4
 8008794:	4629      	mov	r1, r5
 8008796:	e6c0      	b.n	800851a <__ieee754_asin+0x52>
 8008798:	54442d18 	.word	0x54442d18
 800879c:	3ff921fb 	.word	0x3ff921fb
 80087a0:	33145c07 	.word	0x33145c07
 80087a4:	3c91a626 	.word	0x3c91a626
 80087a8:	8800759c 	.word	0x8800759c
 80087ac:	7e37e43c 	.word	0x7e37e43c
 80087b0:	0dfdf709 	.word	0x0dfdf709
 80087b4:	3f023de1 	.word	0x3f023de1
 80087b8:	7501b288 	.word	0x7501b288
 80087bc:	3f49efe0 	.word	0x3f49efe0
 80087c0:	b5688f3b 	.word	0xb5688f3b
 80087c4:	3fa48228 	.word	0x3fa48228
 80087c8:	0e884455 	.word	0x0e884455
 80087cc:	3fc9c155 	.word	0x3fc9c155
 80087d0:	03eb6f7d 	.word	0x03eb6f7d
 80087d4:	3fd4d612 	.word	0x3fd4d612
 80087d8:	55555555 	.word	0x55555555
 80087dc:	3fc55555 	.word	0x3fc55555
 80087e0:	b12e9282 	.word	0xb12e9282
 80087e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80087e8:	1b8d0159 	.word	0x1b8d0159
 80087ec:	3fe6066c 	.word	0x3fe6066c
 80087f0:	9c598ac8 	.word	0x9c598ac8
 80087f4:	40002ae5 	.word	0x40002ae5
 80087f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80087fc:	40033a27 	.word	0x40033a27
 8008800:	3fefffff 	.word	0x3fefffff
 8008804:	3fdfffff 	.word	0x3fdfffff
 8008808:	3ff00000 	.word	0x3ff00000
 800880c:	3fe00000 	.word	0x3fe00000
 8008810:	3fef3332 	.word	0x3fef3332
 8008814:	4640      	mov	r0, r8
 8008816:	4649      	mov	r1, r9
 8008818:	f7f8 f814 	bl	8000844 <__aeabi_ddiv>
 800881c:	4632      	mov	r2, r6
 800881e:	4680      	mov	r8, r0
 8008820:	4689      	mov	r9, r1
 8008822:	463b      	mov	r3, r7
 8008824:	4630      	mov	r0, r6
 8008826:	4639      	mov	r1, r7
 8008828:	f7f7 fd30 	bl	800028c <__adddf3>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	f7f7 fedc 	bl	80005f0 <__aeabi_dmul>
 8008838:	f04f 0a00 	mov.w	sl, #0
 800883c:	4680      	mov	r8, r0
 800883e:	4689      	mov	r9, r1
 8008840:	4652      	mov	r2, sl
 8008842:	463b      	mov	r3, r7
 8008844:	4650      	mov	r0, sl
 8008846:	4639      	mov	r1, r7
 8008848:	f7f7 fed2 	bl	80005f0 <__aeabi_dmul>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4620      	mov	r0, r4
 8008852:	4629      	mov	r1, r5
 8008854:	f7f7 fd18 	bl	8000288 <__aeabi_dsub>
 8008858:	4652      	mov	r2, sl
 800885a:	4604      	mov	r4, r0
 800885c:	460d      	mov	r5, r1
 800885e:	463b      	mov	r3, r7
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fd12 	bl	800028c <__adddf3>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 ffe8 	bl	8000844 <__aeabi_ddiv>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	f7f7 fd08 	bl	800028c <__adddf3>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	a113      	add	r1, pc, #76	; (adr r1, 80088d0 <__ieee754_asin+0x408>)
 8008882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008886:	f7f7 fcff 	bl	8000288 <__aeabi_dsub>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4640      	mov	r0, r8
 8008890:	4649      	mov	r1, r9
 8008892:	f7f7 fcf9 	bl	8000288 <__aeabi_dsub>
 8008896:	4652      	mov	r2, sl
 8008898:	4604      	mov	r4, r0
 800889a:	460d      	mov	r5, r1
 800889c:	463b      	mov	r3, r7
 800889e:	4650      	mov	r0, sl
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 fcf3 	bl	800028c <__adddf3>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	a10b      	add	r1, pc, #44	; (adr r1, 80088d8 <__ieee754_asin+0x410>)
 80088ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b0:	f7f7 fcea 	bl	8000288 <__aeabi_dsub>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f7 fce4 	bl	8000288 <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	a104      	add	r1, pc, #16	; (adr r1, 80088d8 <__ieee754_asin+0x410>)
 80088c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ca:	e6e4      	b.n	8008696 <__ieee754_asin+0x1ce>
 80088cc:	f3af 8000 	nop.w
 80088d0:	33145c07 	.word	0x33145c07
 80088d4:	3c91a626 	.word	0x3c91a626
 80088d8:	54442d18 	.word	0x54442d18
 80088dc:	3fe921fb 	.word	0x3fe921fb

080088e0 <__ieee754_atan2>:
 80088e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e4:	ec57 6b11 	vmov	r6, r7, d1
 80088e8:	4273      	negs	r3, r6
 80088ea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80088ee:	4333      	orrs	r3, r6
 80088f0:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8008a90 <__ieee754_atan2+0x1b0>
 80088f4:	ec51 0b10 	vmov	r0, r1, d0
 80088f8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80088fc:	4563      	cmp	r3, ip
 80088fe:	ee11 8a10 	vmov	r8, s2
 8008902:	ee10 9a10 	vmov	r9, s0
 8008906:	468e      	mov	lr, r1
 8008908:	d807      	bhi.n	800891a <__ieee754_atan2+0x3a>
 800890a:	4244      	negs	r4, r0
 800890c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008910:	4304      	orrs	r4, r0
 8008912:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008916:	4564      	cmp	r4, ip
 8008918:	d907      	bls.n	800892a <__ieee754_atan2+0x4a>
 800891a:	4632      	mov	r2, r6
 800891c:	463b      	mov	r3, r7
 800891e:	f7f7 fcb5 	bl	800028c <__adddf3>
 8008922:	ec41 0b10 	vmov	d0, r0, r1
 8008926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800892e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008932:	4334      	orrs	r4, r6
 8008934:	d103      	bne.n	800893e <__ieee754_atan2+0x5e>
 8008936:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800893a:	f000 b95d 	b.w	8008bf8 <atan>
 800893e:	17bc      	asrs	r4, r7, #30
 8008940:	f004 0402 	and.w	r4, r4, #2
 8008944:	ea59 0903 	orrs.w	r9, r9, r3
 8008948:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800894c:	d107      	bne.n	800895e <__ieee754_atan2+0x7e>
 800894e:	2c02      	cmp	r4, #2
 8008950:	d030      	beq.n	80089b4 <__ieee754_atan2+0xd4>
 8008952:	2c03      	cmp	r4, #3
 8008954:	d1e5      	bne.n	8008922 <__ieee754_atan2+0x42>
 8008956:	a13c      	add	r1, pc, #240	; (adr r1, 8008a48 <__ieee754_atan2+0x168>)
 8008958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800895c:	e7e1      	b.n	8008922 <__ieee754_atan2+0x42>
 800895e:	ea58 0802 	orrs.w	r8, r8, r2
 8008962:	d106      	bne.n	8008972 <__ieee754_atan2+0x92>
 8008964:	f1be 0f00 	cmp.w	lr, #0
 8008968:	da6a      	bge.n	8008a40 <__ieee754_atan2+0x160>
 800896a:	a139      	add	r1, pc, #228	; (adr r1, 8008a50 <__ieee754_atan2+0x170>)
 800896c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008970:	e7d7      	b.n	8008922 <__ieee754_atan2+0x42>
 8008972:	4562      	cmp	r2, ip
 8008974:	d122      	bne.n	80089bc <__ieee754_atan2+0xdc>
 8008976:	4293      	cmp	r3, r2
 8008978:	d111      	bne.n	800899e <__ieee754_atan2+0xbe>
 800897a:	2c02      	cmp	r4, #2
 800897c:	d007      	beq.n	800898e <__ieee754_atan2+0xae>
 800897e:	2c03      	cmp	r4, #3
 8008980:	d009      	beq.n	8008996 <__ieee754_atan2+0xb6>
 8008982:	2c01      	cmp	r4, #1
 8008984:	d156      	bne.n	8008a34 <__ieee754_atan2+0x154>
 8008986:	a134      	add	r1, pc, #208	; (adr r1, 8008a58 <__ieee754_atan2+0x178>)
 8008988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800898c:	e7c9      	b.n	8008922 <__ieee754_atan2+0x42>
 800898e:	a134      	add	r1, pc, #208	; (adr r1, 8008a60 <__ieee754_atan2+0x180>)
 8008990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008994:	e7c5      	b.n	8008922 <__ieee754_atan2+0x42>
 8008996:	a134      	add	r1, pc, #208	; (adr r1, 8008a68 <__ieee754_atan2+0x188>)
 8008998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800899c:	e7c1      	b.n	8008922 <__ieee754_atan2+0x42>
 800899e:	2c02      	cmp	r4, #2
 80089a0:	d008      	beq.n	80089b4 <__ieee754_atan2+0xd4>
 80089a2:	2c03      	cmp	r4, #3
 80089a4:	d0d7      	beq.n	8008956 <__ieee754_atan2+0x76>
 80089a6:	2c01      	cmp	r4, #1
 80089a8:	f04f 0000 	mov.w	r0, #0
 80089ac:	d146      	bne.n	8008a3c <__ieee754_atan2+0x15c>
 80089ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80089b2:	e7b6      	b.n	8008922 <__ieee754_atan2+0x42>
 80089b4:	a12e      	add	r1, pc, #184	; (adr r1, 8008a70 <__ieee754_atan2+0x190>)
 80089b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ba:	e7b2      	b.n	8008922 <__ieee754_atan2+0x42>
 80089bc:	4563      	cmp	r3, ip
 80089be:	d0d1      	beq.n	8008964 <__ieee754_atan2+0x84>
 80089c0:	1a9b      	subs	r3, r3, r2
 80089c2:	151b      	asrs	r3, r3, #20
 80089c4:	2b3c      	cmp	r3, #60	; 0x3c
 80089c6:	dc1e      	bgt.n	8008a06 <__ieee754_atan2+0x126>
 80089c8:	2f00      	cmp	r7, #0
 80089ca:	da01      	bge.n	80089d0 <__ieee754_atan2+0xf0>
 80089cc:	333c      	adds	r3, #60	; 0x3c
 80089ce:	db1e      	blt.n	8008a0e <__ieee754_atan2+0x12e>
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	f7f7 ff36 	bl	8000844 <__aeabi_ddiv>
 80089d8:	ec41 0b10 	vmov	d0, r0, r1
 80089dc:	f000 fab4 	bl	8008f48 <fabs>
 80089e0:	f000 f90a 	bl	8008bf8 <atan>
 80089e4:	ec51 0b10 	vmov	r0, r1, d0
 80089e8:	2c01      	cmp	r4, #1
 80089ea:	d013      	beq.n	8008a14 <__ieee754_atan2+0x134>
 80089ec:	2c02      	cmp	r4, #2
 80089ee:	d014      	beq.n	8008a1a <__ieee754_atan2+0x13a>
 80089f0:	2c00      	cmp	r4, #0
 80089f2:	d096      	beq.n	8008922 <__ieee754_atan2+0x42>
 80089f4:	a320      	add	r3, pc, #128	; (adr r3, 8008a78 <__ieee754_atan2+0x198>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 fc45 	bl	8000288 <__aeabi_dsub>
 80089fe:	a31c      	add	r3, pc, #112	; (adr r3, 8008a70 <__ieee754_atan2+0x190>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	e013      	b.n	8008a2e <__ieee754_atan2+0x14e>
 8008a06:	a11e      	add	r1, pc, #120	; (adr r1, 8008a80 <__ieee754_atan2+0x1a0>)
 8008a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a0c:	e7ec      	b.n	80089e8 <__ieee754_atan2+0x108>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	2100      	movs	r1, #0
 8008a12:	e7e9      	b.n	80089e8 <__ieee754_atan2+0x108>
 8008a14:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008a18:	e783      	b.n	8008922 <__ieee754_atan2+0x42>
 8008a1a:	a317      	add	r3, pc, #92	; (adr r3, 8008a78 <__ieee754_atan2+0x198>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fc32 	bl	8000288 <__aeabi_dsub>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	a111      	add	r1, pc, #68	; (adr r1, 8008a70 <__ieee754_atan2+0x190>)
 8008a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a2e:	f7f7 fc2b 	bl	8000288 <__aeabi_dsub>
 8008a32:	e776      	b.n	8008922 <__ieee754_atan2+0x42>
 8008a34:	a114      	add	r1, pc, #80	; (adr r1, 8008a88 <__ieee754_atan2+0x1a8>)
 8008a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a3a:	e772      	b.n	8008922 <__ieee754_atan2+0x42>
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	e770      	b.n	8008922 <__ieee754_atan2+0x42>
 8008a40:	a10f      	add	r1, pc, #60	; (adr r1, 8008a80 <__ieee754_atan2+0x1a0>)
 8008a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a46:	e76c      	b.n	8008922 <__ieee754_atan2+0x42>
 8008a48:	54442d18 	.word	0x54442d18
 8008a4c:	c00921fb 	.word	0xc00921fb
 8008a50:	54442d18 	.word	0x54442d18
 8008a54:	bff921fb 	.word	0xbff921fb
 8008a58:	54442d18 	.word	0x54442d18
 8008a5c:	bfe921fb 	.word	0xbfe921fb
 8008a60:	7f3321d2 	.word	0x7f3321d2
 8008a64:	4002d97c 	.word	0x4002d97c
 8008a68:	7f3321d2 	.word	0x7f3321d2
 8008a6c:	c002d97c 	.word	0xc002d97c
 8008a70:	54442d18 	.word	0x54442d18
 8008a74:	400921fb 	.word	0x400921fb
 8008a78:	33145c07 	.word	0x33145c07
 8008a7c:	3ca1a626 	.word	0x3ca1a626
 8008a80:	54442d18 	.word	0x54442d18
 8008a84:	3ff921fb 	.word	0x3ff921fb
 8008a88:	54442d18 	.word	0x54442d18
 8008a8c:	3fe921fb 	.word	0x3fe921fb
 8008a90:	7ff00000 	.word	0x7ff00000

08008a94 <__ieee754_sqrt>:
 8008a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	ec55 4b10 	vmov	r4, r5, d0
 8008a9c:	4e54      	ldr	r6, [pc, #336]	; (8008bf0 <__ieee754_sqrt+0x15c>)
 8008a9e:	43ae      	bics	r6, r5
 8008aa0:	ee10 0a10 	vmov	r0, s0
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	d113      	bne.n	8008ad4 <__ieee754_sqrt+0x40>
 8008aac:	ee10 2a10 	vmov	r2, s0
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	ee10 0a10 	vmov	r0, s0
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f7f7 fd9a 	bl	80005f0 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	f7f7 fbe2 	bl	800028c <__adddf3>
 8008ac8:	4604      	mov	r4, r0
 8008aca:	460d      	mov	r5, r1
 8008acc:	ec45 4b10 	vmov	d0, r4, r5
 8008ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad4:	2d00      	cmp	r5, #0
 8008ad6:	dc10      	bgt.n	8008afa <__ieee754_sqrt+0x66>
 8008ad8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008adc:	4330      	orrs	r0, r6
 8008ade:	d0f5      	beq.n	8008acc <__ieee754_sqrt+0x38>
 8008ae0:	b15d      	cbz	r5, 8008afa <__ieee754_sqrt+0x66>
 8008ae2:	ee10 2a10 	vmov	r2, s0
 8008ae6:	462b      	mov	r3, r5
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4629      	mov	r1, r5
 8008aec:	f7f7 fbcc 	bl	8000288 <__aeabi_dsub>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	f7f7 fea6 	bl	8000844 <__aeabi_ddiv>
 8008af8:	e7e6      	b.n	8008ac8 <__ieee754_sqrt+0x34>
 8008afa:	151b      	asrs	r3, r3, #20
 8008afc:	d10c      	bne.n	8008b18 <__ieee754_sqrt+0x84>
 8008afe:	2a00      	cmp	r2, #0
 8008b00:	d06d      	beq.n	8008bde <__ieee754_sqrt+0x14a>
 8008b02:	2000      	movs	r0, #0
 8008b04:	02d6      	lsls	r6, r2, #11
 8008b06:	d56e      	bpl.n	8008be6 <__ieee754_sqrt+0x152>
 8008b08:	1e44      	subs	r4, r0, #1
 8008b0a:	1b1b      	subs	r3, r3, r4
 8008b0c:	f1c0 0420 	rsb	r4, r0, #32
 8008b10:	fa21 f404 	lsr.w	r4, r1, r4
 8008b14:	4322      	orrs	r2, r4
 8008b16:	4081      	lsls	r1, r0
 8008b18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b1c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008b20:	07dd      	lsls	r5, r3, #31
 8008b22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008b26:	bf42      	ittt	mi
 8008b28:	0052      	lslmi	r2, r2, #1
 8008b2a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8008b2e:	0049      	lslmi	r1, r1, #1
 8008b30:	1058      	asrs	r0, r3, #1
 8008b32:	2500      	movs	r5, #0
 8008b34:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8008b38:	441a      	add	r2, r3
 8008b3a:	0049      	lsls	r1, r1, #1
 8008b3c:	2316      	movs	r3, #22
 8008b3e:	462c      	mov	r4, r5
 8008b40:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008b44:	19a7      	adds	r7, r4, r6
 8008b46:	4297      	cmp	r7, r2
 8008b48:	bfde      	ittt	le
 8008b4a:	1bd2      	suble	r2, r2, r7
 8008b4c:	19bc      	addle	r4, r7, r6
 8008b4e:	19ad      	addle	r5, r5, r6
 8008b50:	0052      	lsls	r2, r2, #1
 8008b52:	3b01      	subs	r3, #1
 8008b54:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008b58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008b60:	d1f0      	bne.n	8008b44 <__ieee754_sqrt+0xb0>
 8008b62:	f04f 0e20 	mov.w	lr, #32
 8008b66:	469c      	mov	ip, r3
 8008b68:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b6c:	42a2      	cmp	r2, r4
 8008b6e:	eb06 070c 	add.w	r7, r6, ip
 8008b72:	dc02      	bgt.n	8008b7a <__ieee754_sqrt+0xe6>
 8008b74:	d112      	bne.n	8008b9c <__ieee754_sqrt+0x108>
 8008b76:	428f      	cmp	r7, r1
 8008b78:	d810      	bhi.n	8008b9c <__ieee754_sqrt+0x108>
 8008b7a:	2f00      	cmp	r7, #0
 8008b7c:	eb07 0c06 	add.w	ip, r7, r6
 8008b80:	da34      	bge.n	8008bec <__ieee754_sqrt+0x158>
 8008b82:	f1bc 0f00 	cmp.w	ip, #0
 8008b86:	db31      	blt.n	8008bec <__ieee754_sqrt+0x158>
 8008b88:	f104 0801 	add.w	r8, r4, #1
 8008b8c:	1b12      	subs	r2, r2, r4
 8008b8e:	428f      	cmp	r7, r1
 8008b90:	bf88      	it	hi
 8008b92:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008b96:	1bc9      	subs	r1, r1, r7
 8008b98:	4433      	add	r3, r6
 8008b9a:	4644      	mov	r4, r8
 8008b9c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8008ba0:	f1be 0e01 	subs.w	lr, lr, #1
 8008ba4:	443a      	add	r2, r7
 8008ba6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008baa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008bae:	d1dd      	bne.n	8008b6c <__ieee754_sqrt+0xd8>
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	d006      	beq.n	8008bc2 <__ieee754_sqrt+0x12e>
 8008bb4:	1c5c      	adds	r4, r3, #1
 8008bb6:	bf13      	iteet	ne
 8008bb8:	3301      	addne	r3, #1
 8008bba:	3501      	addeq	r5, #1
 8008bbc:	4673      	moveq	r3, lr
 8008bbe:	f023 0301 	bicne.w	r3, r3, #1
 8008bc2:	106a      	asrs	r2, r5, #1
 8008bc4:	085b      	lsrs	r3, r3, #1
 8008bc6:	07e9      	lsls	r1, r5, #31
 8008bc8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008bcc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008bd0:	bf48      	it	mi
 8008bd2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008bd6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008bda:	461c      	mov	r4, r3
 8008bdc:	e776      	b.n	8008acc <__ieee754_sqrt+0x38>
 8008bde:	0aca      	lsrs	r2, r1, #11
 8008be0:	3b15      	subs	r3, #21
 8008be2:	0549      	lsls	r1, r1, #21
 8008be4:	e78b      	b.n	8008afe <__ieee754_sqrt+0x6a>
 8008be6:	0052      	lsls	r2, r2, #1
 8008be8:	3001      	adds	r0, #1
 8008bea:	e78b      	b.n	8008b04 <__ieee754_sqrt+0x70>
 8008bec:	46a0      	mov	r8, r4
 8008bee:	e7cd      	b.n	8008b8c <__ieee754_sqrt+0xf8>
 8008bf0:	7ff00000 	.word	0x7ff00000
 8008bf4:	00000000 	.word	0x00000000

08008bf8 <atan>:
 8008bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	ec55 4b10 	vmov	r4, r5, d0
 8008c00:	4bc7      	ldr	r3, [pc, #796]	; (8008f20 <atan+0x328>)
 8008c02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c06:	429e      	cmp	r6, r3
 8008c08:	46ab      	mov	fp, r5
 8008c0a:	dd18      	ble.n	8008c3e <atan+0x46>
 8008c0c:	4ac5      	ldr	r2, [pc, #788]	; (8008f24 <atan+0x32c>)
 8008c0e:	4296      	cmp	r6, r2
 8008c10:	dc01      	bgt.n	8008c16 <atan+0x1e>
 8008c12:	d109      	bne.n	8008c28 <atan+0x30>
 8008c14:	b144      	cbz	r4, 8008c28 <atan+0x30>
 8008c16:	4622      	mov	r2, r4
 8008c18:	462b      	mov	r3, r5
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7f7 fb35 	bl	800028c <__adddf3>
 8008c22:	4604      	mov	r4, r0
 8008c24:	460d      	mov	r5, r1
 8008c26:	e006      	b.n	8008c36 <atan+0x3e>
 8008c28:	f1bb 0f00 	cmp.w	fp, #0
 8008c2c:	f300 813a 	bgt.w	8008ea4 <atan+0x2ac>
 8008c30:	a59f      	add	r5, pc, #636	; (adr r5, 8008eb0 <atan+0x2b8>)
 8008c32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008c36:	ec45 4b10 	vmov	d0, r4, r5
 8008c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3e:	4bba      	ldr	r3, [pc, #744]	; (8008f28 <atan+0x330>)
 8008c40:	429e      	cmp	r6, r3
 8008c42:	dc14      	bgt.n	8008c6e <atan+0x76>
 8008c44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008c48:	429e      	cmp	r6, r3
 8008c4a:	dc0d      	bgt.n	8008c68 <atan+0x70>
 8008c4c:	a39a      	add	r3, pc, #616	; (adr r3, 8008eb8 <atan+0x2c0>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	ee10 0a10 	vmov	r0, s0
 8008c56:	4629      	mov	r1, r5
 8008c58:	f7f7 fb18 	bl	800028c <__adddf3>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4bb3      	ldr	r3, [pc, #716]	; (8008f2c <atan+0x334>)
 8008c60:	f7f7 ff56 	bl	8000b10 <__aeabi_dcmpgt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d1e6      	bne.n	8008c36 <atan+0x3e>
 8008c68:	f04f 3aff 	mov.w	sl, #4294967295
 8008c6c:	e02b      	b.n	8008cc6 <atan+0xce>
 8008c6e:	f000 f96b 	bl	8008f48 <fabs>
 8008c72:	4baf      	ldr	r3, [pc, #700]	; (8008f30 <atan+0x338>)
 8008c74:	429e      	cmp	r6, r3
 8008c76:	ec55 4b10 	vmov	r4, r5, d0
 8008c7a:	f300 80bf 	bgt.w	8008dfc <atan+0x204>
 8008c7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c82:	429e      	cmp	r6, r3
 8008c84:	f300 80a0 	bgt.w	8008dc8 <atan+0x1d0>
 8008c88:	ee10 2a10 	vmov	r2, s0
 8008c8c:	ee10 0a10 	vmov	r0, s0
 8008c90:	462b      	mov	r3, r5
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7f7 fafa 	bl	800028c <__adddf3>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4ba4      	ldr	r3, [pc, #656]	; (8008f2c <atan+0x334>)
 8008c9c:	f7f7 faf4 	bl	8000288 <__aeabi_dsub>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008caa:	4620      	mov	r0, r4
 8008cac:	4629      	mov	r1, r5
 8008cae:	f7f7 faed 	bl	800028c <__adddf3>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	4639      	mov	r1, r7
 8008cba:	f7f7 fdc3 	bl	8000844 <__aeabi_ddiv>
 8008cbe:	f04f 0a00 	mov.w	sl, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	462b      	mov	r3, r5
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f7 fc8f 	bl	80005f0 <__aeabi_dmul>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	4689      	mov	r9, r1
 8008cda:	f7f7 fc89 	bl	80005f0 <__aeabi_dmul>
 8008cde:	a378      	add	r3, pc, #480	; (adr r3, 8008ec0 <atan+0x2c8>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	460f      	mov	r7, r1
 8008ce8:	f7f7 fc82 	bl	80005f0 <__aeabi_dmul>
 8008cec:	a376      	add	r3, pc, #472	; (adr r3, 8008ec8 <atan+0x2d0>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 facb 	bl	800028c <__adddf3>
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	f7f7 fc79 	bl	80005f0 <__aeabi_dmul>
 8008cfe:	a374      	add	r3, pc, #464	; (adr r3, 8008ed0 <atan+0x2d8>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f7f7 fac2 	bl	800028c <__adddf3>
 8008d08:	4632      	mov	r2, r6
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	f7f7 fc70 	bl	80005f0 <__aeabi_dmul>
 8008d10:	a371      	add	r3, pc, #452	; (adr r3, 8008ed8 <atan+0x2e0>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fab9 	bl	800028c <__adddf3>
 8008d1a:	4632      	mov	r2, r6
 8008d1c:	463b      	mov	r3, r7
 8008d1e:	f7f7 fc67 	bl	80005f0 <__aeabi_dmul>
 8008d22:	a36f      	add	r3, pc, #444	; (adr r3, 8008ee0 <atan+0x2e8>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fab0 	bl	800028c <__adddf3>
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	463b      	mov	r3, r7
 8008d30:	f7f7 fc5e 	bl	80005f0 <__aeabi_dmul>
 8008d34:	a36c      	add	r3, pc, #432	; (adr r3, 8008ee8 <atan+0x2f0>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 faa7 	bl	800028c <__adddf3>
 8008d3e:	4642      	mov	r2, r8
 8008d40:	464b      	mov	r3, r9
 8008d42:	f7f7 fc55 	bl	80005f0 <__aeabi_dmul>
 8008d46:	a36a      	add	r3, pc, #424	; (adr r3, 8008ef0 <atan+0x2f8>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	4680      	mov	r8, r0
 8008d4e:	4689      	mov	r9, r1
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 fc4c 	bl	80005f0 <__aeabi_dmul>
 8008d58:	a367      	add	r3, pc, #412	; (adr r3, 8008ef8 <atan+0x300>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fa93 	bl	8000288 <__aeabi_dsub>
 8008d62:	4632      	mov	r2, r6
 8008d64:	463b      	mov	r3, r7
 8008d66:	f7f7 fc43 	bl	80005f0 <__aeabi_dmul>
 8008d6a:	a365      	add	r3, pc, #404	; (adr r3, 8008f00 <atan+0x308>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fa8a 	bl	8000288 <__aeabi_dsub>
 8008d74:	4632      	mov	r2, r6
 8008d76:	463b      	mov	r3, r7
 8008d78:	f7f7 fc3a 	bl	80005f0 <__aeabi_dmul>
 8008d7c:	a362      	add	r3, pc, #392	; (adr r3, 8008f08 <atan+0x310>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fa81 	bl	8000288 <__aeabi_dsub>
 8008d86:	4632      	mov	r2, r6
 8008d88:	463b      	mov	r3, r7
 8008d8a:	f7f7 fc31 	bl	80005f0 <__aeabi_dmul>
 8008d8e:	a360      	add	r3, pc, #384	; (adr r3, 8008f10 <atan+0x318>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 fa78 	bl	8000288 <__aeabi_dsub>
 8008d98:	4632      	mov	r2, r6
 8008d9a:	463b      	mov	r3, r7
 8008d9c:	f7f7 fc28 	bl	80005f0 <__aeabi_dmul>
 8008da0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	d155      	bne.n	8008e56 <atan+0x25e>
 8008daa:	4640      	mov	r0, r8
 8008dac:	4649      	mov	r1, r9
 8008dae:	f7f7 fa6d 	bl	800028c <__adddf3>
 8008db2:	4622      	mov	r2, r4
 8008db4:	462b      	mov	r3, r5
 8008db6:	f7f7 fc1b 	bl	80005f0 <__aeabi_dmul>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7f7 fa61 	bl	8000288 <__aeabi_dsub>
 8008dc6:	e72c      	b.n	8008c22 <atan+0x2a>
 8008dc8:	ee10 0a10 	vmov	r0, s0
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4b57      	ldr	r3, [pc, #348]	; (8008f2c <atan+0x334>)
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	f7f7 fa59 	bl	8000288 <__aeabi_dsub>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4606      	mov	r6, r0
 8008dda:	460f      	mov	r7, r1
 8008ddc:	4b53      	ldr	r3, [pc, #332]	; (8008f2c <atan+0x334>)
 8008dde:	4620      	mov	r0, r4
 8008de0:	4629      	mov	r1, r5
 8008de2:	f7f7 fa53 	bl	800028c <__adddf3>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 fd29 	bl	8000844 <__aeabi_ddiv>
 8008df2:	f04f 0a01 	mov.w	sl, #1
 8008df6:	4604      	mov	r4, r0
 8008df8:	460d      	mov	r5, r1
 8008dfa:	e764      	b.n	8008cc6 <atan+0xce>
 8008dfc:	4b4d      	ldr	r3, [pc, #308]	; (8008f34 <atan+0x33c>)
 8008dfe:	429e      	cmp	r6, r3
 8008e00:	dc1d      	bgt.n	8008e3e <atan+0x246>
 8008e02:	ee10 0a10 	vmov	r0, s0
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b4b      	ldr	r3, [pc, #300]	; (8008f38 <atan+0x340>)
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	f7f7 fa3c 	bl	8000288 <__aeabi_dsub>
 8008e10:	2200      	movs	r2, #0
 8008e12:	4606      	mov	r6, r0
 8008e14:	460f      	mov	r7, r1
 8008e16:	4b48      	ldr	r3, [pc, #288]	; (8008f38 <atan+0x340>)
 8008e18:	4620      	mov	r0, r4
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	f7f7 fbe8 	bl	80005f0 <__aeabi_dmul>
 8008e20:	2200      	movs	r2, #0
 8008e22:	4b42      	ldr	r3, [pc, #264]	; (8008f2c <atan+0x334>)
 8008e24:	f7f7 fa32 	bl	800028c <__adddf3>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	f7f7 fd08 	bl	8000844 <__aeabi_ddiv>
 8008e34:	f04f 0a02 	mov.w	sl, #2
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	e743      	b.n	8008cc6 <atan+0xce>
 8008e3e:	462b      	mov	r3, r5
 8008e40:	ee10 2a10 	vmov	r2, s0
 8008e44:	2000      	movs	r0, #0
 8008e46:	493d      	ldr	r1, [pc, #244]	; (8008f3c <atan+0x344>)
 8008e48:	f7f7 fcfc 	bl	8000844 <__aeabi_ddiv>
 8008e4c:	f04f 0a03 	mov.w	sl, #3
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
 8008e54:	e737      	b.n	8008cc6 <atan+0xce>
 8008e56:	4640      	mov	r0, r8
 8008e58:	4649      	mov	r1, r9
 8008e5a:	f7f7 fa17 	bl	800028c <__adddf3>
 8008e5e:	4622      	mov	r2, r4
 8008e60:	462b      	mov	r3, r5
 8008e62:	f7f7 fbc5 	bl	80005f0 <__aeabi_dmul>
 8008e66:	4e36      	ldr	r6, [pc, #216]	; (8008f40 <atan+0x348>)
 8008e68:	4b36      	ldr	r3, [pc, #216]	; (8008f44 <atan+0x34c>)
 8008e6a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8008e6e:	4456      	add	r6, sl
 8008e70:	449a      	add	sl, r3
 8008e72:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e76:	f7f7 fa07 	bl	8000288 <__aeabi_dsub>
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	f7f7 fa03 	bl	8000288 <__aeabi_dsub>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008e8a:	f7f7 f9fd 	bl	8000288 <__aeabi_dsub>
 8008e8e:	f1bb 0f00 	cmp.w	fp, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	460d      	mov	r5, r1
 8008e96:	f6bf aece 	bge.w	8008c36 <atan+0x3e>
 8008e9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	461d      	mov	r5, r3
 8008ea2:	e6c8      	b.n	8008c36 <atan+0x3e>
 8008ea4:	a51c      	add	r5, pc, #112	; (adr r5, 8008f18 <atan+0x320>)
 8008ea6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008eaa:	e6c4      	b.n	8008c36 <atan+0x3e>
 8008eac:	f3af 8000 	nop.w
 8008eb0:	54442d18 	.word	0x54442d18
 8008eb4:	bff921fb 	.word	0xbff921fb
 8008eb8:	8800759c 	.word	0x8800759c
 8008ebc:	7e37e43c 	.word	0x7e37e43c
 8008ec0:	e322da11 	.word	0xe322da11
 8008ec4:	3f90ad3a 	.word	0x3f90ad3a
 8008ec8:	24760deb 	.word	0x24760deb
 8008ecc:	3fa97b4b 	.word	0x3fa97b4b
 8008ed0:	a0d03d51 	.word	0xa0d03d51
 8008ed4:	3fb10d66 	.word	0x3fb10d66
 8008ed8:	c54c206e 	.word	0xc54c206e
 8008edc:	3fb745cd 	.word	0x3fb745cd
 8008ee0:	920083ff 	.word	0x920083ff
 8008ee4:	3fc24924 	.word	0x3fc24924
 8008ee8:	5555550d 	.word	0x5555550d
 8008eec:	3fd55555 	.word	0x3fd55555
 8008ef0:	2c6a6c2f 	.word	0x2c6a6c2f
 8008ef4:	bfa2b444 	.word	0xbfa2b444
 8008ef8:	52defd9a 	.word	0x52defd9a
 8008efc:	3fadde2d 	.word	0x3fadde2d
 8008f00:	af749a6d 	.word	0xaf749a6d
 8008f04:	3fb3b0f2 	.word	0x3fb3b0f2
 8008f08:	fe231671 	.word	0xfe231671
 8008f0c:	3fbc71c6 	.word	0x3fbc71c6
 8008f10:	9998ebc4 	.word	0x9998ebc4
 8008f14:	3fc99999 	.word	0x3fc99999
 8008f18:	54442d18 	.word	0x54442d18
 8008f1c:	3ff921fb 	.word	0x3ff921fb
 8008f20:	440fffff 	.word	0x440fffff
 8008f24:	7ff00000 	.word	0x7ff00000
 8008f28:	3fdbffff 	.word	0x3fdbffff
 8008f2c:	3ff00000 	.word	0x3ff00000
 8008f30:	3ff2ffff 	.word	0x3ff2ffff
 8008f34:	40037fff 	.word	0x40037fff
 8008f38:	3ff80000 	.word	0x3ff80000
 8008f3c:	bff00000 	.word	0xbff00000
 8008f40:	080095a0 	.word	0x080095a0
 8008f44:	080095c0 	.word	0x080095c0

08008f48 <fabs>:
 8008f48:	ec53 2b10 	vmov	r2, r3, d0
 8008f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f50:	ec43 2b10 	vmov	d0, r2, r3
 8008f54:	4770      	bx	lr

08008f56 <matherr>:
 8008f56:	2000      	movs	r0, #0
 8008f58:	4770      	bx	lr
 8008f5a:	0000      	movs	r0, r0
 8008f5c:	0000      	movs	r0, r0
	...

08008f60 <nan>:
 8008f60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f68 <nan+0x8>
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	00000000 	.word	0x00000000
 8008f6c:	7ff80000 	.word	0x7ff80000

08008f70 <_init>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	bf00      	nop
 8008f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f76:	bc08      	pop	{r3}
 8008f78:	469e      	mov	lr, r3
 8008f7a:	4770      	bx	lr

08008f7c <_fini>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr
